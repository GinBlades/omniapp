--
-- Data for Name: notes_categories; Type: TABLE DATA; Schema: public; Owner: shaun
--

COPY notes_categories (id, name, slug, created_at, updated_at) FROM stdin;
1	Code	code	2015-03-31 21:14:37.782781	2015-03-31 21:14:37.782781
2	Ruby	ruby	2015-03-31 21:14:37.790203	2015-03-31 21:14:37.790203
3	Rails	rails	2015-03-31 21:14:37.792992	2015-03-31 21:14:37.792992
4	JavaScript	javascript	2015-03-31 21:14:37.795455	2015-03-31 21:14:37.795455
5	PostgreSQL	postgresql	2015-03-31 21:14:37.797729	2015-03-31 21:14:37.797729
6	Game	game	2015-03-31 21:14:37.800105	2015-03-31 21:14:37.800105
7	Setup	setup	2015-03-31 21:14:37.802446	2015-03-31 21:14:37.802446
8	Python	python	2015-03-31 21:14:37.804815	2015-03-31 21:14:37.804815
\.


--
-- Name: notes_categories_id_seq; Type: SEQUENCE SET; Schema: public; Owner: shaun
--

SELECT pg_catalog.setval('notes_categories_id_seq', 8, true);


--
-- Data for Name: notes_entries; Type: TABLE DATA; Schema: public; Owner: shaun
--

COPY notes_entries (id, name, slug, body, notes_category_id, created_at, updated_at) FROM stdin;
1	Devise to Haml	devise-to-haml	    #!/bin/sh\r\n    rails g devise:views\r\n    html2haml app/views/devise/shared/_links.erb app/views/devise/shared/_links.haml\r\n    html2haml app/views/devise/confirmations/new.html.erb app/views/devise/confirmations/new.html.haml\r\n    html2haml app/views/devise/passwords/edit.html.erb app/views/devise/passwords/edit.html.haml\r\n    html2haml app/views/devise/passwords/new.html.erb app/views/devise/passwords/new.html.haml\r\n    html2haml app/views/devise/registrations/edit.html.erb app/views/devise/registrations/edit.html.haml\r\n    html2haml app/views/devise/registrations/new.html.erb app/views/devise/registrations/new.html.haml\r\n    html2haml app/views/devise/sessions/new.html.erb app/views/devise/sessions/new.html.haml\r\n    html2haml app/views/devise/unlocks/new.html.erb app/views/devise/unlocks/new.html.haml\r\n    html2haml app/views/devise/mailer/confirmation_instructions.html.erb app/views/devise/mailer/confirmation_instructions.html.haml\r\n    html2haml app/views/devise/mailer/reset_password_instructions.html.erb app/views/devise/mailer/reset_password_instructions.html.haml\r\n    html2haml app/views/devise/mailer/unlock_instructions.html.erb app/views/devise/mailer/unlock_instructions.html.haml\r\n    rails destroy devise:views	1	2015-03-31 21:14:38.820985	2015-03-31 21:14:38.820985
2	Forem to Haml	forem-to-haml	    #!/bin/sh\r\n\r\n    html2haml admin/base/index.html.erb admin/base/index.html.haml\r\n\r\n    html2haml admin/categories/_form.html.erb admin/categories/_form.html.haml\r\n    html2haml admin/categories/edit.html.erb admin/categories/edit.html.haml\r\n    html2haml admin/categories/index.html.erb admin/categories/index.html.haml\r\n    html2haml admin/categories/new.html.erb admin/categories/new.html.haml\r\n\r\n    html2haml admin/forums/_form.html.erb admin/forums/_form.html.haml\r\n    html2haml admin/forums/edit.html.erb admin/forums/edit.html.haml\r\n    html2haml admin/forums/index.html.erb admin/forums/index.html.haml\r\n    html2haml admin/forums/new.html.erb admin/forums/new.html.haml\r\n\r\n    html2haml admin/groups/_form.html.erb admin/groups/_form.html.haml\r\n    html2haml admin/groups/index.html.erb admin/groups/index.html.haml\r\n    html2haml admin/groups/new.html.erb admin/groups/new.html.haml\r\n    html2haml admin/groups/show.html.erb admin/groups/show.html.haml\r\n\r\n    html2haml admin/topics/_form.html.erb admin/topics/_form.html.haml\r\n    html2haml admin/topics/edit.html.erb admin/topics/edit.html.haml\r\n\r\n    html2haml categories/_category.html.erb categories/_category.html.haml\r\n    html2haml categories/show.html.erb categories/show.html.haml\r\n\r\n    html2haml forums/_forum.html.erb forums/_forum.html.haml\r\n    html2haml forums/_head.html.erb forums/_head.html.haml\r\n    html2haml forums/_listing.html.erb forums/_listing.html.haml\r\n    html2haml forums/index.html.erb forums/index.html.haml\r\n    html2haml forums/show.html.erb forums/show.html.haml\r\n\r\n    html2haml moderation/_options.html.erb moderation/_options.html.haml\r\n    html2haml moderation/index.html.erb moderation/index.html.haml\r\n\r\n    html2haml posts/_form.html.erb posts/_form.html.haml\r\n    html2haml posts/_moderation_tools.html.erb posts/_moderation_tools.html.haml\r\n    html2haml posts/_post.html.erb posts/_post.html.haml\r\n    html2haml posts/_reply_to_post.html.erb posts/_reply_to_post.html.haml\r\n    html2haml posts/edit.html.erb posts/edit.html.haml\r\n    html2haml posts/new.html.erb posts/new.html.haml\r\n\r\n    html2haml topics/_form.html.erb topics/_form.html.haml\r\n    html2haml topics/_head.html.erb topics/_head.html.haml\r\n    html2haml topics/_topic.html.erb topics/_topic.html.haml\r\n    html2haml topics/show.html.erb topics/show.html.haml\r\n    html2haml topics/new.html.erb topics/new.html.haml\r\n	1	2015-03-31 21:14:38.874752	2015-03-31 21:14:38.874752
3	Useful Code	useful-code	## JavaScript:\r\n\r\nThis seems to be one of the few ways that you can\r\ncreate elements in IE7.\r\n\r\n    var requiredSpan = $('<span />').attr({'class' : 'required'}).text('*');\r\n\r\n## Git:\r\n\r\nTo get the most recent version of git on ubuntu\r\n\r\n    sudo apt-add-repository ppa:git-core/ppa\r\n\r\nThis will find and remove any deleted files from the repo\r\nfor the next commit.\r\n\r\n    git diff --diff-filter=D --name-only -z | xargs -0 git rm\r\n\r\nSet up a new git repository on github, then push:\r\n\r\n    git remote add origin git@github.com:thepolycube/wine-recorder.git\r\n    git push -u origin master\r\n\r\nTo 'unset' commits without modifying files.\r\n\r\n    git reset --soft HEAD^ \r\n\r\nor\r\n\r\n    git reset --soft HEAD~1\r\n\r\nThen reset the unwanted files in order to leave them out from the commit:\r\n\r\n    git reset HEAD path/to/unwanted_file\r\n\r\nNow commit again\r\n\r\n### Setup remote repo\r\n\r\n    ssh username@hostname.com \r\n    mkdir the_project.git \r\n    cd the_project.git \r\n    git init --bare\r\n\r\n    git remote add origin username@hostname.com:the_project.git \r\n\r\n\r\n## Rails:\r\n\r\nThe database.yml file needs to have embedded ruby tags when processing environmental variables.\r\n\r\n    host: <%= ENV["DEV_DB_HOST"] %>\r\n\r\nGenerate a secret key\r\n\r\n    irb\r\n    >> require 'securerandom'\r\n    >> SecureRandom.hex(64)\r\n    >> exit\r\n\r\n## Haml:\r\n\r\nYou can store HAML as a field in the database, then render it\r\n\r\n    Haml::Engine.new(@post.body).render(self)\r\n\r\n## Heroku:\r\n\r\nCreate Heroku App\r\n\r\n    heroku create --stack cedar\r\n\r\nConnect to postgres\r\n\r\n    heroku pg:psql\r\n\r\nRun migration on Heroku\r\n\r\n    heroku run rake db:migrate\r\n\r\nHeroku with MongoHQ\r\n\r\n    production:\r\n      sessions:\r\n        default:\r\n          uri: <%= ENV['MONGOHQ_URL'] %>\r\n          options:\r\n            read: primary\r\n            max_retries: 1\r\n            retry_interval: 0\r\n\r\n## Postgres:\r\n\r\n\r\n\r\n## Windows Command Line:\r\n\r\n## Facebook Query\r\n\r\n    https://graph.facebook.com/122326728212?fields=id,members.fields(first_name,last_name)&access_token=\r\n	1	2015-03-31 21:14:38.925742	2015-03-31 21:14:38.925742
4	Design Patterns in Ruby	design-patterns-in-ruby	## Chapter 1 - Building Better Programs with Patterns\r\n\r\nThis would be considered tightly coupled:\r\n\r\n    my_car = Car.new\r\n    my_car.drive(200)\r\n\r\n    if is_car\r\n      # car specific functions\r\n    else\r\n      # plane specific functions\r\n    end\r\n\r\nA better solution would be:\r\n\r\n    my_vehicle = get_vehicle\r\n    my_vehicle.travel(200)\r\n\r\nThis is an example of *programming to an interface*. The idea is to program to\r\nthe most general type you can.\r\n\r\nBy creating an inheritance chain, you are also creating a problem of tightly\r\ncoupled pieces. An alternative would be to assemble behaviors\r\nusing *composition*. Back to the vehicle example, say you want a car\r\nto be able to go for a drive\r\n\r\n    class Car < Vehicle\r\n       def sunday_drive\r\n         start_engine\r\n         # cruise around\r\n         stop_engine\r\n       end\r\n    end\r\n\r\nYou realize many vehicles will need engines, so you abstract it to the common\r\nVehicle class\r\n\r\n    class Vehicle\r\n      def start_engine\r\n        # start the engine\r\n      end\r\n      def stop_engine\r\n        # stop the engine\r\n      end\r\n    end\r\n\r\nHowever, this would not be helpful for any vehicle that did not have an engine,\r\nsuch as a bike or a sailboat. An alternative is to put this engine code into a\r\nclass of its own.\r\n\r\n    class Engine\r\n\r\n      def start\r\n      end\r\n\r\n      def stop\r\n      end\r\n    end\r\n\r\nNow our Car can reference its own Engine.\r\n\r\n    class Car\r\n      def initialize\r\n        @engine = Engine.new\r\n      end\r\n\r\n      def sunday_drive\r\n        @engine.start\r\n        @engine.stop\r\n      end\r\n    end\r\n\r\nYou can still use `start_engine` and `stop_engine` methods in the Car class. But\r\nnow they can be *delegated* to the Engine class\r\n\r\n    def start_engine\r\n      @engine.start\r\n    end\r\n\r\n### Overview of GoF Patterns covered:\r\n\r\n* Template Method\r\n* Strategy Object\r\n* Observer Pattern\r\n* Composite Pattern\r\n* Iterator Pattern\r\n* Command Pattern\r\n* Adapter\r\n* Proxy\r\n* Decorator Pattern\r\n* Singleton\r\n* Factory Method\r\n* Abstract Factory\r\n* Builder\r\n* Interpreter\r\n\r\nSome patterns specific to Ruby\r\n\r\n* DSL - Domain Specific Language\r\n* Meta-programming\r\n* Convention over Configuration\r\n\r\n## Chapter 2 - Getting Started with Ruby\r\n\r\n### Regular Expressions\r\n\r\n    /old/ =~ 'this old house' # 5 - the index of 'old'\r\n    /Russ|Russell/ =~ 'Fred' # nil - Fred is not Russ nor Russell\r\n    /.*/ =~ 'any old string' # 0 - the Regex will match anything\r\n\r\n### Classes\r\n\r\n    class BankAccount\r\n      def initialize(account_owner)\r\n        @owner = account_owner\r\n        @balance = 0\r\n      end\r\n\r\n      def deposit(amount)\r\n        @balance = @balance + amount\r\n      end\r\n\r\n      def withdraw(amount)\r\n        @balance = @balance - amount\r\n      end\r\n    end\r\n\r\n    my_account = BankAccount.new('Russ')\r\n\r\nInstance variables, like @owner and @balance, are not available outside the class. You can create\r\ngetter and setter methods with a shortcut in Ruby:\r\n\r\n    attr_accessor :balance, :grace, :agility\r\n    attr_reader :name # just for getting\r\n    attr_reader :name # just for setting\r\n\r\nRuby supports single inheritance, all classes have exactly one parent (or *superclass*) You can use `super`\r\nto access methods in the parent class, for instance:\r\n\r\n    def initialize(owner, rate)\r\n      super(owner)\r\n      @rate = rate\r\n    end\r\n\r\nNOTE: Ruby does not automatically ensure that the `initialize` method is run for superclasses. So if the\r\nsubclass does not make reference to it, it may not get called.\r\n\r\n### Argument Options\r\n\r\nYou can use `*` to apply an array\r\n\r\n    def add_students(*names)\r\n      for student in names\r\n        puts("adding student #{student}")\r\n      end\r\n    end\r\n\r\n### Modules\r\n\r\nThis is another way to encapsulate code.\r\n\r\n    module HelloModule\r\n      def say_hello\r\n        puts('Hello out there')\r\n      end\r\n    end\r\n\r\n    class TryIt\r\n      include HelloModule\r\n    end\r\n\r\nModules that are included in classes have access to all the methods and instance variables\r\n\r\n    module Chatty\r\n      def say_hi\r\n        puts("Hello, my name is #{name}")\r\n      end\r\n    end\r\n\r\n    class Employee\r\n      include Chatty\r\n\r\n      def name\r\n        'Fred'\r\n      end\r\n    end\r\n\r\n### Exceptions\r\n\r\nYou can use an exception to catch areas that might cause a problem.\r\n\r\n    begin\r\n      quotient = 1 / 0\r\n    rescue\r\n      puts('Something bad happened')\r\n    end\r\n\r\n### Threads\r\n\r\nYou can create threads with the `Thread.new do` block.\r\nThen wait for the threads to end with a `.join` method.\r\n\r\n### Managing Separate Files\r\n\r\nYou can require code from the ruby library, your own code, or gems.\r\n\r\n    require 'uri'\r\n    yahoo = URI.parse('http://www.yahoo.com')\r\n\r\n    require 'rubygems'\r\n    require 'runt'\r\n\r\n## Chapter 3 - Varying the Algorithm with the Template Method	2	2015-03-31 21:14:38.980347	2015-03-31 21:14:38.980347
5	Ruby on Rails 4	ruby-on-rails-4	# Ruby on Rails 5 - Catching Up\r\n\r\n## HTML5 Form Helpers\r\n\r\n`week_field_tag`\r\n: Allows you to select a particular week of the year. This works in browsers that support the `week` HTML5 form element.\r\n\r\n`date_field_tag`\r\n: Allows you to select a particular date\r\n\r\n`datetime_field_tag` / `datetime_local_field_tag`\r\n: Select the date, based on UTC or local time of the computer.\r\n\r\n`time_field_tag`\r\n: Allows time values\r\n\r\n`month_field_tag`\r\n: Like week field, but with months.\r\n\r\n`color_field_tag`\r\n: Select a color field. Stores a hexidecimal value\r\n\r\n`highlight`\r\n: Allows you to highlight an item within a string. Creates the `<mark></mark>` tag.\r\n\r\n    = highlight "test one two three", "one"\r\n\r\n## Collection Form Helpers\r\n\r\n`collection_select`\r\n: This has been available since rails 3.\r\n  f.label :category\r\n  f.collection_select :category_id, Category.all, :id, :name\r\n\r\n`collection_radio_buttons`\r\n: This modifies the output to radio buttons, rather than a dropdown. You can use the same format as `collection_select`, or try some new values\r\n\r\n    f.collection_radio_buttons :category_id, Category.all, :id, :name do |b|\r\n      b.label("data-value": b.value) { b.radio_button + " " + b.text }\r\n\r\n`collection_check_boxes`\r\n: Pass check boxes to things that have a `many` relationships.\r\n\r\n    f.collection_check_boxes :post_ids, Post.all, :id, :title\r\n\r\n    f.collection_check_boxes :post_ids, Post.all, :id, :title do |b|\r\n      b.label("data-value": b.value) { b.check_box + " " + b.text }\r\n\r\n*NOTE:* Make sure the "strong parameters" for that field is set to an empty array.\r\n\r\n  def category_params\r\n    binding.pry\r\n    params.require(:category).permit(:name, post_ids: [])\r\n  end\r\n\r\n## Custom Flash Types\r\n\r\nThe Rails 3 way.\r\n\r\n  # in the controller\r\n  flash[:warning] = "My message"\r\n  # in the view\r\n  content_tag :div, flash[:warning] if flash[:warning]\r\n\r\nCustom flash types can be set up. in the `application_controller`\r\n\r\n  add_flash_types :warning[, :others]\r\n  # in the contrller\r\n  format.html { redirect_to @post, warning: 'this warning' }\r\n  # in the view\r\n  content_tag :div, warning if warning\r\n\r\n## Before_Action\r\n\r\nRename of `before_filter`.\r\n\r\n## Caching\r\n\r\nIn your model, you can have anything belong to a parent object\r\n\r\n  class Comment < ActiveRecord::Base\r\n    belongs_to :commentable, polymorphic: true, touch :true\r\n  end\r\n\r\n`touch :true` enables caching.\r\n\r\nIn Rails 4, fragment caching is the only one available by default. `page_caching` and `action_caching` are available as gems.\r\n\r\nEnable caching in your environments file\r\n\r\n  config.action_controller.perform_caching = true\r\n\r\nThis is on by default in production, off in development.\r\n\r\n?? Research Caching ??\r\n\r\n  -cache @post do\r\n    %p some layout\r\n    -cache comment do\r\n      %p some loop\r\n\r\nNow, this is all you need, it's called cache digest. You don't need to version things, because it's updated every time you deploy.\r\n\r\n## Live Streaming\r\n\r\nFor Live Streaming, you need a threaded server. (puma, thin)\r\n\r\nAllow concurrency in your application in the environment\r\n\r\n  config.preload_frameworks = true\r\n  config.allow_concurrency = true\r\n\r\nYou will need a controller that is exclusively for live streaming\r\n\r\n  exec rails g controller stream index\r\n\r\nInclude a module in your controller, this supports a never ending connection\r\n\r\n  include ActionController::Live\r\n\r\nThen you will need a special header\r\n\r\n  def index\r\n    response.headers["Content-Type"] = "text/event-stream"\r\n  end\r\n\r\nThen run your logic\r\n\r\n  response.stream.write "hello world\\n\\n"\r\n  response.stream.close\r\n\r\nIn your application.js file\r\n\r\n  //jQuery ready function\r\n  $(function() {\r\n\r\n    // Create a new object of the event source type\r\n    var source = new EventSource('/stream');\r\n\r\n    // When this object is instatiated, it starts a connection with the server\r\n    source.onmessage = function(e) {\r\n      console.log(e);\r\n    };\r\n  });\r\n\r\nTo run puma\r\n\r\n  bundle exec puma\r\n\r\n?? This is another tough one. You will probably need more research on streaming. ??\r\n\r\n## Turbolinks\r\n\r\nIt's like ajax, which fetches the title and body. This way you don't need to request assets over and over. In rails 4 it is enabled by default in the gem file. You may have to require it in your javascript file.\r\n\r\nIf you're using document.ready, it's going to be a problem for GET requests.\r\n\r\n  $(function() {\r\n    // this wont work with turbolinks\r\n  });\r\n\r\nYou can use another library, jquery.turbolinks, if you want to restore this functionality. You can also use the new methods\r\n\r\n* `page:fetch`\r\n* `page:load`\r\n* `page:restore`\r\n* `page:change`\r\n\r\n## Dynamic index.html\r\n\r\nIt's now in a gem.\r\n\r\n## Strong Parameters\r\n\r\ninstead of attr_accessible, use this in the controller:\r\n\r\n  def post_params\r\n    params.require(:post).permit(:title, :body, :category_id)\r\n  end\r\n\r\n## PostgreSQL hstore\r\n\r\nhstore provides a schemaless option for PostgreSQL databases. You can create a migration called `AddHstore` and then modify the contents\r\n\r\n  class AddHstore < ActiveRecord::Migration\r\n    def up\r\n      execute "CREATE EXTENSION hstore"\r\n    end\r\n\r\n    def down\r\n      execute "DROP EXTENSION hstore"\r\n    end\r\n  end\r\n\r\nRemember to `rake db:migrate`. Then create a migration for the information you want\r\n\r\n  rails g migration AddMetaToImages meta:hstore\r\n  rake db:migrate\r\n\r\nThen you can set attributes within a hash\r\n\r\n  i.meta = { camera: "Nikon D3100" }\r\n\r\nThen display it in your view\r\n\r\n  @image.meta["camera"] if @image.meta.present?\r\n\r\n*NOTE:* PostgreSQL doesn't store symbols, it stores strings.\r\n\r\nYou can even cycle through these attributes\r\n\r\n  @image.meta.each do |key,value|\r\n    key.humanize\r\n    value\r\n  end\r\n\r\nWhen updating, you'll need to update the entire hash. So to add a `resolution` you will set the camera as well\r\n\r\n  i.update_attributes = { "camera" => "Nikon D3000", "resolution" => "1024x768" }\r\n\r\nYou can also add an accessor to your model\r\n\r\n  store_accessor :meta, :camera, :resolution\r\n\r\nThen you can update the value of the `meta` hash more easily:\r\n\r\n  i.camera = "Nikon D3000"\r\n  i.resolution = "1024x768"\r\n  i.save\r\n\r\nTo query for these values\r\n\r\n  Image.where "meta ? :key", key: "resolution"\r\n  # returns the objects with resolution set\r\n  Image.where "meta -> :key = :value", key: "camera", value: "Nikon D3000"\r\n  # returns the objects with the matching value\r\n\r\nYou can also use `not` before the name of the hstore field. Or you can use the `like` keyword to search with wildcards.\r\n\r\n  Image.where "meta -> :key like :value", key: "camera", value: "%ikon%"\r\n\r\n## PostgreSQL arrays\r\n\r\nPostgreSQL can also work with arrays. In the migration:\r\n\r\n  def change\r\n    add_column :posts, :tags, :string, array: true\r\n    add_column :posts, :lottery_numbers, :integer, array: true\r\n  end\r\n\r\nThen you can create a new array:\r\n\r\n  p = Post.new title: 'Testing arrays', tags: %w(ruby rails postgres), lotter_numbers: [ 10, 15, 24, 36, 43, 47 ]\r\n  p.save\r\n\r\nYou can make deletes:\r\n\r\n  p.update_attribute :tags, [ "rails", "postgres" ]\r\n\r\nAnother way to make the migration:\r\n\r\n  def up\r\n    change_column :posts, :tags, :string, array:true, default: '{ruby}'\r\n  end\r\n\r\n## ActiveModel::Model\r\n\r\nYou can use different objects for the `form_for` method. You will need to create a model:\r\n\r\n  class Contact\r\n    include ActiveModel::Model\r\n    attr_accessor :first_name, :last_name, :subject, :message\r\n  end\r\n\r\n## ActiveRecord's 'not' Method\r\n\r\n  filtered_posts = Post.where.not category_id: 7\r\n  filtered_posts = Post.where.not category_id: [5, 7]\r\n  \r\n  filtered_posts = Post.where("title not like ?", "%orm%")\r\n\r\n## Concerns in the Models\r\n\r\nAllows you to include a feature mixin within the model.\r\n\r\nIn `app/models/concerns/commentable.rb`\r\n\r\n  module Commentable\r\n    extend ActiveSupport::Concern\r\n\r\n    included do\r\n      has_many :comments, as: :commentable\r\n    end\r\n  end\r\n\r\nThen, in the models.\r\n\r\n  include Commentable\r\n\r\n## Concerns in the Router\r\n\r\nThis uses some nested routes, that is confusing.\r\n\r\nInstead of\r\n\r\n  resources :images do\r\n    resources :commentable\r\n  end\r\n\r\nYou can do\r\n  \r\n  concern :commentable do\r\n    resources :comments\r\n  end\r\n\r\n  resources :images, concerns: :commentable\r\n\r\n\r\n## PATCH Verb\r\n\r\n## No More Plugins\r\n\r\n## Tests\r\n\r\n## Gem Extractions: ActiveResource, Observers\r\n\r\n## How to Upgrade\r\n\r\n## Final Tips\r\n	2	2015-03-31 21:14:39.032564	2015-03-31 21:14:39.032564
6	Ancestry	ancestry	# Ancestry\r\n\r\nInstall the ancestry gem\r\n\r\n    gem 'ancestry'\r\n\r\nCreate a scaffolding to create\r\n \r\n    rails g scaffold page name content:text ancestry:string:index\r\n\r\nIn the form template, change the ancestry field\r\n\r\n    = f.label :parent_id\r\n    = f.collection_select :parent_id, Page.order(:name), :id, :name, include_blank: true\r\n\r\nIn the page controller add `parent_id` to the parameters. In the model add `has_ancestry`\r\n\r\nFor main navigation\r\n\r\n    <ul>\r\n      <% Page.roots.each do |page| %>\r\n        <li><%= link_to page.name, page, class: ('active' if @page.root == page) %></li>\r\n      <% end %>\r\n    </ul>\r\n\r\nFor sidebar\r\n  \r\n    # partials/_submenu_pages.html\r\n\r\n    %ul#menu\r\n      - pages.each do |page, children|\r\n        %li\r\n          = link_to_unless_current page.name, page\r\n          = render 'submenu_pages', pages: children if children.present?\r\n\r\n    # show.html\r\n\r\n    #submenu\r\n      = render 'submenu_pages', pages: @page.root.descendants.arrange\r\n\r\nFor breadcrumbs\r\n\r\n    #breadcrumbs\r\n      - @page.ancestors.each do |page|\r\n        = link_to page.name, page\r\n	3	2015-03-31 21:14:39.08708	2015-03-31 21:14:39.08708
7	Ruby and MongoDB	ruby-and-mongodb	# Ruby and MongoDB Web Development Beginner's Guide\r\n\r\n## Chapter 2. Diving Deep into MongoDB\r\n\r\n### Summary\r\n\r\n* Modling the application data.\r\n* Mapping it to MongoDB objects.\r\n* Creating embedded and relational objects.\r\n* Fetching objects.\r\n* How does this differ from the SQL way?\r\n* Take a brief look at Map/Reduce, with an example.\r\n\r\n### Creating Our First Document\r\n\r\nA simple book:\r\n\r\n    book = {\r\n      name: "Oliver Twist",\r\n      author: "Charles Dickens",\r\n      publisher: "Dover Publications",\r\n      published_on: "December 30, 2002",\r\n      category: ['Classics', 'Drama']\r\n    }\r\n\r\nInsert into the database\r\n\r\n    db.books.insert(book)\r\n\r\nA simple shelf collection, where the books will be stored:\r\n\r\n    shelf : {\r\n      name : 'Fiction',\r\n      location : { row : 10, column : 3 },\r\n      floor : 1\r\n      lex : { start : 'O', end : 'P' },\r\n    }\r\n\r\n### Embedding Reviews and Votes\r\n\r\nEmbed objects into the document with array (`[]`) notation\r\n\r\n    book : {\r\n      name: "Oliver Twist",\r\n      reviews : [\r\n        {\r\n          user: "Gautam",\r\n          comment: "Very interesting read"\r\n        },\r\n        {\r\n          user: "Harry",\r\n          comment: "Who is Oliver Twist?"\r\n        }\r\n      ]\r\n    votes: [ "Gautam", "Tom", "Dick"]\r\n    }\r\n\r\n### Creating Document Relations\r\n\r\nIn your object model, if you will never search by the nested document, embed it.\r\n\r\n### Writing the map function for calculating vote statistics\r\n\r\nAn example document structure:\r\n\r\n    { name: "Oliver Twist",\r\n      votes: ['Gautam', 'Harry']\r\n      published_on: "December 30, 2002"\r\n    }\r\n\r\nA map function applied to this document(and others in the collection)\r\n\r\n    function() {\r\n      emit( this.name, {votes : this.votes} );\r\n    }\r\n\r\nFor each piece of data emitted, the reduce function emits the result.\r\n\r\n    function reduce(key, values_array) -> value\r\n\r\n### Writing the reduce function to process emitted information.\r\n\r\nAn example:\r\n\r\n    function(key, values) {\r\n      var result = { votes: 0 };\r\n      values.forEach(function(value) {\r\n        results.votes += value.votes;\r\n      });\r\n      return result;\r\n    }\r\n\r\n### Start your engines\r\n\r\nGenerate a new rails project, with jQuery and without activerecord(`-O`)\r\n\r\n    rails new sodibee -O\r\n\r\nAdd to your gem file:\r\n\r\n    #gem MongoDB and helpers\r\n    gem 'mongoid'\r\n    gem 'bson'\r\n    gem 'bson_ext'\r\n\r\nAnd run `bundle install`.\r\n\r\n### Configure Mongoid\r\n\r\nGenerate a configuration file for mongoid with the command line\r\n\r\n    rails g mongoid:config\r\n\r\nThis creates the config/mongoid.yml and edits config/application.rb to ensure ActiveRecord is disabled.\r\n\r\n### Planning the Object Schema\r\n\r\nModels will autocreate in MongoDB (because if a collection doesn't exist in mongo it automatically creates it).\r\n\r\n#### The book model\r\n\r\n  class Book\r\n    include Mongoid::Document\r\n\r\n    field :title, type: String\r\n    field :publisher, type: String\r\n    field :published_on, type: Date\r\n    field :votes, type: Array\r\n    belongs_to :author\r\n    has_and_belongs_to_many :categories\r\n    embeds_many :reviews\r\n  end\r\n\r\n### Putting it all together\r\n\r\nTo make an object in the rails console:\r\n\r\n    b = Book.new(title: "Oliver Twist", publisher: "Dover Publications", published_on: Date.parse("2002-12-30") )\r\n    Author.create(name: "Charles Dickens")\r\n    Category.create(name: "Fiction")\r\n    Category.create(name: "Drama")\r\n    b.author = Author.where(name: "Charles Dickens").first\r\n    b.categories << Category.first\r\n    b.categories << Category.last\r\n    b\r\n    b.save\r\n\r\nCheck that this has been saved in the Mongo CLI\r\n\r\n    mongo\r\n    use sodibee_development\r\n    db.books.findOne()\r\n\r\n### Adding reviews to books\r\n\r\nIn the console again:\r\n\r\n    b = Book.where(title: "Oliver Twist").first\r\n\r\nTo embed an object\r\n\r\n    b.reviews.create(comment: "Fast paced book!", username: "Gautam")\r\n    b.reviews.create(comment: "Excellent literature", username: "Tom")\r\n\r\n### Embedding Lease and Purchase Models\r\n\r\nWe'll use three models to map the lease and purchase process, with orders as an intermediary.\r\n\r\n    class Order\r\n      include Mongoid::Document\r\n\r\n      field :created_at, type: DateTime\r\n      field :type, type: STring\r\n\r\n      belongs_to :book\r\n      embeds_one :lease\r\n      embeds_one :purchase\r\n    end\r\n\r\n    class Lease\r\n      include Mongoid::Document\r\n\r\n      field :from, type: DateTime\r\n      field :until, type: DateTime\r\n\r\n      embedded_in :order\r\n    end\r\n\r\n### Working with Map/Reduce\r\n\r\nNow by adding the votes element to books, we can see how Map/Reduce works.\r\n\r\nFirst add votes\r\n\r\n    a = Book.first\r\n    \r\n    # Must set an empty array, because MongoDB does not add fields\r\n    # into the database until they are populataed.\r\n    b.votes = []\r\n    b.votes << {username: "Gautam", rating: 3}\r\n    b.save\r\n\r\n### Writing the map function to calculate ratings\r\n\r\nThe function will `emit` information. In this case, the key is the username and the value is the rating\r\n\r\n    function() {\r\n      this.votes.forEach(function(x) {\r\n        emit(x.username, {rating: x.rating});\r\n      });\r\n    }\r\n\r\nEvery time `emit` is called, some data is emitted for the reduce function to process. `this` represents the collection object. We are emiting the users votes for the reduce function to process.\r\n\r\n### Writing the reducce function to process the emitted results\r\n\r\nThis takes a key and array of values\r\n\r\n    function(key, values) {\r\n      var result = {rating: 0};\r\n      values.forEach(function(value) {\r\n        result.rating += value.rating;\r\n      });\r\n      return result;\r\n    }\r\n\r\nMap/Reduce functions can be run in parallel, making it faster than the SQL equivalent `GROUP BY`.\r\n\r\n### Working with Map/Reduce using Ruby.\r\n\r\nWe will have to create two strings in Ruby for these functions\r\n\r\n    map = %q{function() {\r\n      this.votes.forEach(function(x) {\r\n        emit(x.username, {rating: x.rating});\r\n      });\r\n    }}\r\n    reduce = %q{function(key, values) {\r\n      var result = {rating: 0};\r\n      values.forEach(function(value) {\r\n        result.rating += value.rating;\r\n      });\r\n      return result;\r\n    }}\r\n\r\nNow we call `map_reduce` on the collection\r\n\r\n    results = Book.map_reduce(map, reduce).out(replace: "vr").each do |document|\r\n      p document\r\n    end\r\n\r\nThis map reduce thing will need some more explaining.\r\n## Chapter 2. Diving Deep into MongoDB\r\n\r\n### Summary\r\n\r\n* Modling the application data.\r\n* Mapping it to MongoDB objects.\r\n* Creating embedded and relational objects.\r\n* Fetching objects.\r\n* How does this differ from the SQL way?\r\n* Take a brief look at Map/Reduce, with an example.\r\n\r\n### Creating Our First Document\r\n\r\nA simple book:\r\n\r\n  book = {\r\n    name: "Oliver Twist",\r\n    author: "Charles Dickens",\r\n    publisher: "Dover Publications",\r\n    published_on: "December 30, 2002",\r\n    category: ['Classics', 'Drama']\r\n  }\r\n\r\nInsert into the database\r\n\r\n  db.books.insert(book)\r\n\r\nA simple shelf collection, where the books will be stored:\r\n\r\n  shelf : {\r\n    name : 'Fiction',\r\n    location : { row : 10, column : 3 },\r\n    floor : 1\r\n    lex : { start : 'O', end : 'P' },\r\n  }\r\n\r\n### Embedding Reviews and Votes\r\n\r\nEmbed objects into the document with array (`[]`) notation\r\n\r\n  book : {\r\n    name: "Oliver Twist",\r\n    reviews : [\r\n      {\r\n        user: "Gautam",\r\n        comment: "Very interesting read"\r\n      },\r\n      {\r\n        user: "Harry",\r\n        comment: "Who is Oliver Twist?"\r\n      }\r\n    ]\r\n  votes: [ "Gautam", "Tom", "Dick"]\r\n  }\r\n\r\n### Creating Document Relations\r\n\r\nIn your object model, if you will never search by the nested document, embed it.\r\n\r\n### Writing the map function for calculating vote statistics\r\n\r\nAn example document structure:\r\n\r\n  { name: "Oliver Twist",\r\n    votes: ['Gautam', 'Harry']\r\n    published_on: "December 30, 2002"\r\n  }\r\n\r\nA map function applied to this document(and others in the collection)\r\n\r\n  function() {\r\n    emit( this.name, {votes : this.votes} );\r\n  }\r\n\r\nFor each piece of data emitted, the reduce function emits the result.\r\n\r\n  function reduce(key, values_array) -> value\r\n\r\n### Writing the reduce function to process emitted information.\r\n\r\nAn example:\r\n\r\n  function(key, values) {\r\n    var result = { votes: 0 };\r\n    values.forEach(function(value) {\r\n      results.votes += value.votes;\r\n    });\r\n    return result;\r\n  }\r\n\r\n### Start your engines\r\n\r\nGenerate a new rails project, with jQuery and without activerecord(`-O`)\r\n\r\n  rails new sodibee -O\r\n\r\nAdd to your gem file:\r\n\r\n  #gem MongoDB and helpers\r\n  gem 'mongoid'\r\n  gem 'bson'\r\n  gem 'bson_ext'\r\n\r\nAnd run `bundle install`.\r\n\r\n### Configure Mongoid\r\n\r\nGenerate a configuration file for mongoid with the command line\r\n\r\n  rails g mongoid:config\r\n\r\nThis creates the config/mongoid.yml and edits config/application.rb to ensure ActiveRecord is disabled.\r\n\r\n### Planning the Object Schema\r\n\r\nModels will autocreate in MongoDB (because if a collection doesn't exist in mongo it automatically creates it).\r\n\r\n#### The book model\r\n\r\n  class Book\r\n    include Mongoid::Document\r\n\r\n    field :title, type: String\r\n    field :publisher, type: String\r\n    field :published_on, type: Date\r\n    field :votes, type: Array\r\n    belongs_to :author\r\n    has_and_belongs_to_many :categories\r\n    embeds_many :reviews\r\n  end\r\n\r\n### Putting it all together\r\n\r\nTo make an object in the rails console:\r\n\r\n  b = Book.new(title: "Oliver Twist", publisher: "Dover Publications", published_on: Date.parse("2002-12-30") )\r\n  Author.create(name: "Charles Dickens")\r\n  Category.create(name: "Fiction")\r\n  Category.create(name: "Drama")\r\n  b.author = Author.where(name: "Charles Dickens").first\r\n  b.categories << Category.first\r\n  b.categories << Category.last\r\n  b\r\n  b.save\r\n\r\nCheck that this has been saved in the Mongo CLI\r\n\r\n  mongo\r\n  use sodibee_development\r\n  db.books.findOne()\r\n\r\n### Adding reviews to books\r\n\r\nIn the console again:\r\n\r\n  b = Book.where(title: "Oliver Twist").first\r\n\r\nTo embed an object\r\n\r\n  b.reviews.create(comment: "Fast paced book!", username: "Gautam")\r\n  b.reviews.create(comment: "Excellent literature", username: "Tom")\r\n\r\n### Embedding Lease and Purchase Models\r\n\r\nWe'll use three models to map the lease and purchase process, with orders as an intermediary.\r\n\r\n  class Order\r\n    include Mongoid::Document\r\n\r\n    field :created_at, type: DateTime\r\n    field :type, type: STring\r\n\r\n    belongs_to :book\r\n    embeds_one :lease\r\n    embeds_one :purchase\r\n  end\r\n\r\n  class Lease\r\n    include Mongoid::Document\r\n\r\n    field :from, type: DateTime\r\n    field :until, type: DateTime\r\n\r\n    embedded_in :order\r\n  end\r\n\r\n### Working with Map/Reduce\r\n\r\nNow by adding the votes element to books, we can see how Map/Reduce works.\r\n\r\nFirst add votes\r\n\r\n  a = Book.first\r\n  \r\n  # Must set an empty array, because MongoDB does not add fields\r\n  # into the database until they are populataed.\r\n  b.votes = []\r\n  b.votes << {username: "Gautam", rating: 3}\r\n  b.save\r\n\r\n### Writing the map function to calculate ratings\r\n\r\nThe function will `emit` information. In this case, the key is the username and the value is the rating\r\n\r\n  function() {\r\n    this.votes.forEach(function(x) {\r\n      emit(x.username, {rating: x.rating});\r\n    });\r\n  }\r\n\r\nEvery time `emit` is called, some data is emitted for the reduce function to process. `this` represents the collection object. We are emiting the users votes for the reduce function to process.\r\n\r\n### Writing the reducce function to process the emitted results\r\n\r\nThis takes a key and array of values\r\n\r\n  function(key, values) {\r\n    var result = {rating: 0};\r\n    values.forEach(function(value) {\r\n      result.rating += value.rating;\r\n    });\r\n    return result;\r\n  }\r\n\r\nMap/Reduce functions can be run in parallel, making it faster than the SQL equivalent `GROUP BY`.\r\n\r\n### Working with Map/Reduce using Ruby.\r\n\r\nWe will have to create two strings in Ruby for these functions\r\n\r\n  map = %q{function() {\r\n    this.votes.forEach(function(x) {\r\n      emit(x.username, {rating: x.rating});\r\n    });\r\n  }}\r\n  reduce = %q{function(key, values) {\r\n    var result = {rating: 0};\r\n    values.forEach(function(value) {\r\n      result.rating += value.rating;\r\n    });\r\n    return result;\r\n  }}\r\n\r\nNow we call `map_reduce` on the collection\r\n\r\n  results = Book.map_reduce(map, reduce).out(replace: "vr").each do |document|\r\n    p document\r\n  end\r\n\r\nThis map reduce thing will need some more explaining.\r\n	2	2015-03-31 21:14:39.142254	2015-03-31 21:14:39.142254
8	Active Record Associations	active-record-associations	## Types of Associations\r\n\r\n* belongs_to\r\n* has_one\r\n* has_many\r\n* has_many :through\r\n* has_one :through\r\n* has_and_belongs_to_many\r\n\r\n### belongs_to\r\n\r\nModel\r\n\r\n  class Order < ActiveRecord::Base\r\n    belongs_to :customer\r\n  end\r\n\r\nMigration\r\n\r\n  class CreateOrders < ActiveRecord::Migration\r\n    def change\r\n      create_table :customers do |t|\r\n        t.string :name\r\n        t.timestamps\r\n      end\r\n\r\n      create_table :orders do |t|\r\n        t.belongs_to :customer\r\n        t.datetime :order_date\r\n        t.timestamps\r\n      end\r\n    end\r\n  end\r\n\r\n### has_one\r\n\r\nModel\r\n\r\n  class Supplier\r\n    has_one :account\r\n\r\nMigration\r\n\r\n  create_table :suppliers do |t|\r\n    t.string :name\r\n    t.timestamps\r\n  end\r\n\r\n  create_table :accounts do |t|\r\n    t.belongs_to :supplier\r\n    t.string ;account_number\r\n    t.timestamps\r\n  end\r\n\r\n### has_many\r\n\r\nModel\r\n\r\n  class Customer\r\n    has_many :orders\r\n\r\nMigration\r\n\r\n  create_table :customers do |t|\r\n    t.string :name\r\n\r\n  create_table :orders do |t|\r\n    t.belongs_to :customer\r\n    t.datetime :order_date\r\n\r\n### has_many :through\r\n\r\nModel\r\n\r\n  class Physician\r\n    has_many :appointments\r\n    has_many :patients, through: :appointments\r\n\r\n  class Appointment\r\n    belongs_to :physician\r\n    belongs_to :patient\r\n\r\n  class Patient\r\n    has_many :appointments\r\n    has_many :physicians, through: :appointments\r\n\r\nMigration\r\n\r\n  create_table :physicians do |t|\r\n    t.string :name\r\n\r\n  create_table :patients do |t|\r\n    t.string :name\r\n\r\n  create_table :appointments do |t|\r\n    t.belongs_to :physician\r\n    t.belongs_to :patient\r\n    t.datetime :appointment_date\r\n\r\nConsole\r\n\r\n  physician.patients = patients\r\n\r\n#### This also works with nested has_many associations\r\n\r\nModel\r\n\r\n  class Document\r\n    has_many :sections\r\n    has_many :paragraphs, through: :sections\r\n\r\n  class Section\r\n    belongs_to :document\r\n    has_many :paragraphs\r\n\r\n  class Paragraph\r\n    belongs_to :section\r\n\r\n### has_one :through\r\n\r\nModel\r\n\r\n  class Supplier\r\n    has_one :account\r\n    has_one :account_history, through: :account\r\n\r\n  class Account\r\n    belongs_to :supplier\r\n    has_one :account_history\r\n\r\n  class AccountHistory\r\n    belongs_to :account\r\n\r\nMigration\r\n\r\n  create_table :suppliers\r\n    t.string :name\r\n\r\n  create_table :accounts\r\n    t.belongs_to :supplier\r\n    t.string :account_number\r\n\r\n  create_table :account_histories\r\n    t.belongs_to :account\r\n    t.integer :credit_rating\r\n\r\n### `has_and_belongs_to_many`\r\n\r\nModel\r\n\r\n  Assembly\r\n    has_and_belongs_to_many :parts\r\n\r\n  Part\r\n    has_and_belongs_to_many :assemblies\r\n\r\nMigration\r\n\r\n  :assemblies\r\n    :name\r\n\r\n  :parts\r\n    :part_number\r\n\r\n  :assemblies_parts\r\n    t.belongs_to :assembly\r\n    t.belongs_to :part\r\n\r\n## Choosing associations\r\n\r\n### belongs_to and has_one\r\n\r\nThink about which makes more sense. For example, a supplier can own an account, but an account can't own a supplier\r\n\r\n  Supplier\r\n    has_one :account\r\n\r\n  Account\r\n    belongs_to :supplier\r\n\r\n### has_many :through and `has_and_belongs_to_many`\r\n\r\n`has_and_belongs_to_many` should be used if y ou don't need to do anything with the bridge table.\r\n\r\n## Special Cases\r\n\r\n### Polymorphic Associations\r\n\r\nWith polymorphic associations, a model can belong to more than one other model, on a single association. For example, you might have a picture model that belongs to either an employee or a product.\r\n\r\nModel\r\n\r\n  Picture\r\n    belongs_to :imageable, polymorphic: true\r\n\r\n  Employee\r\n    has_many :pictures, as: :imageable\r\n\r\n  Product\r\n    has_many :pictures, as: :imageable\r\n\r\nThe polymorphic belongs_to declaration sets up an interface for other models to use.\r\n\r\nConsole\r\n\r\n  @product.pictures\r\n\r\n  @employee.pictures\r\n\r\n  @picture.imageable\r\n\r\nMigration\r\n\r\n  create_table :pictures do |t|\r\n    t.string :name\r\n    t.integer :imageable_id\r\n    t.string :imageable_type\r\n\r\nOR\r\n\r\n  create_table :pictures do |t|\r\n    t.string :name\r\n    t.references :imageable, polymorphic: true\r\n\r\n### Self joins\r\n\r\nYou may want all employees in a single model, but be able to trace relationships between manager and subordinates\r\n\r\nModel\r\n\r\n  Employee\r\n    has_many :subordinates, class_name: "Employee", foreign_key: "manager_id"\r\n    belongs_to :manager, class_name: "Employee"\r\n\r\n## Tips and Tricks\r\n\r\n* Controlling caching\r\n* Avoiding name collisions\r\n* Updating the schema\r\n* Controlling association scope\r\n* Bi-directional associations\r\n\r\n### Controlling Caching\r\n\r\nThe association is cached across methods\r\n\r\n  customer.orders         # query\r\n  customer.orders.size    # cached\r\n  customer.orders.empty?  # cached\r\n\r\nTo prevent this, use `(true)`\r\n\r\n  customer.orders         # query\r\n  customer.orders.size    #cached\r\n  customer.orders(true).empty?  #query\r\n\r\n### Avoiding name collisions\r\n\r\n*attributes* and *connection* are bada names for associations\r\n\r\n### Updating the Schema\r\n\r\nForeign keys should be on the appropriate table. For example\r\n\r\n  Order\r\n    belongs_to :customer\r\n\r\nShould have in the migrataion\r\n\r\n  create_table :orders\r\n    t.integer :customer\r\n\r\n#### Creating Join (bridge) Tables for `has_and_belongs_to_many` Associations\r\n\r\nUnless explicitly specified using `:join_table`, the name is created using the lexical order of the class names. So to join customers and orders, the table should be named should be customers_orders. Also, the join table should be created without a primary key\r\n\r\nMigration\r\n\r\n  create_table :assemblies_parts, id: false do |t|\r\n    t.integer :assembly_id\r\n    t.integer :part_id\r\n\r\n### Controlling Association Scope\r\n\r\nIf there is more than one module being applied, by default the association will not work\r\n\r\nThis will work:\r\n\r\n  module Business\r\n    class Supplier\r\n      has_one :account\r\n\r\n    class Account\r\n      belongs_to :supplier\r\n\r\nThis will not:\r\n\r\n  module Business\r\n    class Supplier\r\n      has_one :account\r\n\r\n  module Billing\r\n    class Account\r\n      belongs_to :supplier\r\n\r\nUnless the class is specified\r\n\r\n  module Business\r\n    class Supplier\r\n      has_one :account,\r\n        class_name: "MyApplication::Billing::Account"\r\n\r\n  module Billing\r\n    class Account\r\n      belongs_to :supplier,\r\n        class_name: "MyApplication::Business::Supplier"\r\n\r\n### Bi-Directional Associations\r\n\r\nAssociations are not automatically refereshed from changes to the other. You can specify this with `inverse_of`:\r\n\r\n  Customer\r\n    has_many :orders, inverse_of: :customer\r\n\r\n  Order\r\n    belongs_to :customer, inverse_of: :orders\r\n\r\nThere are limitations to this:\r\n\r\n* it does not work with :through associations\r\n* it does not work with :polymorphic associations\r\n* it does not work with :as associations\r\n* For belongs_to associations, has_many inverse is ignored\r\n\r\n## Detailed Association Reference\r\n\r\n### belongs_to Association Reference\r\n\r\nWhen you declare a `belongs_to` association, you get 4 methods\r\n\r\n* association(force_reload = false)\r\n* association=(associate)\r\n* build_association(attributes = {})\r\n* create_association(attributes = {})\r\n\r\nFor example\r\n\r\nModel\r\n\r\n  class Order\r\n    belongs_to :customer\r\n\r\nMethods\r\n\r\n  customer\r\n  # @customer = @order.customer\r\n  customer=\r\n  # @order.customer = @customer\r\n  build_customer\r\n  # @customer = @order.build_customer(customer_number: 123, customer_name: 'John Doe')\r\n  create_customer\r\n  # @customer = @order.create_customer(customer_number: 123, customer_name: 'John Doe')\r\n\r\n#### Customizing\r\n\r\n* :autosave\r\n* :class_name\r\n* :counter_cache\r\n* :dependent\r\n* :foreign_key\r\n* :inverse_of\r\n* :polymorphic\r\n* :touch\r\n* :validate\r\n\r\nExample:\r\n\r\n  class Order\r\n    belongs_to :customer, dependent: :destroy, counter_cache: true\r\n\r\n`:autosave`\r\n: If set to `true`, Rails will save loaded and destroy members that are marked for destruction when you save the parent\r\n`:class_name`\r\n: If name of the model cannot be derived from the association name. Example:\r\n\r\n    Order\r\n      belongs_to :customer, class_name: "Patron"\r\n\r\n`:counter_cache`\r\n: Used to find the number of belong objects more efficient. Avoids a database `COUNT()` query. *NOTE:* Although specified in the `belongs_to` model, a column must be added to the associated model.\r\n\r\n    Order\r\n      belongs_to :customer, counter_cache: true\r\n\r\n`:dependent`\r\n: If set to `:destroy`, then deleting this object will destroy the associated object. The option `:delete` will delete the associated object without calling it's destroy method. `:restrict` will prevent the object from being destroyed if there are any associated objects.\r\n`:foreign_key`\r\n: Let's you set the name of the foreign key directly.\r\n\r\n    Order\r\n      belongs_to :customer, class_name: "Patron", foreign_key: "patron_id"\r\n\r\n`:inverse_of`\r\n: Specifies the inverse  of the association. This can prevent associated tables from getting out of sync.\r\n\r\n    Customer\r\n      has_many :orders, inverse_of: :customer\r\n\r\n    Order\r\n      belongs_to :customer, inverse_of: :orders\r\n\r\n`:polymorphic`\r\n: Specifies polymorphic association\r\n`:touch`\r\n: If set to `true`, then updated_at or updated_on timestamps will be set whenver the object is saved or destroyed. In the following example, an update to order will update the associated customer timestamp:\r\n\r\n    Order\r\n      belongs_to :customer, touch: true\r\n\r\n`:validate`\r\n: If set to true, then associated objects will be validated whenever you save this object.\r\n\r\n#### Scope\r\n\r\nYou can customize the query used by belongs_to via a scope block. For example:\r\n\r\n  class Order\r\n    belongs_to :ucstomer, -> { where active: true }, dependent: :destroy\r\n\r\nYou will be able to specify the conditions using standard querying methods\r\n\r\n* where\r\n* includes\r\n* readonly\r\n* select\r\n\r\nwhere\r\n: Specify conditions\r\n\r\n    Order\r\n      belongs_to :customer, -> { where active: true }\r\n\r\nincludes\r\n: specify second-order associataions that should be eager loaded. For example, if you frequently retrieve customers directly from line items:\r\n\r\n    LineItem\r\n      belongs_to :order, -> { includes :customer }\r\n\r\n    Order\r\n      belongs_to :customer\r\n      has_many :line_items\r\n\r\n    Customer\r\n      has_many :orders\r\n\r\nreadonly\r\n: When specified, the associated object will be read-only when retrieved via the association\r\nselect\r\n: Lets you override the SQL SELECT clause. By default, rails selects all columns. If you use this method, you should also set the `:foreign key` option to guarantee correct results.\r\n\r\n### `has_one` customization\r\n\r\n`has_one` supports additional options:\r\n\r\n* :as\r\n* :dependent (additional options)\r\n* :primary_key\r\n* :source\r\n* :source_type\r\n* :through\r\n\r\n`:as`\r\n: Creates a polymorphic association, as described earlier.\r\n`:dependent`\r\n: With `:nullify`, the foreign key will be set to null. `:restrict_with_exception` and `:restrict_with_error` throw the respective flags if there is an associated record.\r\n`:primary_key`\r\n: Rails assumes that the column used is `id`. You can override this.\r\n`:source`\r\n: Specifies the source for a `has_one :through` association.\r\n`:source_type`\r\n: Specifies the association type for a  `has_one :through` association\r\n`:through`\r\n: Specifies a join model.\r\n\r\n### `has_many` customization\r\n\r\nYou gain several new methods through the association\r\n\r\n* collection(force_reload = false)\r\n* collection<<(object, ...)\r\n* collection.delete(object, ...)\r\n* collection.destroy(object, ...)\r\n* collection=objects\r\n* collection_singular_ids\r\n* collection_singluar_ids=ids\r\n* collection.clear\r\n* collection.empty?\r\n* collection.size\r\n* collection.find(...)\r\n* collection.where(...)\r\n* collection.exists?(...)\r\n* collection.build(attributes = {}, ...)\r\n* collection.create(attributes = {})\r\n\r\n`(force_reload = false)`\r\n: returns an array of associated objects. if there are none, it returns an empty array\r\n`<<(object, ...)`\r\n: Adds one or more objects to the collection, setting their foreign keys to the primary key of the calling model.\r\n\r\n    @customer.orders << @order1\r\n\r\n`.delete(object, ...)`\r\n: Removes object from collection by setting foreign key to NULL. Additional, object will be destroyed if they are associated with dependent: :destroy, and delted if they're associated with dependent: :delete_all\r\n`.destroy(object, ...)`\r\n: Removes object from collection. Destroys them regardless of the `:dependent` options.\r\n`=objects`\r\n: Makes a collection containing only supplied objects, adding and deleting as appropriate.\r\n`_singular_ids`\r\n: returns array of the ids of the objects in the collection\r\n\r\n    @order_ids = @customer.order_ids\r\n\r\n`_singular_ids=ids`\r\n: Makes the collection contain only objects identified by the supplied primary keys, adding and deleting as appropriate.\r\n`.clear`\r\n: Removes every object from the collection. destroys those set to `dependent: :destroy` and sets other foreign keys to nulll.\r\n`.empty?`\r\n: returns true if associated objects are not found.\r\n`.size`\r\n: Returns a count of objects in collection.\r\n`.find(...)`\r\n: Find objects based on id.\r\n`.where(...)`\r\n: Find objects based on conditions supplied.\r\n\r\n    @open_orders = @customer.orders.where(open: true) # No Query Yet\r\n    @open_order = @open_orders.first # Now the database will be queried\r\n\r\n`.exists?(...)`\r\n: Checks whether an object meeting the supplied conditions exists.\r\n`.build(attributes = {}, ...)`\r\n: Returns one or more new objects built with the attributes passed. Not saved yet.\r\n\r\n    @order = @customer.orders.build(order_date: Time.now, order_number: "A12345")\r\n\r\n`.create(attributes = {}, ...)`\r\n: Returns and saves.\r\n\r\n#### Querying Methods\r\n\r\n* where\r\n* extending\r\n* group\r\n* includes\r\n* limit\r\n* offset\r\n* order\r\n* readonly\r\n* select\r\n* distinct\r\n\r\nwhere\r\n: Specify conditions\r\n\r\n    class Customer\r\n      has_many :confirmed_orders, -> { where "confirmed = 1" }, class_name: "Order"\r\n      # also { where confirmed: true }\r\n\r\nextending\r\n: Specifies a named module to extend the association proxy.\r\ngroup\r\n: Uses a GROUP BY clause with a supplied attribute name\r\n\r\n    class Customer\r\n      has_many :line_items, -> { group 'orders.id' }, through: :orders\r\n\r\nincludes\r\n: Specify second-order associations that should be eager-loaded.\r\nlimit\r\n: restrict the number of objects that will be fetched.\r\n\r\n    class Customer\r\n      has_many :recent_orders, -> { order('order_date desc').limit(100) }, class_name: "Order"\r\n\r\noffset\r\n: Offset the start of objects queried.\r\norder\r\n: sort order for the query\r\nreadonly\r\n: associated objects will be read-only\r\nselect\r\n: specify SQL SELECT clause\r\ndistinct\r\n: Keep the collection free of duplicates. This will not prevent duplicates from being saved in the database, only returned by the collection.\r\n\r\n    Person\r\n      has_many :readings\r\n      has_many :posts, -> { distinct }, through: :readings\r\n\r\n### `has_and_belongs_to_many` associataion\r\n\r\nThe same `has_many` options apply. In addtion, columns within the join table are also added as attributes. Particular methods that create or delete objects will create or delete join table objects as well.\r\n\r\n`:association_foreign_key`\r\n: Rails assumes that the column in the join table used to hold the foreign key is the name of the other model. You can specify this differently:\r\n\r\n    class User\r\n      has_and_belongs_to_many :friends,\r\n        class_name: "User",\r\n        foreign_key: "this_user_id",\r\n        association_foreign_key: "other_user_id"\r\n\r\n\r\n### Association Callbacks\r\n\r\n* before_add\r\n* after_add\r\n* before_remove\r\n* after_remove\r\n\r\nThese are used to perform actions during events of the collection\r\n    \r\n  class Customer\r\n    has_many :orders, before_add: :check_credit_limit\r\n\r\n    def check_credit_limit(order)\r\n\r\n    end\r\n\r\n### Association Extensions\r\n\r\nYou can extend objects through anonymous modules, adding new finders, creators or other methods.\r\n\r\n  class Customer\r\n    has_many :orders do\r\n      def find_by_order_prefix(order_number)\r\n        find_by_region_id(order_number[0..2])\r\n      end\r\n    end\r\n\r\nIf you have an extension that should be shared by many associations, you can use a named extension module.\r\n\r\n  module FindRecentExtension\r\n    def find_recent\r\n      where("created_at > ?", 5.days.ago)\r\n    end\r\n  end\r\n\r\n  class Customer\r\n    has_many :orders, -> { extending FindRecentExtension }\r\n\r\n  class Supplier\r\n    has_many :deliveries, -> { extending FindRecentExtension }\r\n	3	2015-03-31 21:14:39.195835	2015-03-31 21:14:39.195835
9	Admin From Scratch - Part 1	admin-from-scratch-part-1	## Part 1\r\n\r\nIt looks like this will follow TDD. Start with an adamin spec. This assumes that authentication and application scaffolding is already in place.\r\n\r\n  # spec/requests/admin_spec.rb\r\n\r\n  it "accesses the dashboard" do\r\n    User.create(\r\n      email: 'user@example.com',\r\n      password: 'secret',\r\n      password_confirmation: 'secret'\r\n    )\r\n\r\n    visit root_path\r\n    click_link 'Sign In'\r\n    fill_in 'Email', with: 'user@example.com'\r\n    fill_in 'Password', with: 'secret'\r\n    click_ubtton 'Sign In'\r\n\r\n    current_path.should eq admin_dashboard_path\r\n    within 'h1' do\r\n      page.should have_content 'Administration'\r\n    end\r\n\r\n    page.should have_content 'Manage Users'\r\n    page.should have_content 'Manage Articles'\r\n  end\r\n\r\nConfigure a route to go to the dashboard\r\n\r\n  # config/routes.rb\r\n\r\n  namespace :admin do\r\n    get '', to: 'dashboard#index', as: '/'\r\n  end\r\n\r\nAn error will pop up in the tests, regarding the route. You'll need to tell the `sessions_controller` to go to this admin path on login\r\n\r\n  # app/controllers/sessions_controller.rb\r\n\r\n  def create\r\n    user = User.find_by_email(params[:email])\r\n    if user && user.authenticate(params[:password])\r\n      session[:user_id] = user.id\r\n      redirect_to admin_url, notice: 'Logged in!'\r\n    else\r\n      flash.now.alert = 'Email or password is invalid.'\r\n    end\r\n  end\r\n\r\nA new error pops up because there's no dashboard controller.\r\n\r\n  rails generate controller admin/dashboard index\r\n\r\nThe next error is based on view elements that will need to be put in.\r\n\r\n  # app/views/dashboard/index\r\n\r\n  <h1>Administration</h1>\r\n\r\n  <ul>\r\n    <li><%= link_to 'Manage Users' %></li>\r\n    <li><%= link_to 'Manage Articles' %></li>\r\n  </ul>\r\n\r\nNow set up a spec to test whether users have authenticated\r\n\r\n  # spec/requests/admin_spec.rb\r\n\r\n  it "is denied access when not logged in" do\r\n\r\n    visit admin_path\r\n\r\n    current_path.should eq login_path\r\n    within 'h1' do\r\n      page.should have_content 'Please Log In'\r\n    end\r\n\r\n  end\r\n\r\nThen you'll add an action to the Dashboard Controller to make it pass.\r\n\r\n  class Admin::DashboardController < ApplicationController\r\n\r\n    before_filter :authorize\r\n\r\n    def index\r\n    end\r\n\r\n  end\r\n\r\nThis will cause the generated controller spec to fail, because a logged-in user isn't specified.\r\n\r\n  # spec/controllers/admin/dashboard_controller_spec.rb\r\n\r\n  require 'spec_helper'\r\n\r\n  describe Admin::DashboardController do\r\n    \r\n    describe 'user access' do\r\n      describe "Get index'" do\r\n        it "returns http success" do\r\n          user = User.create(\r\n            email: 'admin@example.com',\r\n            password: 'secret',\r\n            password_confirmation: 'secret'\r\n          )\r\n          session[:user_id] = user\r\n\r\n          get 'index'\r\n          response.shouuld be_success\r\n        end\r\n      end\r\n    end\r\n\r\n    describe 'non-user access' do\r\n      describe "GET 'index'" do\r\n        it "redirects to the login form" do\r\n          get 'index'\r\n          response.should redirect_to login_url\r\n        end\r\n      end\r\n    end\r\n\r\n  end\r\n\r\n## Part 2\r\n\r\nSpec refactoring using Factory Girl\r\n\r\n  FactoryGirl.define do\r\n    factory :user do\r\n      sequence(:email) { |n| "johndoe#{n}@example.com" }\r\n      password 'secret'\r\n    end\r\n  end\r\n\r\nMacros to simulate user log in at controller and request level\r\n\r\n  # spec/support/login_macros.rb\r\n\r\n  module LoginMacros\r\n    def set_user_session(user)\r\n      session[:user_id] = user.id\r\n    end\r\n\r\n    def sign_in(user)\r\n      visit root_path\r\n      click_link 'Log In'\r\n      fill_in 'Email', with: user.email\r\n      fill_in 'Password', with: user.password\r\n      click_button 'Log In'\r\n    end\r\n  end\r\n\r\nThe new admin spec\r\n\r\n  # spec/requests/admin_spec.rb\r\n\r\n  describe 'article management' do\r\n    before :each do\r\n      user = FactoryGirl.create(:user)\r\n      sign_in user\r\n    end\r\n\r\n    it "adds an article" do\r\n      click_link 'Manage Articles'\r\n      current_path.should eq admin_articles_path\r\n\r\n      expect {\r\n        click_link 'New Article'\r\n        fill_in 'Name', with: 'My favorite web framework'\r\n        fill_in 'Body', with: 'Rails is great!'\r\n        click_button 'Create Article'\r\n      }.to change(Article, :count).by(1)\r\n\r\n      current_path.should eq admin_articles_path\r\n      page.should have_content 'My favorite web framework'\r\n    end\r\n  end\r\n\r\nThis will fail, we need to namespace a resourced route for articles\r\n\r\n  # config/routes.rb\r\n\r\n  namespace :admin do\r\n    get '', to: 'dashboard#index', as: '/'\r\n    resources :articles\r\n  end\r\n\r\nNow we can link the `Manage Articles` link in the view to somewhere\r\n\r\n  <li><%= link_to 'Manage Articles', admin_articles_path %></li>\r\n\r\nThen move the controller into the admin subdirectory\r\n\r\n  mv app/controllers/articles_controller.rb app/controllers/admin/\r\n  mv app/views/articles/ app/views/admin/articles\r\n\r\nThen the class needs to include Admin\r\n\r\n  class Admin::ArticlesController < ApplicationController\r\n\r\n  end\r\n\r\nThen recreate the public facing articles_controller\r\n\r\n  rails g controller articles index\r\n\r\n  # app/controller/articles_controller.rb\r\n\r\n  class ArticlesController < ApplicationController\r\n    def index\r\n      @articles = Article.all\r\n    end\r\n  end\r\n\r\nAnd a view\r\n\r\n  # app/views/articles/index.html.haml\r\n\r\n  %h1 Articles\r\n\r\n  - @articles.each do |article|\r\n    %div\r\n      %h2= article.name\r\n      = simple_format article.body\r\n\r\nLinks will need to be updated as well.\r\n\r\n  # app/views/admin/articles/index.html.erb\r\n\r\n  = link_to 'New Article', new_admin_article_path\r\n\r\n  # app/views/admin/articles/_form.html.erb\r\n\r\n  = form_for([:admin,@article]) do |f|\r\n\r\nUpdate the redirect\r\n\r\n  # app/controllers/admin/articles_controller\r\n\r\n  def create\r\n\r\n    #...\r\n\r\n    location: [:admin,@article]\r\n\r\nCheck authentication in the backend\r\n\r\n  # app/controllers/admin/articles_controller.rb\r\n\r\n  before_action :authorize\r\n\r\nRemove unused routes\r\n\r\n  # config/routes.rb\r\n\r\n  resources :articles, only: [:index]\r\n\r\n## Part 3\r\n\r\nAdd an interface for new users\r\n\r\n  describe 'user management' do\r\n    before :each do\r\n      user = FactoryGirl.create(:user)\r\n      sign_in user\r\n    end\r\n\r\n    it "adds a user" do\r\n      click_link 'Manage Users'\r\n      current_path.should eq admin_users_path\r\n\r\n      expect  {\r\n        click_link 'New User'\r\n        fill_in 'Email', with: 'aaron@everydayrails.com'\r\n        fill_in 'Password', with: 'secret'\r\n        fill_in 'Password Confirmation', with: 'secret'\r\n        click_button 'Create User'\r\n      }.to change(User, :count).by(1)\r\n\r\n      current_path.should eq admin_users_path\r\n      page.should have_content 'aaron@everydayrails.com'\r\n    end\r\n  end\r\n\r\nAdd the users resource to the admin namespace\r\n\r\n  namespace :admin do\r\n    get '', to: 'dashboard#index', as: '/'\r\n    resources :articles\r\n    resources :users\r\n  end\r\n\r\nAdd the link in the dashboard\r\n\r\n  # app/views/admin/dashboard/index.html.erb\r\n\r\n  = link_to 'Manage Users', admin_users_path\r\n\r\nGenerate the admin users from scratch\r\n\r\n  rails generate controller admin/users index\r\n\r\nThe view\r\n\r\n  # app/views/admin/users/index\r\n\r\n  %h1 Listing Users\r\n\r\n  = link_to 'New User', new_admin_user_path\r\n\r\nA new method in the controller\r\n\r\n  def index\r\n    @users = User.all\r\n  end\r\n\r\n  def new\r\n    @user = User.new\r\n  end\r\n\r\n  def create\r\n    @user = User.new(params[:user])\r\n\r\n    if @user.save\r\n      redirect_to admin_users_url, notice: 'User was successfully created.'\r\n    else\r\n      render action: 'new'\r\n    end\r\n  end\r\n\r\nCreate a form for creating new users\r\n\r\n  # app/views/admin/users/new.html.erb\r\n\r\n  %h1 new user\r\n\r\n  = form_for([:admin,@user]) do |f|\r\n\r\nAnd the index template\r\n\r\n  # app/views/admin/users/index\r\n\r\n    - @users.each do |user|\r\n\r\n    = link_to 'New user', new_admin_user_path\r\n	3	2015-03-31 21:14:39.249211	2015-03-31 21:14:39.249211
10	Admin from Scratch - No Tests	admin-from-scratch-no-tests	Configure a route to go to the dashboard\r\n\r\n    # config/routes.rb\r\n\r\n    namespace :admin do\r\n      get '', to: 'dashboard#index', as: '/'\r\n    end\r\n\r\n    # app/controllers/sessions_controller.rb\r\n\r\n    def create\r\n      user = User.find_by_email(params[:email])\r\n      if user && user.authenticate(params[:password])\r\n        session[:user_id] = user.id\r\n        redirect_to admin_url, notice: 'Logged in!'\r\n      else\r\n        flash.now.alert = 'Email or password is invalid.'\r\n      end\r\n    end\r\n\r\n    rails generate controller admin/dashboard index\r\n\r\n    # app/views/dashboard/index\r\n\r\n    <h1>Administration</h1>\r\n\r\n    <ul>\r\n      <li><%= link_to 'Manage Users' %></li>\r\n      <li><%= link_to 'Manage Articles' %></li>\r\n    </ul>\r\n\r\n    class Admin::DashboardController < ApplicationController\r\n\r\n      before_filter :authorize\r\n\r\n      def index\r\n      end\r\n\r\n    end\r\n\r\n    # config/routes.rb\r\n\r\n    namespace :admin do\r\n      get '', to: 'dashboard#index', as: '/'\r\n      resources :articles\r\n    end\r\n\r\n    <li><%= link_to 'Manage Articles', admin_articles_path %></li>\r\n\r\nThen move the controller into the admin subdirectory\r\n\r\n    mv app/controllers/articles_controller.rb app/controllers/admin/\r\n    mv app/views/articles/ app/views/admin/articles\r\n\r\nThen the class needs to include Admin\r\n\r\n    class Admin::ArticlesController < ApplicationController\r\n\r\n    end\r\n\r\nThen recreate the public facing articles_controller\r\n\r\n    rails g controller articles index\r\n\r\n    # app/controller/articles_controller.rb\r\n\r\n    class ArticlesController < ApplicationController\r\n      def index\r\n        @articles = Article.all\r\n      end\r\n    end\r\n\r\nAnd a view\r\n\r\n    # app/views/articles/index.html.haml\r\n\r\n    %h1 Articles\r\n\r\n    - @articles.each do |article|\r\n      %div\r\n        %h2= article.name\r\n        = simple_format article.body\r\n\r\nLinks will need to be updated as well.\r\n\r\n    # app/views/admin/articles/index.html.erb\r\n\r\n    = link_to 'New Article', new_admin_article_path\r\n\r\n    # app/views/admin/articles/_form.html.erb\r\n\r\n    = form_for([:admin,@article]) do |f|\r\n\r\nUpdate the redirect\r\n\r\n    # app/controllers/admin/articles_controller\r\n\r\n    def create\r\n\r\n      #...\r\n\r\n      location: [:admin,@article]\r\n\r\nCheck authentication in the backend\r\n\r\n    # app/controllers/admin/articles_controller.rb\r\n\r\n    before_action :authorize\r\n\r\nRemove unused routes\r\n\r\n    # config/routes.rb\r\n\r\n    resources :articles, only: [:index]\r\n\r\nAdd the users resource to the admin namespace\r\n\r\n    namespace :admin do\r\n      get '', to: 'dashboard#index', as: '/'\r\n      resources :articles\r\n      resources :users\r\n    end\r\n\r\nAdd the link in the dashboard\r\n\r\n    # app/views/admin/dashboard/index.html.erb\r\n\r\n    = link_to 'Manage Users', admin_users_path\r\n\r\nGenerate the admin users from scratch\r\n\r\n    rails generate controller admin/users index\r\n\r\nThe view\r\n\r\n    # app/views/admin/users/index\r\n\r\n    %h1 Listing Users\r\n\r\n    = link_to 'New User', new_admin_user_path\r\n\r\nA new method in the controller\r\n\r\n    def index\r\n      @users = User.all\r\n    end\r\n\r\n    def new\r\n      @user = User.new\r\n    end\r\n\r\n    def create\r\n      @user = User.new(params[:user])\r\n\r\n      if @user.save\r\n        redirect_to admin_users_url, notice: 'User was successfully created.'\r\n      else\r\n        render action: 'new'\r\n      end\r\n    end\r\n\r\nCreate a form for creating new users\r\n\r\n    # app/views/admin/users/new.html.erb\r\n\r\n    %h1 new user\r\n\r\n    = form_for([:admin,@user]) do |f|\r\n\r\nAnd the index template\r\n\r\n    # app/views/admin/users/index\r\n\r\n      - @users.each do |user|\r\n\r\n      = link_to 'New user', new_admin_user_path	3	2015-03-31 21:14:39.300315	2015-03-31 21:14:39.300315
17	MongoID Notes	mongoid-notes	    gem "mongoid", github: "mongoid/mongoid"\r\n\r\n    rails new mongodemo --skip-active-record\r\n\r\n    rails g mongoid:config\r\n\r\n    rails g scaffold product name price:big_decimal\r\n\r\n    rails g model review content\r\n\r\nSet strong parameters and validation\r\n\r\n    Product.where(:price.lte => 40).first\r\n\r\n    Product.lte(price: 40).first\r\n\r\nEmbedded records\r\n\r\n    class Review\r\n      embedded_in :product\r\n\r\n    class Product\r\n      embeds_many :reviews\r\n\r\n    p = Product.first\r\n    p.reviews.create! content: "Great Game!"\r\n\r\nAlso include in your model:\r\n\r\n    include Mongoid::Timestamps\r\n    include Mongoid::Paranoia\r\n    include Mongoid::Versioning\r\n\r\nOverride to_param to change url\r\n\r\n    def to_param\r\n\r\n    end\r\n\r\nOr change id\r\n\r\n    field :_id, type: String, default: ->{ name.to_s.parameterize }\r\n\r\nIn this case, it's necessary to add the id at the time you create the record.\r\n	3	2015-03-31 21:14:39.674597	2015-03-31 21:14:39.674597
68	Working with Strong Parameters	working-with-strong-parameters	You can permit arbitrary parameters with tap:\r\n\r\n    def auction_params\r\n      params.require(:auction).permit(:item_id, :quantity, :minimum, :buyout, :date_posted, :sold, :ended, :final).tap do |whitelisted|\r\n        whitelisted[:item] = Item.find_by(name: params[:auction][:item])\r\n      end\r\n    end\r\n	3	2015-03-31 21:14:42.305054	2015-03-31 21:14:42.305054
11	Capistrano with AWS	capistrano-with-aws	## Set up a git repo\r\n\r\nLocal:\r\n\r\n    ssh-add path/to/privateEC2key.pem\r\n\r\nRemote:\r\n\r\n    ssh username@hostname.com \r\n    mkdir the_project.git \r\n    cd the_project.git \r\n    git init --bare\r\n\r\nLocal:\r\n\r\n    cd the_project \r\n    git init git add . \r\n    git commit -m "Initial git commit message" \r\n    git remote add origin ubuntu@54.244.117.128:/var/www/git/cash.git\r\n    # I didn't need to do this: git config --global remote.origin.receivepack "git receive-pack" \r\n    git push origin master\r\n\r\nYou can now: git clone username@hostname.com:the_project.git\r\n\r\n*NOTE:* git remote set-url origin ubuntu@54.244.117.128:/var/www/git/cash.git\r\n\r\n## Deploying\r\n\r\ndeploy.rb\r\n\r\n    require "bundler/capistrano"\r\n    require 'capistrano/ext/multistage'\r\n    set :bundle_without,  [:development, :test]\r\n\r\n    set :stages, ["staging", "production"]\r\n    set :default_stage, "staging"\r\n\r\n    set :application, "shauntm"\r\n    set :repository,  "ubuntu@54.244.117.128:/var/www/git/shauntm.git"\r\n    set :user, "ubuntu"\r\n    set :use_sudo, false\r\n\r\n    set :ssh_options, { :forward_agent => true }\r\n\r\n    set :scm, :git\r\n\r\n    server "54.244.117.128", :app, :web, :db, primary: true\r\n\r\n    # if you want to clean up old releases on each deploy uncomment this:\r\n    # after "deploy:restart", "deploy:cleanup"\r\n\r\n    # if you're still using the script/reaper helper you will need\r\n    # these http://github.com/rails/irs_process_scripts\r\n\r\n    # If you are using Passenger mod_rails uncomment this:\r\n    namespace :deploy do\r\n      desc "Symlink shared configs and folders on each release."\r\n      task :symlink_shared do\r\n        run "ln -nfs #{shared_path}/config/database.yml #{latest_release}/config/database.yml"\r\n        run "ln -nfs #{shared_path}/assets #{latest_release}/public/assets"\r\n      end\r\n\r\n      task :start do ; end\r\n      task :stop do ; end\r\n      task :restart, :roles => :app, :except => { :no_release => true } do\r\n        run "#{try_sudo} touch #{File.join(current_path,'tmp','restart.txt')}"\r\n      end\r\n    end\r\n\r\n    before "deploy:assets:precompile", "deploy:symlink_shared"\r\n\r\ndeploy/staging.rb\r\n\r\n    set :deploy_to, "/var/www/staging/shauntm"\r\n    set :branch, "master"\r\n\r\ndeploy/production.rb\r\n\r\n    set :deploy_to, "/var/www/rails/shauntm"\r\n    set :branch, "production"\r\n\r\nFor staging:\r\n\r\n    cap deploy\r\n\r\nFor production:\r\n\r\n    cap production deploy\r\n\r\n## Add git repository to trusted networks\r\n\r\n* ssh to this machine\r\n* create a temporary directory\r\n* execute "git clone user@this_machine:git/your_app.git\r\n* accept the key\r\n	3	2015-03-31 21:14:39.351283	2015-03-31 21:14:39.351283
12	Creating a search form	creating-a-search-form	## Define a route\r\n\r\n    get '/search', to: 'questions#search'\r\n\r\n## Add to application layout\r\n\r\n    <%= form_tag(search_path, method: 'get') do %>\r\n      <%= text_field_tag :keyword, 'Search', size: '20', id: 'keyword' %>\r\n      <%= submit_tag "Search" %>\r\n    <% end %>\r\n\r\n## In the model\r\n\r\n    def self.search(params)\r\n      where("body LIKE ?", "%#{params[:keyword]}%").paginate(page: params[:page], order: 'created_at DESC', per_page: 3)\r\n    end\r\n\r\n## In the controller\r\n\r\n    def search\r\n      @questions = Question.search(params)\r\n    end\r\n\r\n## Create a view to display results\r\n\r\nsearch.html.erb:\r\n\r\n    <% provide :title, 'Search Results' %>\r\n    <h1>Search Results</h1>\r\n\r\n    <% if @questions.any? %>\r\n      <ul>\r\n        <%= render @questions %>\r\n      </ul>\r\n      <%= will_paginate %>\r\n    <% else %>\r\n      <p>Nothing found, please try a different search.</p>\r\n    <% end>\r\n	3	2015-03-31 21:14:39.4052	2015-03-31 21:14:39.4052
13	Tagging	tagging	## With Acts as Taggable\r\n\r\n### Gemfile\r\n\r\n    gem 'acts-as-taggable-on'\r\n\r\n### Generator\r\n\r\n    rails g acts_as_taggable_on:migration\r\n\r\n    rake db:migrate\r\n\r\n### Model\r\n\r\nArticle Model\r\n\r\n    class Article\r\n      attr_accessible :content, :name, :tag_list\r\n      acts_as_taggable\r\n    end\r\n\r\n### View\r\n\r\nArticle Form\r\n\r\n    .field\r\n      f.label :tag_list, "Tags (separated by commas)"\r\n      f.text_field :tag_list\r\n\r\nArticles Index (NOTE: This may be too complex for the view)\r\n\r\n    %p\r\n      Tags:\r\n      = raw article.tag_list.map { |t| link_to t, tag_path(t) }.join(', ')\r\n\r\n### Routes\r\n\r\n    get 'tags/:tag', to: 'articles#index'\r\n\r\n### Controller\r\n\r\n    def index\r\n      if params[:tag]\r\n        @articles = Article.tagged_with(params[:tag])\r\n      else\r\n        @articles = Article.all\r\n      end\r\n    end\r\n\r\n### Tag cloud (to index)\r\n\r\n    #tag_cloud\r\n      tag_cloud Article.tag_counts, %w[small medium large] do |tag, css_class|\r\n        link_to tag.name, tag_path(tag.name), class: css_class\r\n\r\n### Css\r\n\r\n    #tag_cloud {\r\n      .small {}\r\n      .medium {}\r\n      .large {}\r\n    }\r\n\r\n## From scratch\r\n\r\n### To rollback:\r\n\r\n    rake db:rollback\r\n\r\n    rails d acts_as_taggable_on:migration\r\n\r\n### Generators\r\n\r\n    rails g model tag name\r\n\r\n    rails g model tagging tag:belongs_to article:belongs_to\r\n\r\n    rake db:migrate\r\n\r\n### Model\r\n\r\n    class Tag < ActiveRecord::Base\r\n      attr_accessible :name\r\n      has_many :taggings\r\n      has_many :articles, through: :taggings\r\n    end\r\n\r\n    class Article < ActiveRecord::Base\r\n      attr_accessible :content, :name, :tag_list\r\n      has_many :taggings\r\n      has_many :tags, through: taggings\r\n\r\n      def self.tagged_with(name)\r\n        Tag.find_by_name!(name).articles\r\n      end\r\n\r\n      def self.tag_counts\r\n        Tag.select("tags.*, count(taggings.tag_id) as count").\r\n          joins(:taggings).group("taggings.tag_id")\r\n      end\r\n\r\n      def tag_list\r\n        tags.map(&:name).join(", ")\r\n      end\r\n\r\n      def tag_list=(names)\r\n        self.tags = names.split(",").map do |n|\r\n          Tag.where(name: n.strip).first_or_create!\r\n        end\r\n      end\r\n    end\r\n\r\n### Index View\r\n\r\n    Tags:\r\n    = raw article.tags.map(&:name).map { |t| link_to t, tag_path(t) }.join(', ')\r\n\r\n### Application Helper\r\n\r\n    def tag_cloud(tags, classes)\r\n      max = tags.sort_by(&:count).last\r\n      tags.each do |tag|\r\n        index = tag.count.to_f / max.count * (classes.size - 1)\r\n        yield(tag, classes[index.round])\r\n      end\r\n    end\r\n	3	2015-03-31 21:14:39.46727	2015-03-31 21:14:39.46727
14	Customize Rails Generators	customize-rails-generators	Several options are availabe to the new command\r\n\r\n    new blog -d postgresql --skip-test-unit --skip-sprockets\r\n\r\nThese can be put into a `railsrc` file\r\n\r\n    ~/.railsrc\r\n\r\nCreate a simple template file called `app_template.rb`\r\n\r\n    remove_file "README.rdoc"\r\n    create_file "README.md", "TODO"\r\n\r\n    gem "rspec-rails", group: [:test, :development]\r\n    run "bundle install"\r\n\r\n    generate "rspec:install"\r\n\r\n    if yes? "Do you want to generate a root controller?"\r\n      name = ask ("What should it be called?").underscore\r\n      generate :controller, "#{name} index"\r\n      route "root to: '#{name}\\#index'""\r\n    end\r\n\r\n    git :init\r\n    append_file ".gitignore", "config/database.yml"\r\n    run "cp config/database.yml config/database-example.yml"\r\n    git add: ".", commit: "-m 'initial commit'"\r\n\r\nThen run\r\n  \r\n    rails new blog -m app_template.rb\r\n\r\nYou can also create a builder `app_builder.rb`\r\n\r\n    class AppBuilder < Rails::AppBuilder\r\n      def readme\r\n        create_file "README.md", "TODO"\r\n      end\r\n\r\n      def test\r\n        @generator.gem "rspec-rails", group: [:test, :development]\r\n        run "bundle install"\r\n        generate "rspec:install"\r\n      end\r\n\r\n      def leftovers\r\n        if yes? "Do you want to generate a root controller?"\r\n          name = ask ("What should it be called?").underscore\r\n          generate :controller, "#{name} index"\r\n          route "root to: '#{name}\\#index'""\r\n        end\r\n\r\n        git :init\r\n        append_file ".gitignore", "config/database.yml"\r\n        run "cp config/database.yml config/database-example.yml"\r\n        git add: ".", commit: "-m 'initial commit'"\r\n      end\r\n    end\r\n\r\nThen run\r\n\r\n    rails new blog -b app_builder.rb	3	2015-03-31 21:14:39.517977	2015-03-31 21:14:39.517977
15	RailsCasts - 209 - Devise	railscasts-209-devise	Include the devise gem in your bundle, then run the generator to install\r\n\r\n    rails g devise:install\r\n\r\nFollow the instructions provided in the install comments. Be sure to set the mailer host\r\nin production\r\n\r\n    config.action_mailer.default_url_options = { host: '[host_name]' }\r\n\r\nAlso configure the mail sender in the devise intializer.\r\n\r\nThen you can either create a new model or add devise to an existing model with:\r\n\r\n    rails g devise user\r\n\r\nIf you change any of the modules, you may need to update the migration file as well.\r\nThen run `rake db:migrate` to run the migration\r\n\r\nDevise provides several helper methods for authentication\r\n\r\n    # application.html.haml\r\n\r\n    - if user_signed_in?\r\n      Logged in as\r\n      = current_user.email\r\n      = link_to 'Edit Profile', edit_user_registration_path\r\n      = link_to 'Logout', destroy_user_session_path, method: :delete\r\n    - else\r\n      = link_to 'Sign up', new_user_registration_path\r\n      = link_to 'Login', new_user_session_path\r\n\r\n    # articles_controller.rb\r\n\r\n    before_filter :authenticate_user!, except: [:index, :show]\r\n\r\nYou can configure the wording for all the devise messages within `config/locales/devise.en.yml`\r\n\r\nYou can generate the views for customization with\r\n\r\n    rails g devise:views\r\n\r\nTo customize the routes, you can customize `devise_for`\r\n\r\n    devise_for :users, path_names: { sign_in: 'login', sign_out: 'logout' }\r\n\r\nThe *rdocs* have more information on the `devise_for` call and available options.\r\n\r\nYou can use a different field for validation. Just make sure the field is available\r\nin the database and then change the appropriate lines of the initializer\r\n\r\n    config.authentication_keys = [ :username ]\r\n    config.case_insensitive_keys = [ :username ]\r\n    config.strip_whitespace_keys = [ :username ]\r\n	3	2015-03-31 21:14:39.570858	2015-03-31 21:14:39.570858
16	Everyday Rails - Rspec	everyday-rails-rspec	## Chapter 2 - Configuration\r\n\r\n    group :development, :test do\r\n      gem 'rspec-rails', '~> 2.14.0'\r\n      gem 'factory_girl_rails', "~> 4.2.1"\r\n    end\r\n\r\n    group :test do\r\n      gem "faker", "~> 1.1.2"\r\n      gem 'capybara', '>= 2.1.0'\r\n      gem "database_cleaner", "~> 1.0.1"\r\n      gem "launchy", "~> 2.3.0"\r\n    end\r\n\r\nInstall rspec\r\n\r\n    rails generate rspec:install\r\n\r\nAdd this line to `.rspec`\r\n\r\n    --format documentation\r\n\r\nEdit the generator in `config/application.rb`\r\n\r\n    config.generators do |g|\r\n      g.stylesheets     false\r\n      g.javascripts     false\r\n      g.helper          false\r\n      g.test_framework :rspec,\r\n        fixtures: true,\r\n        view_specs: false,\r\n        helper_specs: false,\r\n        routing_specs: false,\r\n        controller_specs: true,\r\n        request_specs: false\r\n      g.fixture_replacement :factory_girl, dir: "spec/factories"\r\n    end\r\n\r\nTo make sure your test database matches the development\r\n\r\n    rake db:test:clone\r\n\r\n## Chapter 3 - Model Specs\r\n\r\nA basic model spec:\r\n\r\n    # spec/models/contact_spec.rb\r\n\r\n    require 'spec_helper'\r\n\r\n    describe Contact do\r\n      it "is valid with a first_name, last_name and email"\r\n      it "is invalid without a first_name"\r\n      it "is invalid without a last_name"\r\n      it "is invalid without an email address"\r\n      it "is invalid with a duplicate email address"\r\n      it "returns a contact's full name as a string"\r\n    end\r\n\r\nBasic rspec syntax\r\n\r\n    it "is true when true" do\r\n      expect(true).to be_true\r\n    end\r\n\r\n### Testing validation\r\n\r\n    describe Contact do\r\n      it "is valid with a first_name, last_name and email" do\r\n        contact = Contact.new(\r\n          first_name: 'Aaron',\r\n          last_name: 'Sumner',\r\n          email: 'tester@example.com'\r\n        )\r\n        expect(contact).to be_valid\r\n      end\r\n      it "is invalid without a first_name" do\r\n        expect(Contact.new(first_name: nil)).to have(1).errors_on(:first_name)\r\n      end\r\n      it "is invalid without a last_name" do\r\n        expect(Contact.new(last_name: nil)).to have(1).errors_on(:last_name)\r\n      end\r\n      it "is invalid without an email address" do\r\n        expect(Contact.new(email: nil)).to have(1).errors_on(:email)\r\n      end\r\n      it "is invalid with a duplicate email address" do\r\n        Contact.create(\r\n          first_name: 'Joe', last_name: 'Tester', email: 'tester@example.com'\r\n        )\r\n        contact = Contact.new(\r\n          first_name: 'Jane', last_name: 'Tester', email: 'testeR@eXample.com'\r\n        )\r\n        expect(contact).to have(1).errors_on(:email)\r\n      end\r\n    end\r\n\r\n### Testing instance methods\r\n\r\n    it "returns a contact's full name as a string" do\r\n      contact = Contact.new(\r\n        first_name: 'Aaron',\r\n        last_name: 'Sumner',\r\n        email: 'tester@example.com'\r\n      )\r\n      expect(contact.name).to eq 'Aaron Sumner'\r\n    end\r\n\r\n### Testing class methods and scopes\r\n\r\nmodels/contact.rb\r\n\r\n    def self.by_letter(letter)\r\n      where("last_name LIKE ?", "#{letter}%").order(:last_name)\r\n    end\r\n\r\nspec/models/contact_spec.rb\r\n\r\n    it "returns a sorted array of results that match" do\r\n      smith = Contact.create(first_name: 'John', last_name: 'Smith', email: 'jsmith@example.com')\r\n      jones = Contact.create(first_name: 'Tim', last_name: 'Jones', email: 'tjones@example.com')\r\n      johnson = Contact.create(first_name: 'John', last_name: 'Johnson', email: 'jjohnson@example.com')\r\n    \r\n      expect(Contact.by_letter("J")).to eq [johnson, jones]\r\n    end\r\n\r\n### Context blocks\r\n\r\n    describe "filter last name by letter" do\r\n      before :each do\r\n        @smith = Contact.create(first_name: 'John', last_name: 'Smith',\r\n          home_phone: '867-5309', email: 'jsmith@example.com')\r\n        @jones = Contact.create(first_name: 'Tim', last_name: 'Jones',\r\n          home_phone: '867-5309', email: 'tjones@example.com')\r\n        @johnson = Contact.create(first_name: 'John', last_name: 'Johnson',\r\n          home_phone: '867-5309', email: 'jjohnson@example.com')\r\n      end\r\n\r\n      context "matching letters" do\r\n        it "returns a sorted array of results that match" do\r\n          expect(Contact.by_letter("J")).to eq [@johnson, @jones]\r\n        end\r\n      end\r\n\r\n      context "non-matching letters" do\r\n        it "returns a sorted array of results that match" do\r\n          expect(Contact.by_letter("J")).to_not include @smith\r\n        end\r\n      end\r\n    end\r\n\r\n### Custom validations\r\n\r\n    validate :each_phone_number_must_be_unique, :must_have_at_least_one_phone_number\r\n\r\n    def must_have_at_least_one_phone_number\r\n      if mobile_phone.nil? && home_phone.nil? && work_phone.nil?\r\n        errors.add(:home_phone, "must have at least one phone number")\r\n      end\r\n    end\r\n\r\n    def each_phone_number_must_be_unique\r\n      if !mobile_phone.nil?\r\n        if home_phone == mobile_phone || mobile_phone == work_phone\r\n          errors.add(:mobile_phone, "number already assigned")\r\n        end\r\n      elsif !work_phone.nil?\r\n        if work_phone == mobile_phone || home_phone == work_phone\r\n          errors.add(:work_phone, "number already assigned")\r\n        end\r\n      end\r\n    end\r\n\r\n## Factories\r\n\r\n`spec/factories/contacts.rb`\r\n\r\n    FactoryGirl.define do\r\n      factory :contact do\r\n        first_name { Faker::Name.first_name }\r\n        last_name { Faker::Name.last_name }\r\n        email { Faker::Internet.email }\r\n        home_phone { Faker::PhoneNumber.phone_number }\r\n        work_phone { Faker::PhoneNumber.phone_number }\r\n        mobile_phone { Faker::PhoneNumber.phone_number }\r\n      end\r\n    end\r\n\r\n`spec/spec_helper.rb`\r\n\r\n    RSpec.configure do |config|\r\n\r\n      # Include Factory Girl syntax to simplify calls to factories\r\n      config.include FactoryGirl::Syntax::Methods\r\n\r\nRefactored model spec:\r\n\r\n    require 'spec_helper'\r\n\r\n    describe Contact do\r\n      it "has a valid factory" do\r\n        expect(create(:contact)).to be_valid\r\n      end\r\n\r\n      it "is valid with a first_name, last_name, one phone number and email" do\r\n        expect(build(:contact)).to be_valid\r\n      end\r\n      it "is invalid without a first_name" do\r\n        expect(build(:contact, first_name: nil)).to have(1).errors_on(:first_name)\r\n      end\r\n      it "is invalid without a last_name" do\r\n        expect(build(:contact, last_name: nil)).to have(1).errors_on(:last_name)\r\n      end\r\n      it "is invalid without an email address" do\r\n        expect(build(:contact, email: nil)).to have(1).errors_on(:email)\r\n      end\r\n      it "is invalid with a duplicate email address" do\r\n        FactoryGirl.create(:contact, email: 'alpha@example.com')\r\n        expect(build(:contact, email: 'alpha@example.com')).to have(1).errors_on(:email)\r\n      end\r\n      it "returns a contact's full name as a string" do\r\n        contact = FactoryGirl.build(:contact, first_name: 'Aaron', last_name: 'Sumner')\r\n        expect(contact.name).to eq 'Aaron Sumner'\r\n      end\r\n\r\n      it "does not allow duplicate phone numbers per contact" do\r\n        contact = FactoryGirl.build(:contact,\r\n            home_phone: '608-867-5309', mobile_phone: '608-867-5309')\r\n        expect(contact).to have(1).errors_on(:mobile_phone)\r\n      end\r\n\r\n      it "allows two contacts to share a phone number" do\r\n        contact = FactoryGirl.build(:contact,\r\n            home_phone: '608-867-5309')\r\n        other_contact = FactoryGirl.build(:contact,\r\n            home_phone: '608-867-5309')\r\n\r\n        expect(other_contact).to be_valid\r\n      end\r\n\r\n      describe "filter last name by letter" do\r\n        before :each do\r\n          @smith = FactoryGirl.create(:contact, first_name: 'John', last_name: 'Smith')\r\n          @jones = FactoryGirl.create(:contact, first_name: 'Tim', last_name: 'Jones')\r\n          @johnson = FactoryGirl.create(:contact, first_name: 'John', last_name: 'Johnson')\r\n        end\r\n\r\n        context "matching letters" do\r\n          it "returns a sorted array of results that match" do\r\n            expect(Contact.by_letter("J")).to eq [@johnson, @jones]\r\n          end\r\n        end\r\n\r\n        context "non-matching letters" do\r\n          it "returns a sorted array of results that match" do\r\n            expect(Contact.by_letter("J")).to_not include @smith\r\n          end\r\n        end\r\n      end\r\n    end\r\n\r\nPhone factory (associated to contact)\r\n\r\n    FactoryGirl.define do\r\n      factory :phone do\r\n        association :contact\r\n        phone { '123-555-1234' }\r\n        phone_type 'home'\r\n      end\r\n    end\r\n\r\nYou can create inherited factories, that have some different attributes while maintaining core\r\nattributes you don't have to repeat\r\n\r\n    FactoryGirl.define do\r\n      factory :phone do\r\n        association :contact\r\n        phone { Faker::PhoneNumber.phone_number }\r\n\r\n        factory :home_phone do\r\n          phone_type 'home'\r\n        end\r\n\r\n        factory :work_phone do\r\n          phone_type 'work'\r\n        end\r\n\r\n        factory :mobile_phone do\r\n          phone_type 'mobile'\r\n        end\r\n      end\r\n    end\r\n\r\nThese can be used just like any other factory\r\n\r\n    # spec/model/phone_spec.rb\r\n\r\n    describe Phone do\r\n      it "does not allow duplicate phone numbers per contact" do\r\n        contact = create(:contact)\r\n        home_phone = create(:home_phone, contact: contact, phone: '785-555-1234')\r\n        mobile_phone = build(:mobile_phone, contact: contact, phone: '785-555-1234')\r\n        expect(mobile_phone).to have(1).errors_on(:phone)\r\n      end\r\n    end\r\n\r\nTo build an association based on a parent factory, use the `after(:build)` block.\r\n\r\n    # spec/factories/contacts.rb\r\n  \r\n    require 'faker'\r\n\r\n    FactoryGirl.define do\r\n      factory :contact do\r\n        firstname { Faker::Name.first_name }\r\n        lastname { Faker::Name.last_name }\r\n        email { Faker::Internet.email }\r\n\r\n        after(:build) do |contact|\r\n          [:home_phone, :work_phone, :mobile_phone].each do |phone|\r\n            contact.phones << FactoryGirl.build(:phone,\r\n              phone_type: phone, contact: contact)\r\n          end\r\n        end\r\n      end\r\n    end\r\n\r\n## Controller Specs\r\n\r\n    # contacts_controller_spec.rb\r\n\r\n    require 'spec_helper'\r\n\r\n    describe ContactsController do\r\n\r\n      describe 'GET #index' do\r\n        context 'with params[:letter]' do\r\n          it "populates an array of contacts starting with the letter" do\r\n            smith = create(:contact, lastname: 'Smith')\r\n            jones = create(:contact, lastname: 'Jones')\r\n            get :index, letter: 'S'\r\n            expect(assigns(:contacts)).to match_array([smith])\r\n          end\r\n\r\n          it "renders the :index view" do\r\n            get :index, letter: 'S'\r\n            expect(response).to render_template :index\r\n          end\r\n        end\r\n\r\n        context 'without params[:letter]' do\r\n          it "populates an array of all contacts" do\r\n            smith = create(:contact, lastname: 'Smith')\r\n            jones = create(:contact, lastname: 'Jones')\r\n            get :index\r\n            expect(assigns(:contacts)).to match_array([smith, jones])\r\n          end\r\n          it "renders the :index view" do\r\n            get :index\r\n            expect(response).to render_template :index\r\n          end\r\n        end\r\n      end\r\n\r\n      describe 'GET #show' do\r\n        it "assigns the requested contact to @contact" do\r\n          contact = create(:contact)\r\n          get :show, id: contact\r\n          expect(assigns(:contact)).to eq contact\r\n        end\r\n\r\n        it "renders the :show template" do\r\n          contact = create(:contact)\r\n          get :show, id: contact\r\n          expect(response).to render_template :show\r\n        end\r\n      end\r\n\r\n      describe 'GET #new' do\r\n        it "assigns a new Contact to @contact" do\r\n          get :new\r\n          expect(assigns(:contact)).to be_a_new(Contact)\r\n        end\r\n\r\n        it "renders the :new template" do\r\n          get :new\r\n          expect(response).to render_template :new\r\n        end\r\n      end\r\n\r\n      describe 'GET #edit' do\r\n        it "assigns the requested contact to @contact" do\r\n          contact = create(:contact)\r\n          get :edit, id: contact\r\n          expect(assigns(:contact)).to eq contact\r\n        end\r\n\r\n        it "renders the :edit template" do\r\n          contact = create(:contact)\r\n          get :edit, id: contact\r\n          expect(response).to render_template :edit\r\n        end\r\n      end\r\n\r\n      describe "POST #create" do\r\n        before :each do\r\n          @phones = [\r\n            attributes_for(:phone),\r\n            attributes_for(:phone),\r\n            attributes_for(:phone)\r\n          ]\r\n        end\r\n        context "with valid attributes" do\r\n          it "saves the new contact in the database" do\r\n            expect{\r\n              post :create, contact: attributes_for(:contact,\r\n                phones_attributes: @phones)\r\n            }.to change(Contact, :count).by(1)\r\n          end\r\n\r\n          it "redirects to contacts#show" do\r\n            post :create, contact: attributes_for(:contact,\r\n              phones_attributes: @phones)\r\n            expect(response).to redirect_to contact_path(assigns[:contact])\r\n          end\r\n        end\r\n\r\n        context "with invalid attributes" do\r\n          it "does not save the new contact in the database" do\r\n            expect{\r\n              post :create, contact: attributes_for(:invalid_contact)\r\n            }.to_not change(Contact, :count)\r\n          end\r\n\r\n          it "re-renders the :new template" do\r\n            post :create, contact: attributes_for(:invalid_contact)\r\n            expect(response).to render_template :new\r\n          end\r\n        end\r\n      end\r\n\r\n      describe 'PATCH #update' do\r\n        before :each do\r\n          @contact = create(:contact, firstname: 'Lawrence', lastname: 'Smith')\r\n        end\r\n\r\n        context 'valid attributes' do\r\n          it "located the requested @contact" do\r\n            patch :update, id: @contact, contact: attributes_for(:contact)\r\n            expect(assigns(:contact)).to eq(@contact)\r\n          end\r\n\r\n          it "changes @contact's attributes" do\r\n            patch :update, id: @contact, contact: attributes_for(:contact,\r\n              firstname: 'Larry', lastname: 'Smith')\r\n            @contact.reload\r\n            expect(@contact.firstname).to eq("Larry")\r\n            expect(@contact.lastname).to eq("Smith")\r\n          end\r\n\r\n          it 'redirects to the updated contact' do\r\n            patch :update, id: @contact, contact: attributes_for(:contact)\r\n            expect(response).to redirect_to @contact\r\n          end\r\n        end\r\n\r\n        context "with invalid attributes" do\r\n          it "does not change the contact's attributes" do\r\n            patch :update, id: @contact, contact: attributes_for(:contact,\r\n              firstname: 'Larry', lastname: nil)\r\n            @contact.reload\r\n            expect(@contact.firstname).to_not eq('Larry')\r\n            expect(@contact.lastname).to eq('Smith')\r\n          end\r\n\r\n          it "re-renders the edit template" do\r\n            patch :update, id: @contact, contact: attributes_for(:invalid_contact)\r\n            expect(response).to render_template :edit\r\n          end\r\n        end\r\n      end\r\n\r\n      describe 'DELETE destroy' do\r\n        before :each do\r\n          @contact = create(:contact)\r\n        end\r\n\r\n        it "deletes the contact" do\r\n          expect{\r\n            delete :destroy, id: @contact\r\n          }.to change(Contact,:count).by(-1)\r\n        end\r\n\r\n        it "redirects to contact#index" do\r\n          delete :destroy, id: @contact\r\n          expect(response).to redirect_to contacts_url\r\n        end\r\n      end\r\n\r\n    end\r\n\r\nUse the `attributes_for` method of Factory Girl to generate a hash of the attributes, not an object.\r\n\r\nNon-CRUD methods:\r\n\r\nAn example here is a 'hide_contact' method, which would not modify the database\r\n\r\n    describe "PATCH hide_contact" do\r\n\r\n      before :each do\r\n        @contact = create(:contact)\r\n      end\r\n\r\n      it "marks the contact as hidden" do\r\n        patch :hide_contact, id: @contact\r\n        expect(@contact.reload.hidden?).to be_true\r\n      end\r\n\r\n      it "redirects to contacts#index" do\r\n        patch :hide_contact, id: @contact\r\n        expect(response).to redirect_to contacts_url\r\n      end\r\n\r\n    end\r\n\r\nNested Routes:\r\n\r\n    describe 'GET #show' do\r\n\r\n      it "renders the :show template for the phone" do\r\n        contact = create(:contact)\r\n        phone = create(:phone, contact: contact)\r\n        get :show, id: phone, contact_id: contact.id\r\n        expect(response).to render_template :show\r\n      end\r\n\r\n    end\r\n\r\nTesting Non-HTML:\r\n\r\nExample Controller\r\n\r\n    def index\r\n      @contacts = Contact.all\r\n\r\n      respond_to do |format|\r\n        format.html #index.html.erb\r\n        format.csv do\r\n          send_date Contact.to_csv(@contacts),\r\n            type: 'text/csv; charset=iso-8859-1; header=present',\r\n            disposition: 'attachment; filename=contacts.csv'\r\n        end\r\n      end\r\n    end\r\n\r\nTest for that:\r\n\r\n    describe 'CSV output' do\r\n      it "returns a CSV file" do\r\n        get :index, format: :csv\r\n        expect(response.headers['Content-Type']).to have_content 'text/csv'\r\n      end\r\n\r\n      it 'returns content' do\r\n        create(:contact, first_name: 'Aaron', last_name: 'Sumner', email: 'aaron@sample.com')\r\n        get :index, format: :csv\r\n        expect(response.body).to have_content 'Aaron Sumner,aaron@sample.com'\r\n      end\r\n    end\r\n\r\n## Advanced Controller Specs\r\n\r\nUncomment the line in the contacts controller that requires authentication\r\n\r\n    before_action :authenticate, except: [:index, :show]\r\n\r\nCreate a factory for users\r\n\r\n    # spec/factories/users.rb\r\n\r\n    require 'faker'\r\n\r\n    FactoryGirl.define do\r\n      factory :user do\r\n        email { Faker::Internet.email }\r\n        password 'secret'\r\n        password_confirmation 'secret'\r\n\r\n        factory :admin do\r\n          admin true\r\n        end\r\n      end  \r\n    end\r\n\r\nNow we can easily create a user or administrator.  In the controller spec, we'll use the factory to\r\ntest administrator access.\r\n\r\n    # spec/controllers/contacts_controller_spec.rb\r\n\r\n    describe "administrator access" do\r\n      before :each do\r\n        user = create(:admin)\r\n        session[:user_id] = user.id\r\n      end\r\n\r\n      # all other tests\r\n    end\r\n\r\nThis simulates a valid login by assigning the `session[:user_id]` directly. You can do this with the `:user`\r\nfactory as well, with all the same tests. The *guest* access will be different, rather than setting a session\r\nid, we'll have to change the specs to show that access is not allowed.\r\n\r\n    describe "guest access" do\r\n      describe 'GET #index' do\r\n        context 'with params[:letter]' do\r\n          it "populates an array of contacts starting with the letter" do\r\n            smith = create(:contact, lastname: 'Smith')\r\n            jones = create(:contact, lastname: 'Jones')\r\n            get :index, letter: 'S'\r\n            expect(assigns(:contacts)).to match_array([smith])\r\n          end\r\n\r\n          it "renders the :index view" do\r\n            get :index, letter: 'S'\r\n            expect(response).to render_template :index\r\n          end\r\n        end\r\n\r\n        context 'without params[:letter]' do\r\n          it "populates an array of all contacts" do\r\n            smith = create(:contact, lastname: 'Smith')\r\n            jones = create(:contact, lastname: 'Jones')\r\n            get :index\r\n            expect(assigns(:contacts)).to match_array([smith, jones])\r\n          end\r\n          it "renders the :index view" do\r\n            get :index\r\n            expect(response).to render_template :index\r\n          end\r\n        end\r\n      end\r\n\r\n      describe 'GET #show' do\r\n        it "assigns the requested contact to @contact" do\r\n          contact = create(:contact)\r\n          get :show, id: contact\r\n          expect(assigns(:contact)).to eq contact\r\n        end\r\n\r\n        it "renders the :show template" do\r\n          contact = create(:contact)\r\n          get :show, id: contact\r\n          expect(response).to render_template :show\r\n        end\r\n      end\r\n\r\n      describe 'GET #new' do\r\n        it "requires login" do\r\n          get :new\r\n          expect(response).to redirect_to login_url\r\n        end\r\n      end\r\n\r\n      describe 'GET #edit' do\r\n        it "requires login" do\r\n          contact = create(:contact)\r\n          get :edit, id: contact\r\n          expect(response).to redirect_to login_url\r\n        end\r\n      end\r\n\r\n      describe "POST #create" do\r\n        it "requires login" do\r\n          post :create, id: create(:contact),\r\n            contact: attributes_for(:contact)\r\n          expect(response).to redirect_to login_url\r\n        end\r\n      end\r\n\r\n      describe "PUT #update" do\r\n        it "requires login" do\r\n          put :update, id: create(:contact),\r\n            contact: attributes_for(:contact)\r\n          expect(response).to redirect_to login_url\r\n        end\r\n      end\r\n\r\n      describe 'DELETE #destroy' do\r\n        it "requires login" do\r\n          delete :destroy, id: create(:contact)\r\n          expect(response).to redirect_to login_url\r\n        end\r\n      end\r\n    end\r\n\r\nOnly administrators should be allowed to add new users. Test for this in the `users_controller_spec.rb`\r\n\r\n    require 'spec_helper'\r\n\r\n    describe UsersController do\r\n      describe 'user access' do\r\n        before :each do\r\n          @user = create(:user)\r\n          session[:user_id] = @user.id\r\n        end\r\n\r\n        describe 'GET#index' do\r\n          it 'collects users into @users' do\r\n            user = create(:user)\r\n            get :index\r\n            expect(assigns(:users)).to match_array [@user, user]\r\n          end\r\n\r\n          it "renders the :index template" do\r\n            get :index\r\n            expect(response).to render_template :index\r\n          end\r\n        end\r\n\r\n        it "GET#new denies access" do\r\n          get :new\r\n          expect(response).to redirect_to root_url\r\n        end\r\n\r\n        it "POST#create denies access" do\r\n          post :create, user: attributes_for(:user)\r\n          expect(response).to redirect_to root_url\r\n        end\r\n      end\r\n    end\r\n\r\n## 7 - Controller spec cleanup\r\n\r\nUsing shared examples, you can limit duplicate code in tests.\r\n\r\n    shared_examples("public access to contacts") do\r\n      describe 'GET #index' do\r\n        context 'with params[:letter]' do\r\n          it "populates an array of contacts starting with the letter"\r\n          it "renders the :index view"\r\n        end\r\n\r\n        context 'without params[:letter]' do\r\n          it "populates an array of all contacts"\r\n          it "renders the :index view"\r\n        end\r\n      end\r\n\r\n      describe 'GET #show' do\r\n        it "assigns the requested contact to @contact"\r\n        it "renders the :show template"\r\n      end\r\n    end\r\n\r\n    shared_examples("full access to contacts") do\r\n      describe 'GET #new' do\r\n        it "assigns a new Contact to @contact"\r\n        it "renders the :new template"\r\n      end\r\n\r\n      describe 'GET #edit' do\r\n        it "assigns the requested contact to @contact"\r\n        it "renders the :edit template"\r\n      end\r\n\r\n      describe "POST #create" do\r\n        before :each do\r\n          @phones = [\r\n            attributes_for(:phone),\r\n            attributes_for(:phone),\r\n            attributes_for(:phone)\r\n          ]\r\n        end\r\n        context "with valid attributes" do\r\n          it "saves the new contact in the database"\r\n          it "redirects to contacts#show"\r\n        end\r\n\r\n        context "with invalid attributes" do\r\n          it "does not save the new contact in the database"\r\n          it "re-renders the :new template"\r\n        end\r\n      end\r\n\r\n      describe 'PATCH #update' do\r\n        before :each do\r\n          @contact = create(:contact, firstname: 'Lawrence', lastname: 'Smith')\r\n        end\r\n\r\n        context 'valid attributes' do\r\n          it "located the requested @contact"\r\n          it "changes @contact's attributes"\r\n          it 'redirects to the updated contact'\r\n        end\r\n\r\n        context "with invalid attributes" do\r\n          it "does not change the contact's attributes"\r\n          it "re-renders the edit template"\r\n        end\r\n      end\r\n\r\nThese can be used in any describe or context block that you need\r\n\r\n    describe "administrator access" do\r\n      before :each do\r\n        user = create(:admin)\r\n        session[:user_id] = user.id\r\n      end\r\n\r\n      it_behaves_like "public access to contacts"\r\n      it_behaves_like "full access to contacts"    \r\n    end\r\n\r\n    describe "user access" do\r\n      before :each do\r\n        user = create(:user)\r\n        session[:user_id] = user.id\r\n      end\r\n\r\n      it_behaves_like "public access to contacts"\r\n      it_behaves_like "full access to contacts"\r\n    end\r\n\r\n    describe "guest access" do\r\n      it_behaves_like "public access to contacts"\r\n    end\r\n\r\nYou can also create helper macros to perform common tasks.\r\n\r\n    # spec/support/login_macros.rb\r\n\r\n    module LoginMacros\r\n      def set_user_session(user)\r\n        session[:user_id] = user.id\r\n      end\r\n    end\r\n\r\n    # spec/spec_helper.rb\r\n\r\n    RSpec.configure do |config|\r\n      # other config\r\n\r\n      config.include LoginMacros\r\n    end\r\n\r\n    # spec/controllers/contacts_controller\r\n\r\n    before :each do\r\n      set_user_session create(:admin)\r\n    end\r\n\r\n### Custom RSpec Matchers\r\n\r\nCustom matchers should be stored in `spec/support/matchers`, with just one matcher per file.\r\n\r\n    # spec/support/matchers/require_login.rb\r\n\r\n    RSpec::Matchers.define :require_login do |attribute|\r\n      match do |actual|\r\n        expect(attribute).to redirect_to Rails.application.routes.url_helpers.login_path\r\n      end\r\n\r\n      failure_message_for_should do |actual|\r\n        "expected to require login to access the method"\r\n      end\r\n\r\n      failure_message_for_should_not do |actual|\r\n        "expected not to require login to access the method"\r\n      end\r\n\r\n      description do\r\n        "redirect to the login form"\r\n      end\r\n    end\r\n\r\nIn this code, the `match` block is what we expect to happen. This will replace the code after a\r\n`expect(something).to` call in a given spec. Rspec doesn't automatically load the UrlHelpers library,\r\nwhich is why we have to specify the full path. Then we see if the *attribute* we're passing to the matcher\r\ndoes what we expect. The attribute in this case is the response. Then we set error messages for the error\r\nand the negation. These can be used in the spec:\r\n\r\n    describe "guest access" do\r\n      it_behaves_like "public access to contacts"\r\n\r\n      describe 'GET #new' do\r\n        it "requires login" do\r\n          get :new\r\n          expect(response).to require_login\r\n        end\r\n      end\r\n    end\r\n\r\n## 8 - Feature Specs\r\n\r\nNow we'll make use of the `database_cleaner`, `launchy`, and `selenium-webdriver` gems we bundled with the\r\napp. This basic feature spec wont require it though:\r\n\r\n    # spec/features/users_spec.rb\r\n\r\n    feature 'User management' do\r\n      scenario 'adds a new user' do\r\n        admin = create(:admin)\r\n\r\n        visit root_path\r\n        click_link 'Log In'\r\n        fill_in 'Email', with: admin.email\r\n        fill_in 'Password', with: admin.password\r\n        click_button 'Log In'\r\n\r\n        visit root_path\r\n        expect {\r\n          click_link 'Users'\r\n          click_link 'New User'\r\n          fill_in 'Email', with: 'newuser@example.com'\r\n          find("#password").fill_in 'Password', with: 'secret123'\r\n          find('#password_confirmation').fill_in 'Password confirmation', with: 'secret123'\r\n          click_button 'Create User'\r\n        }.to change(User, :count).by(1)\r\n        expect(current_path).to eq users_path\r\n        expect(page).to have_content 'New user created'\r\n        within 'h1' do\r\n          expect(page).to have_content 'Users'\r\n        end\r\n        expect(page).to have_content 'newuser@example.com'\r\n      end\r\n    end\r\n\r\nYou'll notice feature specs have a little bit different syntax than unit tests. Rather than `describe` and\r\n`it` we have `feature` and `scenario`. A common template for features:\r\n\r\n    require 'spec_helper'\r\n\r\n    feature 'my feature' do\r\n      background do\r\n        # add setup details\r\n      end\r\n\r\n      scenario 'my first test' do\r\n        # write example\r\n      end\r\n    end\r\n\r\nIt may be hard to understand from the error messages why a test is failing. Using the `launchy` gem, you can\r\nopen the current page in a browser with the line `save_and_open_page`. For example, this would open the page\r\nafter filling in the form:\r\n\r\n    feature 'User management' do\r\n      scenario 'adds a new user' do\r\n        admin = create(:admin)\r\n\r\n        visit root_path\r\n        click_link 'Log In'\r\n        fill_in 'Email', with: admin.email\r\n        fill_in 'Password', with: admin.password\r\n        click_button 'Log In'\r\n\r\n        visit root_path\r\n        expect {\r\n          click_link 'Users'\r\n          click_link 'New User'\r\n          fill_in 'Email', with: 'newuser@example.com'\r\n          find("#password").fill_in 'Password', with: 'secret123'\r\n          find('#password_confirmation').fill_in 'Password confirmation', with: 'secret123'\r\n          click_button 'Create User'\r\n        }.to change(User, :count).by(1)\r\n\r\n        save_and_open_page\r\n\r\nWe can refactor this feature spec by using macros. These will have to be different than the unit test\r\nmacros, because we're testing how interactions will work. But they can use the same files:\r\n\r\n    # spec/support/login_macros.rb\r\n\r\n    def sign_in(user)\r\n      visit root_path\r\n      click_link 'Log In'\r\n      fill_in 'Email', with: user.email\r\n      fill_in 'Password', with: user.password\r\n      click_button 'Log In'\r\n    end\r\n\r\n    # spec/features/users_spec.rb\r\n\r\n    admin = create(:admin)\r\n    sign_in admin\r\n\r\nBy default, Capybara can't deal with JavaScript. In the example application, the about us link is\r\nhidden behind an overlay by Javascript when you're on the about us page. Any test for this will fail.\r\n\r\n    # spec/features/about_us_spec.rb\r\n\r\n    require 'spec_helper'\r\n\r\n    feature 'About BigCo modal' do\r\n      scenario 'toggles display of modal about display' do\r\n        visit root_path\r\n        about_bigco = 'BigCo produces the finest widgets in all the land'\r\n\r\n        expect(page).to_not have_content 'About BigCo'\r\n        expect(page).to_not have_content about_bigco\r\n\r\n        click_link 'About Us'\r\n\r\n        expect(page).to have_content 'About BigCo'\r\n        expect(page).to have_content about_bigco\r\n\r\n        within '#about_us' do\r\n          click_button 'Close'\r\n        end\r\n\r\n        expect(page).to_not have_content 'About BigCo'\r\n        expect(page).to_not have_content about_bigco\r\n\r\n      end\r\n      \r\n    end\r\n\r\nYou can test this JavaScript using the Selenium web driver, which requires the Firefox web browser.\r\nTo activate it, just add `js: true` to the scenario\r\n\r\n    feature 'About BigCo modal' do\r\n      scenario 'toggles display of the modal about display', js: true do\r\n\r\nYou can enable javascript on any scenario, even if you don't need it. You'll have to use the `database_cleaner`'s\r\n `:truncation` method when running specs through the selenium driver. To enable this:\r\n\r\n    # spec/spec_helper.rb\r\n\r\n    RSpec.configure do |config|\r\n\r\n    # configurations\r\n\r\n    # set config.use_transactional_fixtures to false\r\n    config.use_transactional_fixtures = false\r\n\r\n    config.before(:suite) do\r\n      DatabaseCleaner.strategy = :truncation\r\n    end\r\n\r\n    config.before(:each) do\r\n      DatabaseCleaner.start\r\n    end\r\n\r\n    config.after(:each) do\r\n      DatabaseCleaner.clean\r\n    end\r\n\r\nThen we'll need to *monkey patch* ActiveRecord to use threads.\r\n\r\n    # spec/support/shared_db_connection.rb\r\n\r\n    class ActiveRecord::Base\r\n      mattr_accessor :shared_connection\r\n      @@shared_connection = nil\r\n\r\n      def self.connection\r\n        @@shared_connection || retrieve_connection\r\n      end\r\n    end\r\n\r\n    ActiveRecord::Base.shared_connection = ActiveRecord::Base.connection\r\n\r\nWe need to do this because of how Selenium handles database transactions. The data state must be shared\r\nbetween the Selenium web server and the test code itself, so that database doesn't clean up properly without\r\nthese patches.\r\n\r\nThe default driver for Capybara is called RackTest. This is *headless*, meaning it runs in the background \r\nwithout the need to open a browser. It can't test JavaScript, though. If you want a headless option\r\nfor testing javascript, you can check out [capybara-webkit](https://github.com/thoughtbot/capybara-webkit)\r\nor [Poltergeist](https://github.com/jonleighton/poltergeist). Setting up alternative drivers can be\r\ntricky, but there is documentation for Capybara and the drivers.\r\n\r\n## 9 - Speeding Up Specs\r\n\r\nUsing `let()` can optimize your test and clean up the code.\r\n\r\n    # spec/controllers/contacts_controller_spec.rb\r\n\r\n    describe ContactsController do\r\n      let(:contact) do\r\n        create(:contact, firstname: 'Lawrence', lastname: 'Smith')\r\n      end\r\n\r\n      ...\r\n\r\n      describe 'GET #show' do\r\n        it 'assigns the requested contact to contact' do\r\n          get :show, id: contact\r\n          expect(:contact).to eq contact\r\n        end\r\n\r\n        it 'renders the :show template' do\r\n          get :show, id: contact\r\n          expect(response).to render_template :show\r\n        end\r\n      end\r\n\r\nThe delete method is special, because the call to `contact` is within the `expect` block. So\r\nyou'll need to call contact ahead of that.\r\n\r\n    describe 'DELETE destroy' do\r\n      it "deletes the contact" do\r\n        contact\r\n        expect{\r\n          delete :destroy, id: contact\r\n        }.to change(Contact,:count).by(-1)\r\n      end\r\n\r\n      it "redirects to contact#index" do\r\n        delete :destroy, id: contact\r\n        expect(response).to redirect_to contacts_url\r\n      end\r\n    end\r\n\r\n#### Shoulda\r\n\r\nShould is a library of helpers for common testing functionality. With shoulda, you could say:\r\n\r\n    subject{ Contact.new }\r\n    specify { should validate_presence_of :firstname }\r\n\r\n### Mocks and stubs\r\n\r\n<dl>\r\n  <dt>Mock</dt>\r\n  <dd>Represents a real object for testing purposes. A mock doesn't touch the database, thus takes\r\n    less time to set up in a test.</dd>\r\n  <dt>Stub</dt>\r\n  <dd>Overrides a method call on a given object to give a predetermined value. You can\r\n    use this to create a fake method that returns a real result.</dd>\r\n</dl>\r\n\r\nExamples:\r\n\r\n* To create a mock contact, use the Factory Girl `build_stubbed()` method to generate a \r\nfake method that knows how to respond to various methods like firstname, lastname, and fullname\r\n* To stub a method in the contact model, you could use something like \r\n`Contact.stub(:order).with(return([contact]))`. This will override the `order` scope to return a single-element\r\narray containing a contact we created earlier.\r\n\r\nThere are mocking libraries like *Mocha* that give you a number of helpers.\r\n\r\nIn the context of a controller spec:\r\n\r\n    # spec/controllers/contacts_controller_spec.rb\r\n\r\n    describe 'GET #show' do\r\n      let(:contact) { build_stubbed(:contact, firstname: 'Lawrence', lastname: 'Smith') }\r\n\r\n      before :each do\r\n        Contact.stub(:persisted?).and_return(true)\r\n        Contact.stub(:order).with('lastname, firstname').and_return([contact])\r\n        Contact.stub(:find).with(contact.id.to_s).and_return(contact)\r\n        contact.stub(:save).and_return(true)\r\n      end\r\n\r\n      before :each do\r\n        Contact.stub(:find).with(contact.id.to_s).and_return(contact)\r\n        get :show, id: contact\r\n      end\r\n\r\n      it "assigns the requested contact to @contact" do\r\n        expect(assigns(:contact)).to eq contact\r\n      end\r\n\r\n      it "renders the :show template" do\r\n        expect(response).to render_template :show\r\n      end\r\n    end\r\n\r\nIn this case, we use `let()` to assign a stubbed mock contact to `contact`. Then we need to\r\nstub several ActiveRecord methods that will be used in the controller, so that it returns\r\nwhat we'd expect ActiveRecord to return. In this case all the test data does not call to the database.\r\nThis makes it isolated from the other specs, but requires additional code.\r\n\r\n### Automation with Guard and Spork\r\n\r\nGuard watches files you specify and does things based on what it sees. Add these files to the gemfile.\r\n\r\n    group :development do\r\n      gem "guard-rspec", "~> 4.0.3"\r\n      gem 'guard-spork', '~> 1.5.1'\r\n      gem 'spork-rails', github: 'sporkrb/spork-rails'\r\n      gem 'rb-fsevent', '~> 0.9.3'\r\n    end\r\n\r\nThen create a `Guardfile` (it will scold you if you don't use bundle exec)\r\n\r\n    bundle exec guard init rspec\r\n\r\nSome tweaks that may be helpful:\r\n\r\n* `notification: false`, if you're monitoring in the terminal window, you don't need popups.\r\n* `all_on_start: false` and `all_on_pass: false`. After starting Guard you can press return to\r\nrun all specs, you don't need to automate this.\r\n* Run feature specs on changes to the views.\r\n\r\nTo set these up, all you have to do is add this line:\r\n\r\n    guard :rspec, notification: false, all_on_start: false, all_on_pass: false do\r\n\r\nGuard is capable of other things besides watching your specs. It can streamline CSS compilation,\r\nrun code metrics, reboot development servers, and more. There's a [RailsCast](http://railscasts.com/episodes/264-guard) about this as well.\r\n\r\nWatch the [RailsCast on Spork](http://railscasts.com/episodes/285-spork). Spork may have issues with\r\nRuby 2.0. The workaround 404ed on GitHub, not sure if it's still a problem. Alternatives to spork\r\ninclude things like *Zeus*, *Commands*, and *Spring*\r\n\r\n#### Tags\r\n\r\nYou can specify a group of tests to run at a time by setting tags.\r\n\r\n    it "processes a credit card", focus :true\r\n\r\nThen run rspec with the `--tag` options.\r\n\r\n    bundle exec rspec . --tag focus\r\n\r\nYou can also specify this in the spec helper.\r\n\r\n    Rspec.configure do |c|\r\n      c.filter_run focus: true\r\n      c.filter_run_excluding slow: true\r\n    end\r\n\r\nIf you have tests you don't need any more, remove them or mark them as pending.\r\n\r\n    it "loads a lot of data" do\r\n      pending "no longer necessary"\r\n      # spec code\r\n    end\r\n\r\n## 10 - Testing the Rest\r\n\r\n### Email\r\n\r\nIf you want to test mailers, a gem called [Email Spec](http://rubygems.org/gems/email_spec) will\r\nmake it simple. Once added to your bundle, you'll need a little more configuration for the spec_helper.\r\n\r\n    require 'email_spec'\r\n    config.include(EmailSpec::Helpers)\r\n    config.include(EmailSpec::Matchers)\r\n\r\nYou can now use expectations like this:\r\n\r\n    expect(open_last_email).to be_delivered_from sender.email\r\n    expect(open_last_email).to have_reply_to sender.email\r\n    expect(open_last_email).to be_delivered_to recipient.email\r\n    expect(open_last_email).to have_subject message.subject\r\n    expect(open_last_email).to have_body_text message.message\r\n\r\n`open_last_email` is a helper that opens the most recently-sent email so you can access the attributes.\r\nYou can also work with it directly with something like:\r\n\r\n    email = MessageMailer.create_friend_request("aaron@everydayrails.com")\r\n    expect(email).to deliver_to("aaron@everydayrails.com")\r\n    expect(email).to have_subject "Friend Request"\r\n\r\nFor more on Email Spec, check out the Railscast, [How I Test](http://railscasts.com/episodes/275-how-i-test)\r\n\r\n### File Uploads\r\n\r\nPlace a small dummy file in your `spec/factories` directory. Then you can define a factory:\r\n\r\n    # the factory\r\n\r\n    FactoryGirl.define do\r\n      factory :user do\r\n        sequence(:username) { |n| "user#{n}" }\r\n        password 'secret'\r\n        avatar { File.new("#{Rails.root}/spec/factories/avatar.png") }\r\n      end\r\n    end\r\n\r\n    # the spec file\r\n\r\n    it "uploads an avatar" do\r\n      post :create, user: create(:user)\r\n      expect(assigns(:user).avatar_file_name).to eq 'avatar.png'\r\n    end\r\n\r\nYou can also access it directly from the spec\r\n\r\n    it "creates a new user" do\r\n      visit new_user_url\r\n      fill_in 'Username', with: 'aaron'\r\n      fill_in 'Password', with: 'secret'\r\n      attach_file 'Avatar',\r\n        File.new("#{Rails.root}/spec/factories/avatar.png")\r\n      click_button 'Sign up'\r\n      expect(User.last.avatar_file_name).to eq 'avatar.png'\r\n    end\r\n\r\n### Testing the Time\r\n\r\nIf your application has expectations based on time or date, you can use [Timecop](http://rubygems.org/gems/timecop)\r\nto freeze time and test things.\r\n\r\n    it "wishes the visitor a Happy New Year on January 1" do\r\n      Timecop.travel Time.parse("January 1")\r\n      visit root_url\r\n      expect(page).to have_content "Happy New Year!"\r\n      Timecop.return\r\n    end\r\n\r\n    it "stamps the model's created at with the current time" do\r\n      Timecop.freeze\r\n      user = create(:user)\r\n      expect(user.created_at).to eq Time.now\r\n      Timecop.return\r\n    end\r\n\r\n### Test web services\r\n\r\nThere are a couple Railscasts on this, but mostly you'll want to use stubs.\r\n\r\n* [Fakeweb](http://railscasts.com/episodes/276-testing-time-web-requests)\r\n* [VCR](http://railscasts.com/episodes/291-testing-with-vcr)\r\n\r\n### Testing rake tasks\r\n\r\nRake tasks can be useful for moving legacy data or scheduled operations. It might be helpful to\r\nmove the method into a class for testing.\r\n\r\n    # lib/legacy.rb\r\n\r\n    class Legacy\r\n      def self.move_people\r\n        Person.all.each do |person|\r\n          Contact.create!(\r\n            firstname: person.firstname,\r\n            lastname: person.lastname,\r\n            email: person.email\r\n          )\r\n        end\r\n      end\r\n    end\r\n\r\n    # rake task\r\n\r\n    namespace :legacy do\r\n      desc "Move Person to Contacts"\r\n      task person: :environment do\r\n        Legacy.move_people\r\n      end\r\n    end\r\n\r\n    # spec/lib/legacy_spec.rb\r\n\r\n    require 'spec_helper'\r\n\r\n    describe Legacy do\r\n      it 'creates a contact from a person'\r\n      # etc\r\n    end\r\n\r\n## Toward Test-Driven Development\r\n	3	2015-03-31 21:14:39.620192	2015-03-31 21:14:39.620192
84	Object Oriented Design with Ruby	object-oriented-design-with-ruby	## Chapter 1 - Object Oriented Design\r\n\r\n### Tools of Design\r\n\r\nSOLID\r\n\r\n<dl>\r\n<dt>Single Responsibility</dt>\r\n<dd>A class should have only a single responsibility</dd>\r\n<dt>Open-Closed</dt>\r\n<dd>Software entities should be open for extension, but closed for modification</dd>\r\n<dt>Liskov Substitution</dt>\r\n<dd>Objects should be replaceable with instances of their subtypes without altering the correctness of that program</dd>\r\n<dt>Interface Segregation</dt>\r\n<dd>Many client-specific interfaces are better than one general-purpose interface</dd>\r\n<dt>Dependency Inversion</dt>\r\n<dd>Depend on abstractions, not on concretions.</dd>\r\n</dl>\r\n\r\n#### Ruby Metrics\r\n\r\nGoogle `ruby metrics` to find gems that will evaluate your code.\r\n\r\n## Chapter 2 - Designing Classes witha  Single Responsibility\r\n\r\n### Deciding What Belongs in a Class\r\n\r\nCode should be TRUE\r\n\r\nTransparent\r\n: Consecquences of a change should be obvious\r\nReasonable\r\n: Cost of any change should be proportional to the benefits\r\nUsable\r\n: Existing code should be usable in new and unexpected contexts\r\nExemplary\r\n: Encourage those who change it to perpetuate these qualities\r\n\r\n### Creating Classes that have a Single Responsibility\r\n\r\nDescribe your class without the word AND\r\n\r\n### Writing Code taht Embraces Change\r\n\r\nDepend on behavior, not data.\r\n\r\nObjects often contain data, which is held in an instance variable. You can refer directly to the instance variable or wrap the instance variable in an accessor method. The later is better.\r\n\r\n    class Gear\r\n      def initialize(chainring, cog)\r\n        @chainring = chainring\r\n        @cog = cog\r\n      end\r\n\r\n      def ratio\r\n        @chainring / @cog.to_f #<-- BAD\r\n      end\r\n    end\r\n\r\nThe `attr_reader` is a way to encapsulate the method, hiding them even from the class that defines them.\r\n\r\n    attr_reader :chainring, :cog\r\n\r\nThis creates something automatically:\r\n\r\n    def cog\r\n      @cog\r\n    end\r\n\r\nThis allows you to easily change @cog. If some calculation is necessary, for example, simply remove it from the attr_reader and create your own method.\r\n\r\n    def cog\r\n      @cog * (foo? ? bar_adjustment : baz_adjustment)\r\n    end\r\n\r\nAnywhere that referenced @cog still works.\r\n\r\n`Struct`\r\n: Using the `Struct` class, you can easily wrap a structure as you would an instance variable.\r\n\r\n    class RevealingReferences\r\n      attr_reader :wheels\r\n      def initialize(data)\r\n        @wheels = wheelify(data)\r\n      end\r\n\r\n      def diameters\r\n        wheels.collect { |wheel|\r\n          wheel.rim + (wheel.tire * 2) }\r\n      end\r\n\r\n      Wheel = Struct.new(:rim, :tire)\r\n      def wheelify(data)\r\n        data.collect { |cell|\r\n          Wheel.new(cell[0], cell[1]) }\r\n      end\r\n    end\r\n\r\nNow `:rim` and `:tire` are lightweight objects that the rest of the class can respond to.\r\n\r\nIn the `Struct` example, we see the `diameters` method has two tasks. Collect data about the wheel and calculate the diameter of each wheel. To write code that is easily changeable, we'll separate this into two methods\r\n\r\n    def diameters\r\n      wheels.collect { |wheel| diameter(wheel) }\r\n    end\r\n\r\n    def diameter(wheel)\r\n      wheel.rim + (wheel.tire * 2))\r\n    end\r\n\r\nMethods that have a single responsibility have benefits\r\n\r\n<dl>\r\n<dt>Exponse previously hidden qualities</dt>\r\n<dd>Makes the purpose obvious, reducing need for comments</dd>\r\n<dt>Encourage reuse</dt>\r\n<dd>Small methods are easily reused</dd>\r\n<dt>Are easy to move to another class</dt>\r\n<dd>Can be moved without as much influence on the whole.</dd>\r\n  </dl>\r\n\r\nBy using the `Struct` class, it is easier to create a new class when more design elements are required\r\n\r\n    class Gear\r\n      attr_reader :chainring, :cog, :wheel\r\n      def initialize(chainring, cog, wheel=nil)\r\n        @chainring = chainring\r\n        @cog = cog\r\n        @wheel = wheel\r\n      end\r\n\r\n      def ratio\r\n        chainring / cog.to_f\r\n      end\r\n\r\n      def gear_inches\r\n        ratio * wheel.diameter\r\n      end\r\n    end\r\n\r\n    class Wheel\r\n      attr_reader :rim, :tire\r\n\r\n      def initialize(rim, tire)\r\n        @rim = rim\r\n        @tire = tire\r\n      end\r\n\r\n      def diameter\r\n        rim + (tire*2)\r\n      end\r\n\r\n      def circumference\r\n        diameter * Math::PI\r\n      end\r\n    end\r\n\r\n    @wheel = Wheel.new(26, 1.5)\r\n    puts @wheel.circumference\r\n\r\n    puts Gear.new(52, 11, @wheel).gear_inchese\r\n\r\n    puts Gear.new(52, 11).ratio\r\n\r\n## Chapter 3 - Managing Dependencies\r\n\r\nLooking at a simple relationship between two classes, evaluate the dependencies by looking when one would change if the other changed.\r\n\r\n    class Gear\r\n      attr_reader :chainring, :cog, :rim, :tire\r\n      def initialize(chainring, cog, rim, tire)\r\n        @chainring = chainring\r\n        @cog       = cog\r\n        @rim       = rim\r\n        @tire      = tire\r\n      end\r\n\r\n      def gear_inches\r\n        ratio * Wheel.new(rim, tire).diameter\r\n      end\r\n\r\n      def ratio\r\n        chainring / cog.to_f\r\n      end\r\n\r\n    end\r\n\r\n    class Wheel\r\n      attr_reader :rim, :tire\r\n      def initialize(rim, tire)\r\n        @rim  = rim\r\n        @tire = tire\r\n      end\r\n\r\nHere we can find Gear has at least 4 dependencies on Wheel.\r\n\r\n* The name - Gear expects Wheel to be the name\r\n* Messages - Gear expects Wheel to respond to diameter\r\n* Argument requirements - Gear knows that Wheel.new require rim and tire\r\n* Argument order - Gear knows the first is rim and the second is tire\r\n\r\nAnother type of destructive dependency involves chaining messages to even more distant objects, which makes one object dependent on another that is potentially many times removed. This is called a **Law of Demeter violation** and is discussed further with Chapter 4. Tests are also often tightly coupled with the application code, but this can be cleaned up as we will discuss in Chapter 9.\r\n\r\n\r\n### Writing Loosely Coupled Code\r\n\r\n#### Inject Dependencies\r\n\r\nGear should not care that the class is named `Wheel` or that it expects to be initialized with `rim` and `tire`, in that order. It should just expect an object that knows `diameter`. Instead of the current setup, we can use dependency injection to initialize the object with another object that can respond to `diameter`.\r\n\r\n    class Gear\r\n      attr_reader :chainring, :cog, :wheel\r\n      def initialize(chainring, cog, wheel)\r\n        @chainring = chainring\r\n        @cog       = cog\r\n        @wheel     = wheel\r\n      end\r\n\r\n      def gear_inches\r\n        ratio * wheel.diameter\r\n      end\r\n    end\r\n\r\nThis is related to **duck typing**. Now, outside the class we would instantiate a new gear with:\r\n\r\n    Gear.new(52, 11, Wheel.new(26, 1.5)).gear_inches\r\n\r\n#### Isolate Dependencies\r\n\r\nIf you aren't able to change the code outside of the classes, which would be required for dependency injection. First, try moving the dependency into the initializer, so it is easily visible.\r\n\r\n    def initialize(chainring, cog, rim, tire)\r\n      @chainring = chainring\r\n      @cog       = cog\r\n      @wheel     = Wheel.new(rim,tire)\r\n    end\r\n\r\nAlternatively, create a new method specifically for creating this object.\r\n\r\n    def wheel\r\n      @wheel ||= Wheel.new(rim, tire)\r\n    end\r\n\r\nYou also need to be careful of External Messages, and isolate them when you can.\r\n\r\n    def diameter\r\n      wheel.diameter\r\n    end\r\n\r\n### Remove Argument-Order Dependencies\r\n\r\nInitializers that are dependent on multiple arguments (`def initialize(chainring,cog,wheel)`) could change or be forgotten. You can avoid this dependency in a few different ways\r\n\r\n#### Using hashes\r\n\r\nUsing named parameters so the caller does not have to remember abitrary order\r\n\r\n    def initialize(args)\r\n      @chainring = args[:chainring]\r\n      @cog       = args[:cog]\r\n      @wheel     = args[:wheel]\r\n    end\r\n\r\n    Gear.new(\r\n      chainring: 52,\r\n      cog: 11,\r\n      wheel: Wheel.new(26,15)\r\n    ).gear_inches\r\n\r\n#### Explicitly Define Defaults\r\n\r\nYou can specify defaults with `||`\r\n\r\n    def initialize(args)\r\n      @chainring = args[:chainring] || 40\r\n\r\nThis sets the default if the first expression in `false` or `nil. If you're setting a boolean, you will never get false in this case. It may be better for you to use `fetch`, which supplies several options for handling missing keys.\r\n\r\n    @chainring = args.fetch(:chainring, 40)\r\n\r\nThis sets `@chainring` to 40 only if the `:chainring` key is not in the hash. So if `:chainring` is set to `nil` or `false`, it will not be overwritten.\r\n\r\nYou could instead move the defaults into a completely separate method.\r\n\r\n    def initialize(args)\r\n      args = defaults.merge(args)\r\n      @chainring = args[:chainring]\r\n    end\r\n\r\n    def defaults\r\n      {chainring: 40, cog: 18}\r\n    end\r\n\r\nThis merges the `args` arguments with `defaults`, overwritting `defaults` with any keys present in `args`.\r\n\r\n#### Isolate Multiparameter Initialization\r\n\r\nIf the initializer is out of your control, you can create a wrapper to make your own code easier to read and work with.\r\n\r\n    module GearWrapper\r\n      def self.gear(args)\r\n        SomeFramework::Gear.new(args[:chainring],args[:cog],args[:wheel])\r\n      end\r\n    end\r\n\r\n    GearWrapper.gear(\r\n      chainring:  52,\r\n      cog:        11,\r\n      wheel:      Wheel.new(26, 1.5)\r\n    ).gear_inches\r\n\r\nUsing a module here is done because you don't expect to create instances of the `GearWrapper`, you just want to group utilities. This could be considered a *factory*, because it is an object that creates other objects.\r\n\r\n### Managing Dependency Direction\r\n\r\nThe dependency between Gear and Wheel could be reversed, so that Wheel becomes dependent on Gear\r\n\r\n    class Wheel\r\n      def initialize(rim, tire, chainring, cog)\r\n        @rim  = rim\r\n        @tire = tire\r\n        @gear = Gear.new(chainring, cog)\r\n      end\r\n\r\n      def diameter\r\n        rim + (tire * 2)\r\n      end\r\n\r\n      def gear_inches\r\n        gear.gear_inches(diameter)\r\n\r\n#### Choosing Dependency Direction\r\n\r\nYou should try to have your objects depend on things that change less often than the object in question. Concrete classes are more likely to change than abstract classes. In our examples, Wheel became much more abstract when we eliminated the dependency.\r\n\r\nNote that framework classes are more likely to change than Ruby classes.\r\n\r\nYou can group classes into these dependency categories:\r\n\r\n|                 | Less Change | More Change |\r\n| --- | --- | --- |\r\n| Many Dependents | Abstract    | Danger      |\r\n| Few Dependents  | Neutral     | Neutral     |\r\n\r\nAbstract classes are less likely to change but may contain many dependents. If a class is likely to change, it should have few dependents. If a class falls into the [danger zone](http://uproxx.files.wordpress.com/2012/03/309a.gif), it should be refactored.\r\n\r\n## Chapter 4\r\n\r\n#### Seeking Context Independence\r\n\r\nThe things that `Trip` knows about other objects make up its *context*. Trip has a single responsibility, but it requires a context. Any use of Trip requires that context. Clearly, simple context is easier to test and maintain. Using dependency injection, you can allow others to collaborate without knowing who is involved. However, in this case Trip still needs to know what `Mechanic` does.\r\n\r\n`Trip` wants to be prepared, this is reasonable. The fact that *bicycles* need to be prepared is related to *how* a Trip is prepared, but may belong to the `Mechanic` responsibilities. So Trip should be able to tell Mechanic that it wants to be prepared, then Mechanic can prepare each bicycle. By passing itself along with the request, the mechanic can return the prepared bicycles without Trip needing to know anything about how Mechanic does it. To summarize:\r\n\r\n* The public interface for `Trip` includes `bicycles`.\r\n* The public interface for `Mechanic` includes `prepare_trip` and maybe `prepare_bicycles`.\r\n* `Trip` expects to hold an object that can respond to `prepare_trip`.\r\n* `Mechanic` expect the argument of `prepare_trip` to respond to `bicycles`.\r\n\r\nAll knowledge of *how* `Mechanic` prepares a bicycle for `Trip` is contained. Trip simply holds and object to which it will send `prepare_trip` and trusts the receiveer to behave appropriately.\r\n\r\n#### Using Messages to Discover Objects\r\n\r\nThe original problem was this: A customer, in order to choose a trip, would like to see a list of available trips of appropriate difficulty, on a specific date, where rental bikes are available.\r\n\r\nIt is reasonable to assume that the `Customer` object will need to send a `suitable_trips` message. We don't currently have any classes designed to take in that message.' The application needs an object to embody the intersection of `Customer`, `Trip` and `Bicycle`. This new object will implement a `suitable_trips` method. We could create a `TripFinder` class, that contains all the knowledge of what makes a trip suitable.\r\n\r\n### Put your best (inter)face forward\r\n\r\n#### Create Explicit Interfaces\r\n\r\nMethods in the public interface should\r\n\r\n* Be explicitly identified as such\r\n* Be more about what than how\r\n* Have names that (hopefully) will not change\r\n* Take a hash as options parameter\r\n\r\nSegregate private methods from public in tests.\r\n\r\n#### Honor the Public Interfaces of Others\r\n\r\nDo your best to interact only with public interfaces.\r\n\r\n### The Law of Demeter\r\n\r\n* **The Law of Demeter** - A set of coding rules that results in loosely coupled code.\r\n\r\nDemeter restricts the objects which a method may *send* messages. It prohibits routing a message to a third object through a second object of a different type. If the objects return the same type, then there is no violation.\r\n\r\n    customer.bicycle.wheel.rotate # bad\r\n    hash.keys.sort.join(', ') # ok\r\n\r\nYou can often use delegation to avoid the dots. Ruby contains delegate and forwardable classes, and Rails includes a delegate method. Instead of the first method, you could instead have a method like `customer.ride`.\r\n\r\n## Chapter 5 - Reducing Costs with Duck Typing\r\n\r\n### Understanding Duck Typing\r\n\r\nDuck types are public interfaces that are not tied to a specific class. These objects are defined by their behavior, rather than their class.	2	2015-03-31 21:14:43.134197	2015-03-31 21:14:43.134197
85	Game Design & Prototyping	game-design-prototyping	## Chapter 1 - Thinking Like a Designer\r\n\r\nQuestions to ask as you analyze games:\r\n\r\n* Is the game difficulty appropriate?\r\n* Is the outcome strategy or chance? Does randomness help or hurt?\r\n* Are there meaningful decisions to make?\r\n* Is the game interesting during other players' turns?\r\n\r\nGo through iterative design as you modify the rules.\r\n\r\n1. Decide how you want the game to feel\r\n2. Change the rules to achieve that feeling\r\n3. Play\r\n4. Analyze success\r\n5. Repeat\r\n\r\nIf you make a big change to the game, keep that in mind and allow more time or multiple playthroughs to thoroughly test the results.\r\n\r\n"A game is the voluntary attempt to overcome unnecessary obstacles." - Bernard Suits, 1978 (*The Grasshopper*)\r\n\r\nThere could be several different goals to a game. Examples from *Passage* by Jason Rohrer\r\n\r\n* Exploration - ex. moving as far to the right as possible before dying\r\n* Achievement - ex. Earning points and finding treasure\r\n* Socialization - ex. Finding a partner.\r\n\r\nA linear story encourages empathy with a character, games allow players to experience the power and responsibility of their decisions. What makes for an *interesting* decision?\r\n\r\n* Player has multiple valid options\r\n* Options have positive and/or negative consequences\r\n* Outcome is predictable, but not guaranteed\r\n\r\nThere are certain elements designers can use to modify games:\r\n\r\n* Formal Elements - rules, procedures, resources, etc.\r\n* Dynamic Systems - Method of interaction that evolves\r\n* Conflict Structure - How players interact with each other\r\n* Uncertainty - Randomness vs determinism and player strategy\r\n* Unequal Outcome - Do players win, lose, or something else?\r\n\r\nSuits propsed the term *lusory attitude* to describe a player's willingness to follow the rules of the game in order to achieve enjoyment. One of the goals of game design is to encourage this attitude, which requires balanced, interesting and logical rules.\r\n\r\nProposed by Mary Midgley in her book *The Game Game*, these are a fe reasons for playing games:\r\n\r\n* Desire for structured conflict.\r\n* Desire to experience being someone else.\r\n* Excitement\r\n\r\n## Chapter 2 - Game Analysis Frameworks\r\n\r\n*Ludology* - Study of games and game design.\r\n\r\n### Common Frameworks\r\n\r\n* MDA - Mechanics, dynamics and aesthetics.\r\n* Formal, dramatic, and dynamic elements - FDD - Focus on concrete analytical tools. Derived much from film studies.\r\n* Elemental Tetrad - Mechanics, aesthetics, story, and technology.\r\n\r\nQuestions to ask as you analyze games:\r\n\r\n* Is the game difficulty appropriate?\r\n* Is the outcome strategy or chance? Does randomness help or hurt?\r\n* Are there meaningful decisions to make?\r\n* Is the game interesting during other players' turns?\r\n\r\nGo through iterative design as you modify the rules.\r\n\r\n1. Decide how you want the game to feel\r\n2. Change the rules to achieve that feeling\r\n3. Play\r\n4. Analyze success\r\n5. Repeat\r\n\r\nIf you make a big change to the game, keep that in mind and allow more time or multiple playthroughs to thoroughly test the results.\r\n\r\n"A game is the voluntary attempt to overcome unnecessary obstacles." - Bernard Suits, 1978 (*The Grasshopper*)\r\n\r\nThere could be several different goals to a game. Examples from *Passage* by Jason Rohrer\r\n\r\n* Exploration - ex. moving as far to the right as possible before dying\r\n* Achievement - ex. Earning points and finding treasure\r\n* Socialization - ex. Finding a partner.\r\n\r\nA linear story encourages empathy with a character, games allow players to experience the power and responsibility of their decisions. What makes for an *interesting* decision?\r\n\r\n* Player has multiple valid options\r\n* Options have positive and/or negative consequences\r\n* Outcome is predictable, but not guaranteed\r\n\r\nThere are certain elements designers can use to modify games:\r\n\r\n* Formal Elements - rules, procedures, resources, etc.\r\n* Dynamic Systems - Method of interaction that evolves\r\n* Conflict Structure - How players interact with each other\r\n* Uncertainty - Randomness vs determinism and player strategy\r\n* Unequal Outcome - Do players win, lose, or something else?\r\n\r\nSuits propsed the term *lusory attitude* to describe a player's willingness to follow the rules of the game in order to achieve enjoyment. One of the goals of game design is to encourage this attitude, which requires balanced, interesting and logical rules.\r\n\r\nProposed by Mary Midgley in her book *The Game Game*, these are a fe reasons for playing games:\r\n\r\n* Desire for structured conflict.\r\n* Desire to experience being someone else.\r\n* Excitement\r\n\r\n## Chapter 2 - Game Analysis Frameworks\r\n\r\n*Ludology* - Study of games and game design.\r\n\r\n### Common Frameworks\r\n\r\n* MDA - Mechanics, dynamics and aesthetics.\r\n* Formal, dramatic, and dynamic elements - FDD - Focus on concrete analytical tools. Derived much from film studies.\r\n* Elemental Tetrad - Mechanics, aesthetics, story, and technology.\r\n\r\n### MDA\r\n\r\nFirst proposed in 2001. Proposes that designers should first focus on aesthetics, then the dynamics and mechanics to generate them. Players, however, experience the game in the opposite order. First understanding the mechanics, then dynamics, and finally realizing the aesthetics.\r\n\r\n* Mechanics - Components of data representation and algorithms\r\n* Dynamics - Runtime behavior acting on player\r\n* Aesthetics - Desirable emotional response in the player\r\n\r\nFor example, children's games typically should create a very positive and optimisitc feeling towards the outcome. A game like Snakes and Ladders requires no skill, so children do not feel at a disadvantage. In the example for a Snakes and Ladders game in the book:\r\n\r\n* There is a ladder from 1 to 38, so if the character starts with a bad roll (1), s/he in fact has an advantage.\r\n* There are more snakes towards the end, to slow down characters that get an early lead.\r\n* The snakes and ladders balance out to give the player a feeling of a fair chance.\r\n\r\nBecause the shoots and ladders balance out, statistically they should not provide an advantage. But it makes the game far more interesting than it would be as a simple race to the finish.\r\n\r\nSome options to make the gameplay more strategic:\r\n\r\n1. Players control two pieces\r\n2. Players roll two dice, which can be assigned to either piece\r\n3. Player may use one die to move back another player\r\n4. A player may knock down an opponent to the previous row\r\n5. The inverse could also be used, a player pushes an opponent forward\r\n\r\n### Formal, Dramatic, and Dynamic Elements\r\n\r\n* Formal elements - Elements that make the game different from other media, like rules resources and boundaries\r\n* Dramatic elements - Story and premise of the game. Should help the player understand the rules\r\n* Dynamic elements - The game in motion, strategy, behavior, and relationships between game entities.\r\n\r\n#### Formal Elements\r\n\r\n* Player interaction pattern - Single vs. Multiple players. Co-op vs. free-for-all\r\n* Objective\r\n* Rules - May not be explicity written, but should be understood\r\n* Procedures - Actions dictated by the rules\r\n* Resources - Things of value in the game\r\n* Boundaries - Where does the game end/begin?\r\n* Outcome - How does the game end?\r\n\r\n#### Dramatic Elements\r\n\r\n* Premise - Game world. For example, in Monopoly you are a real-estate developer\r\n* Character - Player is typically the protagonist\r\n* Story - plot/stage\r\n\r\nPlaytesting is really the only way to fully understand the dynamics. You can make predictions, but if it is truely a unique game the emergence should be novel.\r\n\r\n	6	2015-03-31 21:14:43.188644	2015-03-31 21:14:43.188644
18	Generating an atom(rss) feed	generating-an-atom-rss-feed	You can use the `atom_feed` helper method without any additional plugins. Just create a view template\r\n\r\n    # views/articles/index.atom.builder\r\n\r\n    atom_feed do |feed|\r\n      feed.title "Superhero Articles"\r\n      feed.update @articles.maximum(:updated_at)\r\n      @articles.each do |article|\r\n        feed.entry article do |entry\r\n          entry.title article.name\r\n          entry.content article.content\r\n          entry.author do |author|\r\n            author.name article.author\r\n          end\r\n        end\r\n      end\r\n    end\r\n\r\nYou can then link to the feed\r\n\r\n    = link_to image_tag('feed-icon.png'), articles_url(format: "atom")\r\n\r\nYou should also use the `auto_discovery_link_tag` helper at the top of the index file.\r\n\r\n    # application.html\r\n\r\n    = yield(:head)\r\n\r\n    # articles/index.html\r\n\r\n    content_for :head, auto_discovery_link_tag(:atom, articles_url(format: "atom"))\r\n\r\nIf you want the feed to be private, rails provides some methods for basic http authentication. Check out the rails guides on HttpAuthentication::Basic\r\n	3	2015-03-31 21:14:39.726166	2015-03-31 21:14:39.726166
19	Vim	vim	Search for '$'\r\n\r\n    /[$]	1	2015-03-31 21:14:39.776919	2015-03-31 21:14:39.776919
20	Make it Snappy	make-it-snappy	## Generate App\r\n\r\nIn the console\r\n\r\n  rails new makeitsnappy\r\n  rails g controller Questions index\r\n\r\nIn `config/routes.rb`\r\n\r\nChange generated route to\r\n\r\n  root to: 'questions#index'\r\n\r\n## Layout CSS\r\n\r\n  #container\r\n    %header\r\n      = link_to 'Make It Snappy Q&A', root_path\r\n\r\n    %nav\r\n      %ul\r\n        %li= link_to 'Home', root_path\r\n    #content\r\n      - flash.each do |key, value|\r\n        %p#message= value\r\n      = yield\r\n\r\n    %footer\r\n      &copy; Make It Snappy Q&A\r\n      =Date.today.year\r\n\r\n## User Model Validation\r\n\r\n  rails g model User username password_digest\r\n\r\nTo make sure user names are unique:\r\n\r\n  def change\r\n    create_table :users do |t|\r\n      t.string :username\r\n      t.string :password_digest\r\n\r\n      t.timestamps\r\n    end\r\n\r\n    add_index :users, :username, unique: true\r\n  end\r\n\r\nDefine your strong parameters in the controller\r\n\r\n  private\r\n    # Use callbacks to share common setup or constraints between actions.\r\n    def set_post\r\n      @post = Post.find(params[:id])\r\n    end\r\n\r\n    # Never trust parameters from the scary internet, only allow the white list through.\r\n    def post_params\r\n      params.require(:post).permit(:title, :body, :user_id)\r\n    end\r\n\r\nValidate your user model and include `has_secure_password`\r\n\r\n  has_secure_password\r\n\r\n  validates :username, presence: true, uniqueness: { case_sensitive: false },\r\n                        length: { in: 4..12 },\r\n                        format: { with: /^[a-zA-Z][a-zA-Z0-9]*$/},\r\n                        message: 'Can only contain alphanumeric characters'\r\n  validates :password, length: { in: 4..8 }\r\n  validates :password_confirmation, length: { in: 4..8 }\r\n\r\n## Register Users\r\n\r\n  rails g controller Users new\r\n\r\n## Logging In\r\n\r\n  rails g controller Sessions new\r\n\r\n## Logging Out\r\n\r\n## Question Model\r\n\r\n  rails g model Question user:references body:string solved:boolean\r\n\r\n  rails c --sandbox\r\n\r\n## Asking Questions\r\n\r\n## Paginating Unsolved Questions\r\n\r\nRails magic:\r\n\r\n  <%= render @questions %>\r\n\r\nThis will automatically loop through @questions as a _questions.html.erb\r\n\r\n  <li>\r\n    <%= truncate(question.body, length: 35) %> by <%= question.user.username.capitalize %>\r\n  </li>\r\n\r\n\r\n\r\n## Viewing Individual Questions\r\n\r\n## Paginating Logged In Users\r\n\r\n## Editing Questions\r\n\r\n## Creating Answer Model\r\n\r\n  rails g model Answer user:references question:references\r\n\r\n## Allowing Users to Answer Questions\r\n\r\n  rails g controller Answers\r\n\r\n## Displaying Answers for Questions\r\n\r\n## Creating a Search Form\r\n\r\n## Adding a Touch of CoffeeScript\r\n\r\n## Conclusion\r\n	3	2015-03-31 21:14:39.828297	2015-03-31 21:14:39.828297
21	Multi-Tenancy with Rails	multi-tenancy-with-rails	## 2 Laying the Foundations\r\n\r\nGenerate the engine\r\n\r\n    rails plugin new subscribem --full --mountable --dummy-path spec/dummy --skip-test-unit\r\n\r\nAdd gems as dependencies to the `.gemspec` file\r\n\r\n    s.add_development_dependency 'rspec-rails', '2.14.0'\r\n    s.add_development_dependency 'capybara', '2.1.0'\r\n\r\nInstall the bundle, then install rspec (from engine root)\r\n\r\n    rails g rspec:install\r\n\r\nModify the `spec/spec_helper.rb` to point to the correct location for the environment and support files.\r\n(Also add capybara)\r\n\r\n    require 'capybara/rspec'\r\n    require File.expand_path("../dummy/config/environment", __FILE__)\r\n    \r\n    Dir[File.dirname(__FILE__) + "/support/**/*.rb"].each {|f| require f}\r\n\r\nYou'll want to make sure that the engine always uses Rspec, so in the `lib/subscribem/engine.rb`\r\nfile add this to the generators:\r\n\r\n    module Subscribem\r\n      class Engine < Rails::Engine\r\n        ...\r\n        config.generators do |g|\r\n          g.test_framework :rspec, view_specs: false\r\n        end\r\n      end\r\n    end\r\n\r\nThe engine will take signups for new accounts, so we'll test for the feature\r\n\r\n    # spec/features/accounts/sign_up_spec.rb\r\n\r\n    require 'spec_helper'\r\n    feature 'Accounts' do\r\n      scenario "creating an account" do\r\n        visit subscribem.root_path\r\n        click_link 'Account Sign Up'\r\n        fill_in 'Name', with: 'Test'\r\n        click_button 'Create Account'\r\n        success_message = 'Your account has been successfully created.'\r\n        page.should have_content(success_message)\r\n      end\r\n    end\r\n\r\nThe first error you will see is an undfined `root_path`. So define one in the routes\r\n\r\n    Subscribem::Engine.routes.draw do\r\n      root "dashboard#index"\r\n    end\r\n\r\nThen create the controller for this\r\n\r\n    rails g controller dashboard\r\n\r\nIn the dashboard view file\r\n\r\n    # /views/subscribem/dashboard/index.html.erb\r\n\r\n    <%= link_to "Account Sign Up", sign_up_path %>\r\n\r\nThere's no link to sign up yet, so create a route, model and controller\r\n\r\n    # routes.rb\r\n\r\n    get '/sign_up' => 'accounts#new', as: :sign_up\r\n    post '/accounts' => 'accounts#create', as: :accounts\r\n\r\n    # Command Line\r\n\r\n    rails g controller accounts\r\n    rails g model account name:string\r\n    RAILS_ENV=test rake db:migrate\r\n\r\n    # views/subscribem/accounts/new.html\r\n\r\n    <h2>Sign Up</h2>\r\n    <%= form_for(@account) do |account| %>\r\n      <p>\r\n        <%= account.label :name %><br>\r\n        <%= account.text_field :name %>\r\n      </p>\r\n      <%= account.submit %>\r\n    <% end %>\r\n\r\n    # views/layouts/subscribem/application.html\r\n\r\n    <% flash.each do |k, v| %>\r\n      <div class='flash <%= k %>'><%= v %></div>\r\n    <% end %>\r\n  \r\n    # controllers/subscribem/accounts_controller.rb\r\n\r\n    def new\r\n      @account = Subscribem::Account.new\r\n    end\r\n\r\n    def create\r\n      @account = Subscribem::Account.create(account_params)\r\n      flash[:success] = "Your account has been successfully created."\r\n      redirect_to subscribem.root_url\r\n    end\r\n\r\n    protected\r\n\r\n      def account_params\r\n        params.require(:account).permit(:name)\r\n      end\r\n\r\nUsers can now create an account.\r\n\r\n### Associating Accounts to Users\r\n\r\nA separate users model will store user information and accounts will be related to it.\r\n\r\n    fill_in 'Name', with: 'Test'\r\n    fill_in 'Email', with: 'subscribe@example.com'\r\n    password_field_id = 'account_owner_attributes_password'\r\n    fill_in password_field_id, with: 'password'\r\n    fill_in 'Password confirmation', with: 'password'\r\n    click_button 'Create Account'\r\n    page.should have_content('Signed in as subscribe@example.com')\r\n\r\nBecause there are two fields with `Password` in the title, we have to use the `password_field_id`\r\nSo that Capybara knows exactly which one to check. Replace the the previous `page.should` as the final test.\r\n\r\nTo fill in the account owner information, add a `fields_for` block to the form\r\n\r\n    # views/subscribem/accounts/new.html\r\n\r\n    <%= account.fields_for :owner do |owner| %>\r\n      <p>\r\n        <%= owner.label :email %><br>\r\n        <%= owner.email_field :email %>\r\n      </p>\r\n      <p>\r\n        <%= owner.label :password %><br>\r\n        <%= owner.password_field :password %>\r\n      </p>\r\n      <p>\r\n        <%= owner.label :password_confirmation %>\r\n        <%= owner.password_field :password_confirmation %>\r\n      </p>\r\n    <% end %>\r\n\r\n    # models/subscribem/account.rb\r\n\r\n    belongs_to :owner, class_name: 'Subscribem::User'\r\n    accepts_nested_attributes_for :owner\r\n\r\n    # controllers/subscribem/accounts_controller.rb\r\n\r\n    def new\r\n      ...\r\n      @account.build_owner\r\n    end\r\n\r\n    # Command Line\r\n\r\n    rails g migration add_owner_id_to_subscribem_accounts owner_id:integer\r\n    RAILS_ENV=test rake db:migrate\r\n\r\nCreate the user model and migration\r\n\r\n    # Command Line\r\n\r\n    rails g model user email:string password_digest:string\r\n\r\n    # models/subscribem/user.rb\r\n\r\n    has_secure_password\r\n\r\n    # subscribem.gemspec\r\n\r\n    s.add_dependency 'bcrypt-ruby', '3.0.1'\r\n\r\n    # Command Line\r\n\r\n    bundle install\r\n    RAILS_ENV=test rake db:migrate\r\n\r\n### Authenticating with Warden\r\n\r\nDevise comes with a lot of extra features we wont be needing, so we'll just use the\r\nfoundation, Warden. Warden uses *middleware* to set up a Warden *proxy object* to manage\r\nthe user's session. You can call methods on this *proxy object* to authenticate a user.\r\n\r\n    # subscribem.gemspec\r\n\r\n    s.add_dependency "warden", "1.2.3"\r\n\r\nInstall the bundle, then `require 'warden'` from the `lib/subscribem/engine.rb` file. You will\r\nalso need to add an initializer.\r\n\r\n*NOTE:* I'm not sure if the initializer is in the right spot here, but it probably is.\r\n\r\n    require 'warden'\r\n\r\n    module Subscribem\r\n      class Engine < ::Rails::Engine\r\n        isolate_namespace Subscribem\r\n\r\n        config.generators do |g|\r\n          g.test_framework :rspec, :view_specs => false\r\n        end\r\n\r\n        initializer 'subscribem.middleware.warden' do\r\n          Rails.application.config.middleware.use Warden::Manager\r\n        end\r\n      end\r\n    end\r\n\r\nThis middleware adds a key called `warden` to the request's environment object. So now the\r\nwarden *proxy object* is available within our controller as `request.env['warden']`.\r\n\r\nTo automatically sign in a user when the account is created:\r\n\r\n    def create\r\n      @account = Subscribem::Account.create(account_params)\r\n      env['warden'].set_user(@account.owner.id, scope: :user)\r\n      env['warden'].set_user(@account.id, scope: :account)\r\n      flash[:success] = 'Your account has been successfully created.'\r\n      redirect_to subscribem.root_url\r\n    end\r\n\r\nThe *proxy objects* that we create here can be accessed with:\r\n\r\n    Subscribem::Account.find(env['warden'].user(scope: :account))\r\n    Subscribem::User.find(env['warden'].user(scope: :user))\r\n\r\nTo make it easier to access these variables, we'll define some helper methods in the \r\napplication controller.\r\n\r\n    helper_method [:current_account, :current_user, :user_signed_in?]\r\n    def current_account\r\n      if user_signed_in?\r\n        @current_account ||= begin\r\n          account_id = env['warden'].user(scope: :account)\r\n          Subscribem::Account.find(account_id)\r\n        end\r\n      end\r\n    end\r\n    def current_user\r\n      if user_signed_in?\r\n        @current_user ||= begin\r\n          user_id = env['warden'].user(scope: :user)\r\n          Subscribem::User.find(user_id)\r\n        end\r\n      end\r\n    end\r\n    def user_signed_in?\r\n      env['warden'].authenticated?(:user)\r\n    end\r\n\r\nBecause we're using the `helper_method` method, these are all available in the view as well.\r\n\r\n    # views/layouts/subscribem/application.html\r\n\r\n    <% if user_signed_in? %>\r\n      Signed in as <%= current_user.email %>\r\n    <% end %>\r\n\r\nWe're using nested attributes in the account creation form, so we need to modify the \r\nstrong parameters\r\n\r\n    def account_params\r\n      params.require(:account).permit(:name, {owner_attributes: [:email, :password, :password_confirmation]})\r\n    end\r\n\r\n### Adding subdomains to accounts\r\n\r\nThe accounts will be separated by subdomains, so we'll test for that. Below the `fill_in 'Name'` line in `sign_up_spec`:\r\n\r\n    fill_in 'Subdomain', with: 'test'\r\n\r\nThe user should be redirected to this subdomain when registering, so we should add this as the\r\nfinal line of the test to:\r\n\r\n    page.current_url.should == 'http://test.example.com/subscribem/'\r\n\r\nWe'll need to add this new field to our accounts form and model\r\n\r\n    # views/subscribem/accounts/new.html\r\n\r\n    <p>\r\n      <%= account.label :subdomain %><br>\r\n      <%= account.text_field :subdomain %>\r\n    </p>\r\n\r\n    # Command Line\r\n\r\n    rails g migration add_subdomain_to_subscribem_accounts subdomain:string\r\n\r\n    # db/migrate/add_subdomain_to_subscribem_accounts\r\n\r\n    def change\r\n      add_column :subscribem_accounts, :subdomain, :string\r\n      add_index :subscribem_accounts, :subdomain\r\n    end\r\n\r\n    # Command Line\r\n\r\n    RAILS_ENV=test rake db:migrate\r\n\r\n    # controllers/subscribem/accounts_controller\r\n\r\n    def account_params\r\n      ...permit(:name, :subdomain...\r\n\r\nThe `accounts_controller` create action should now redirect to the subdomain\r\n\r\n    redirect_to subscribem.root_url(subdomain: @account.subdomain)\r\n\r\nBecause it is redirecting to a subdomain, the flash message is broken. Flash messages are\r\nonly stored for the domain they are generated at. To fix this, the domain and subdomain\r\nshould use the same session store. We'll need to configure this in the dummy application.\r\n\r\n    # spec/dummy/config/initializers/session_store.rb\r\n\r\n    Dummy::Application.config.session_store :cookie_store,\r\n      key: '_dummy_session',\r\n      domain: 'example.com'\r\n\r\nThis will store all session information in the `example.com` domain. Now we'll write a test\r\nto ensure the subdomain is unique\r\n\r\n    # spec/features/accounts/sign_up_spec.rb\r\n\r\n    scenario "Ensure subdomain uniqueness" do\r\n      Subscribem::Account.create!(subdomain: 'test', name: 'Test')\r\n      visit subscribem.root_path\r\n      click_link 'Account Sign Up'\r\n      fill_in 'Name', with: 'Test'\r\n      fill_in 'Subdomain', with: 'test'\r\n      fill_in 'Email', with: 'subscribe@example.com'\r\n      fill_in 'Password', with: 'password'\r\n      fill_in 'Password confirmation', with: 'password'\r\n      click_button 'Create Account'\r\n      page.current_url.should == 'http://www.example.com/subscribem/accounts'\r\n      page.should have_content('Sorry, your account could not be created.')\r\n      page.should have_content('Subdomain has already been taken.')\r\n    end\r\n\r\n*NOTE:* I'm not quite sure why `example.com` works in this cases, is that rspec or capybara?\r\n\r\nTo adjust for validation, add some logic to the controller and validation to the model\r\n\r\n    # controllers/subscribem/accounts_controller.rb\r\n\r\n    def create\r\n      @account = Subscribem::Account.create(account_params)\r\n      if @account.save\r\n        env['warden'].set_user(@account.owner.id, scope: :user)\r\n        env['warden'].set_user(@account.id, scope: :account)\r\n        flash[:success] = 'Your account has been successfully created.'\r\n        redirect_to subscribem.root_url(subdomain: @account.subdomain)\r\n      else\r\n        flash[:error] = 'Sorry, your account could not be created.'\r\n        render :new\r\n      end\r\n    end\r\n\r\n    # models/subscribem/account.rb\r\n\r\n    validates :subdomain, presence: true, uniqueness: true\r\n\r\nWe'll use the `dynamic_form` gem to generate the appropriate errors.\r\n\r\n    # subscribem.gemspec\r\n\r\n    s.add_dependency 'dynamic_form', '1.1.4'\r\n\r\n    # lib/subscribem/engine.rb\r\n\r\n    require 'dynamic_form'\r\n\r\nChange the start of the form definition in the new account form\r\n\r\n    <%= form_for(@account) do |account| %>\r\n      <%= account.error_messages %>\r\n\r\nWe will restrict subdomains that meet certain conditions, to test for this:\r\n\r\n    scenario "Subdomain with restricted name" do\r\n      visit subscribem.root_path\r\n      click_link 'Account Sign Up'\r\n      fill_in 'Name', with: 'Test'\r\n      fill_in 'Subdomain', with: 'admin'\r\n      fill_in 'Email', with: 'subscribe@example.com'\r\n      fill_in 'Password', with: 'password'\r\n      fill_in 'Password confirmation', with: 'password'\r\n      click_button 'Create Account'\r\n      page.current_url.should == 'http://www.example.com/subscribem/accounts'\r\n      page.should have_content('Sorry, your account could not be created.')\r\n      page.should have_content('Subdomain is not allowed. Please choose another subdomain.')\r\n    end\r\n\r\nWe'll enforce this restriction in the account model:\r\n\r\n    EXCLUDED_SUBDOMAINS = %w(admin)\r\n    validates_exclusion_of :subdomain, in: EXCLUDED_SUBDOMAINS,\r\n      message: 'is not allowed. Please choose another subdomain.'\r\n\r\nIn order to make sure the user doesn't enter an alternative in uppercase that might get through,\r\nwe will use a `before_validation` method to convert all the letters to lowercase.\r\n\r\n    before_validation do\r\n      self.subdomain = subdomain.to_s.downcase     \r\n    end\r\n\r\nThen we will validate the format to only allow available characters\r\n\r\n    format: { with: /\\A[\\w\\-]+\\Z/i,\r\n        message: 'is not allowed. Please choose another subdomain.' }\r\n\r\nYou can combine all the validations:\r\n\r\n    validates :subdomain,\r\n      presence: true,\r\n      uniqueness: true,\r\n      format: { with: /\\A[\\w\\-]+\\Z/i,\r\n        message: 'is not allowed. Please choose another subdomain.' },\r\n      exclusion: { in: EXCLUDED_SUBDOMAINS,\r\n        message: 'is not allowed. Please choose another subdomain.' }\r\n\r\n### Subdomain authentication\r\n\r\nWe'll add a sign in page on the subdomain for users of the account. We'll test for this with\r\na new spec file\r\n\r\n    # spec/features/users/sign_in_spec.rb\r\n\r\n    require 'spec_helper'\r\n\r\n    feature 'User sign in' do\r\n      let!(:account) { FactoryGirl.create(:account) }\r\n      let(:sign_in_url) { "http://#{account.subdomain}.example.com/sign_in" }\r\n      let(:root_url) { "http://#{account.subdomain}.example.com/" }\r\n      within_account_subdomain do\r\n        scenario "signs in as an account owner successfully" do\r\n          visit root_url\r\n          page.current_url.should == sign_in_url\r\n          fill_in "Email", with: account.owner.email\r\n          fill_in "Password", with: "password"\r\n          click_button "Sign in"\r\n          page.should have_content("You are now signed in")\r\n          page.current_url.should == root_url\r\n        end\r\n      end\r\n    end\r\n\r\nThis test will require Factory Girl to set up an account with an owner. It also uses\r\nthe method `within_account_subdomain`, which will scope Capybara's request to within the\r\nsubdomain. It will alter Capybara's `default_host` for the duration of the block then reset\r\nwhen it's done.\r\n\r\n    # spec/support/subdomain_helpers.rb\r\n\r\n    module SubdomainHelpers\r\n      def within_account_subdomain\r\n        let(:subdomain_url) { "http://#{account.subdomain}.example.com" }\r\n        before { Capybara.default_host = subdomain_url }\r\n        after { Capybara.default_host = "http://www.example.com" }\r\n        yield\r\n      end\r\n    end\r\n\r\nTo use this module, `extend` it from inside the describe block\r\n\r\n    feature 'User sign in' do\r\n      extend SubdomainHelpers\r\n\r\nYou'll also need the factory girl gem\r\n\r\n    # subscribem.gemspec\r\n  \r\n    s.add_development_dependency 'factory_girl', '4.1.0'\r\n\r\n    # spec/spec_helper.rb\r\n\r\n    require 'factory_girl'\r\n\r\n    # spec/support/factories/account_factory.rb\r\n\r\n    FactoryGirl.define do\r\n      factory :account, class: Subscribem::Account do\r\n        sequence(:name) { |n| "Test Account ##{n}" }\r\n        sequence(:subdomain) { |n| "test#{n}" }\r\n        association :owner, factory: :user\r\n      end\r\n    end\r\n\r\n    # spec/support/factories/user_factory.rb\r\n\r\n    FactoryGirl.define do\r\n      factory :user, class: Subscribem::User do\r\n        sequence(:email) { |n| "test#{n}@example.com" }\r\n        password "password"\r\n        password_confirmation "password"\r\n      end\r\n    end\r\n\r\nThe dummy project still has the Subscribem::Engine mounted to `/subscrem`. Change this to the `/`\r\npath, which breaks the other tests so you'll need to change those too.\r\n\r\n    # spec/dummy/config/routes.rb\r\n\r\n    mount Subscribem::Engine => '/'\r\n\r\n    # any spec\r\n\r\n    page.current_url.should == 'http://www.example.com/accounts'\r\n    page.current_url.should == 'http://test.example.com/'\r\n\r\nThe app still isn't redirecting people to the signin URL. We'll create a *subdomain constraint*\r\nso that `test.example.com/sign_in` is routed differently than `example.com/sign_in`. We'll do this\r\nby routing to controllers within another namespace, separately from the controllers responsible\r\nfor general account actions.\r\n\r\n    # config/routes.rb\r\n\r\n    constraints(Subscribem::Constraints::SubdomainRequired) do\r\n    end\r\n\r\n    # lib/subscribem/constraints/subdomain_required.rb\r\n\r\n    module Subscribem\r\n      module Constraints\r\n        class SubdomainRequired\r\n          def self.matches?(request)\r\n            request.subdomain.present? && request.subdomain != "www"\r\n          end\r\n        end\r\n      end\r\n    end\r\n\r\nThis constraint checks the incomming request object. If it's a subdomain (except www) it\r\nreturns true. The `request` object comes from ActionDispatch::Request, which is available\r\nin controllers. The constraint block will then direct traffic\r\n\r\n    # config/routes.rb\r\n\r\n    require 'subscribem/constraints/subdomain_required'\r\n\r\n    constraints(Subscribem::Constraints::SubdomainRequired) do\r\n      scope module: 'account' do\r\n        root to: 'dashboard#index', as: :account_root\r\n      end\r\n    end\r\n\r\nThis scopes routes to the Subscribem::Account namespace, with the `scope module: account` method.\r\nInside the scope block is a root route that will redirect to the sign in path, because\r\nthe user isn't authenticated. To make the constraint available, we need to require\r\nthe file containing it.\r\n\r\nGenerate the controller to process this route.\r\n\r\n    rails g controller account/dashboard\r\n\r\nTo redirect unauthenticated users, add another method to the application controller\r\n\r\n    def authenticate_user!\r\n      unless user_signed_in?\r\n        flash[:notice] = "Please sign in."\r\n        redirect_to '/sign_in'\r\n      end\r\n    end\r\n\r\nAdd this method as a before_filter:\r\n\r\n    # controllers/subscribem/account/dashboard_controller.rb\r\n\r\n    before_filter :authenticate_user!\r\n\r\n    # views/subscribem/account/dashboard/index.html\r\n\r\n    Your account's dashboard. Coming soon.\r\n\r\nThen you'll create a sign in page. Within the constraint in your routes file add:\r\n\r\n    get '/sign_in' => 'sessions#new'\r\n\r\nGenerate a controller for this route:\r\n\r\n    rails g controller account/sessions\r\n\r\nThen prepare the controller and form\r\n\r\n    # controllers/subscribem/account/sessions_controller.rb\r\n\r\n    def new\r\n      @user = User.new\r\n    end\r\n\r\n    # views/subscribem/account/sessions/new.html\r\n\r\n    <h2>Sign in</h2>\r\n    <%= form_for @user, url: sessions_url do |f| %>\r\n      <p>\r\n        <%= f.label :email %><br>\r\n        <%= f.email_field :email %>\r\n      </p>\r\n      <p>\r\n        <%= f.label :password %><br>\r\n        <%= f.password_field :password %>\r\n      </p>\r\n      <p>\r\n        <%= f.submit "Sign in" %>\r\n      </p>\r\n    <% end %>\r\n\r\n    # config/routes.rb\r\n\r\n    scope module: 'account' do\r\n      root to: 'dashboard#index', as: :account_root\r\n      get '/sign_in' => 'sessions#new'\r\n      post '/sign_in' => 'sessions#create', as: :sessions\r\n    end\r\n\r\nWe'll use a warden *strategy* to authenticate through a subdomain. Warden will use\r\nall of the strategies it knows to authenticate a request. We can add a strategy to\r\nWarden by changing `Rails.application.config.middleware.use Warden::Manager` to:\r\n\r\n    # lib/subscribem/engine.rb\r\n\r\n    Rails.application.config.middleware.use Warden::Manager do |manager|\r\n      manager.default_strategies :password\r\n    end\r\n\r\nThis strategy will need an `authenticate!` and `valid?` method to qualify as a valid\r\nstrategy.\r\n\r\n    # config/initializers/warden/strategies/password.rb\r\n\r\n    Warden::Strategies.add(:password) do\r\n      def valid?\r\n        host = request.host\r\n        subdomain = ActionDispatch::Http::URL.extract_subdomains(host, 1)\r\n        subdomain.present? && params['user']\r\n      end\r\n      def authenticate!\r\n        u = Subscribem::User.find_by_email(params["user"]["email"])\r\n        if u.nil?\r\n          fail!\r\n        else\r\n          if u.authenticate(params['user']['password'])\r\n            success!(u)\r\n          else\r\n            fail!\r\n          end\r\n        end\r\n      end\r\n    end\r\n\r\nThis strategy will only be valid if there is a subdomain present and the params['user'] hash is not nil.\r\nIn this case, the `request` object is actually a `Rack::Request` not an `ActionDispatch::Request`. Which is\r\nwhy to extract the subdomains from this request we use the `ActionDispatch::Http::URL.extract_subdomains(host, 1).\r\nThat's also why we use strings instead of symbols in the params.\r\n\r\nThis strategy will be attempted with the `authenticate` method that can be called from the Warden\r\n*proxy object*.\r\n\r\n    # controllers/subscribem/account/sessions_controller.rb\r\n\r\n    def create\r\n      if env['warden'].authenticate(scope: :user)\r\n        flash[:notice] = 'You are now signed in.'\r\n        redirect_to root_path\r\n      end\r\n    end\r\n\r\n#### Restricting sign in by account\r\n\r\nSo far we haven't restricted users to an account. In order to do this, we'll create a new\r\ntable to link accounts and users. We'll test this now.\r\n\r\n    # spec/features/users/sign_in_spec.rb\r\n\r\n    scenario 'cannot sign in if not a part of this subdomain' do\r\n      other_account = FactoryGirl.create(:account)\r\n      visit subscribem.root_url(subdomain: account.subdomain)\r\n      page.current_url.should == sign_in_url\r\n      page.should have_content("Please sign in.")\r\n      fill_in "Email", with: other_account.owner.email\r\n      fill_in "Password", with: 'password'\r\n      click_button 'Sign in'\r\n      page.should have_content("Invalid email or password.")\r\n      page.current_url.should == sign_in_url\r\n    end\r\n\r\nWe'll modify our password strategy in order to get this working.\r\n\r\n    Warden::Strategies.add(:password) do\r\n      def subdomain\r\n        ActionDispatch::Http::URL.extract_subdomains(request.host, 1)\r\n      end\r\n      def valid?\r\n        subdomain.present? && params['user']\r\n      end\r\n      def authenticate!\r\n        account = Subscribem::Account.find_by(subdomain: subdomain)\r\n        if account\r\n          u = Subscribem::User.find_by(email: params["user"]["email"])\r\n          if u.nil?\r\n            fail!\r\n          else\r\n            u.authenticate(params['user']['password']) ? success!(u) : fail!\r\n          end\r\n        else\r\n          fail!\r\n        end\r\n      end\r\n    end\r\n\r\nWe'll use a `has_many :through` association to link the tables.\r\n\r\n    # models/subscribem/account.rb\r\n\r\n    has_many :members, class_name: 'Subscribem::Member'\r\n    has_many :users, through: :members\r\n\r\nThe class name needs to be specified because of the `Subscribem` namespace. Then create the\r\nbridge table\r\n\r\n    rails g model member account_id:integer user_id:integer\r\n\r\nWe'll need to define the associations so they can find each other\r\n\r\n    # models/subscribem/member.rb\r\n\r\n    class Member < ActiveRecord::Base\r\n      belongs_to :account, class_name: 'Subscribem::Account'\r\n      belongs_to :user, class_name: 'Subscribem::User'\r\n    end\r\n\r\nRun `RAILS_ENV=test rake db:migrate` to migrate the database.\r\n\r\nNow we will associate an account owner with an account after the account has been created.\r\nThis could be done with an `after_create` callback, but that would mean an account always needs\r\nan owner. When setting up our test, however, we will use an `after_create` callback because\r\nit will be needed for testing.\r\n\r\n    FactoryGirl.define do\r\n      factory :account, class: Subscribem::Account do\r\n        sequence(:name) { |n| "Test Account ##{n}" }\r\n        sequence(:subdomain) { |n| "test#{n}" }\r\n        association :owner, factory: :user\r\n        after(:create) do |account|\r\n          account.users << account.owner\r\n        end\r\n      end\r\n    end\r\n\r\nNow an account will automatically create a user, which is the account owner. We should also create\r\na model method to create an account and associate its owner with its list of users. To test this:\r\n\r\n    # spec/models/subscribem/account_spec.rb\r\n\r\n    require 'spec_helper'\r\n\r\n    describe Subscribem::Account do\r\n      it "can be created with an owner" do\r\n        params = {\r\n          name: 'Test Account',\r\n          subdomain: 'test',\r\n          owner_attributes: {\r\n            email: 'user@example.com',\r\n            password: 'password',\r\n            password_confirmation: 'password'\r\n          }\r\n        }\r\n        account = Subscribem::Account.create_with_owner(params)\r\n        account.should be_persisted\r\n        account.users.first.should == account.owner\r\n      end\r\n\r\n      it 'cannot create an account without a subdomain' do\r\n        account = Subscribe::Account.create_with_owner\r\n        account.should_not be_valid\r\n        account.users.should be_empty\r\n      end\r\n    end\r\n\r\nThe corresponding method will create an account and associate its owner with a list of users\r\nfor that account, but only if it is valid.\r\n\r\n    # app/models/subscribem/account.rb\r\n\r\n    def self.create_with_owner(params={})\r\n      account = new(params)\r\n      if account.save\r\n        account.users << account.owner\r\n      end\r\n      account\r\n    end\r\n\r\n### 2.7 Handling user Signup\r\n\r\nNow we need a way for users to sign up to an account. Here's a test for that:\r\n\r\n    # spec/features/users/sign_up_spec\r\n\r\n    require 'spec_helper'\r\n    feature 'User signup' do\r\n      let!(:account) { FactoryGirl.create(:account) }\r\n      let(:root_url) { "http://#{account.subdomain}.example.com/" }\r\n      scenario "under an account" do\r\n        visit root_url\r\n        page.current_url.should == root_url + "sign_in"\r\n        click_link "New User?"\r\n        fill_in "Email", with: 'user@example.com'\r\n        fill_in 'Password', with: 'password'\r\n        fill_in 'Password confirmation', with: 'password'\r\n        click_button 'Sign up'\r\n        page.should have_content('You have signed up successfully.')\r\n        page.current_url.should == root_url\r\n      end\r\n    end\r\n\r\nThis will require a link:\r\n\r\n    # app/views/subscribem/account/sessions/new.html\r\n\r\n    <%= link_to "New User?", sign_up_url %>\r\n\r\nRight now the route is going to the account sign up page, but we want to sign up just for\r\nthis particular account. So we'll add a `/sign_up` request within the accounts constraint\r\n\r\n    # config/routes.rb\r\n\r\n    constraints(Subscribem::Constraints::SubdomainRequired) do\r\n      scope module: 'account' do\r\n        root to: 'dashboard#index', as: :account_root\r\n        get '/sign_in' => 'sessions#new'\r\n        post '/sign_in' => 'sessions#create', as: :sessions\r\n        get '/sign_up' => 'users#new', as: :user_sign_up\r\n      end\r\n    end\r\n\r\nWe'll generate a controller with: `rails g controller account/users`. In that controller:\r\n\r\n    # app/controllers/subscribem/account/users_controller.rb\r\n\r\n    def new\r\n      @user = Subscribem::User.new\r\n    end\r\n\r\nWe'll break out this signup form into a partial. So take the form fields for email, password, and\r\npassword confirmation from `app/views/subscribem/accounts/new.html` and put them in `subscribem/account/users/form.html`\r\n\r\n    # app/views/subscribem/accounts/new.html\r\n\r\n    <%= render "subscribem/account/users/form", user: owner %>\r\n\r\n    # app/views/subscribem/account/users/form.html\r\n\r\n    <p>\r\n      <%= user.label :email %><br>\r\n      <%= user.email_field :email %>\r\n    </p>\r\n    <p>\r\n      <%= user.label :password %><br>\r\n      <%= user.password_field :password %>\r\n    </p>\r\n    <p>\r\n      <%= user.label :password_confirmation %>\r\n      <%= user.password_field :password_confirmation %>\r\n    </p>\r\n\r\n    # app/views/subscribem/account/users/new.html\r\n\r\n    <h2>Sign Up</h2>\r\n    <%= form_for(@user, url: do_user_sign_up_url) do |user| %>\r\n      <%= render "subscribem/account/users/form", user: user %>\r\n      <%= user.submit "Sign up" %>\r\n    <% end %>\r\n\r\nThen create the route and controller action to process this form:\r\n\r\n    # config/routes.rb\r\n\r\n    post '/sign_up' => 'users#create', as: :do_user_sign_up\r\n\r\n    # app/controllers/subscribem/account/users_controller.rb\r\n\r\n    def create\r\n      account = Subscribem::Account.find_by!(subdomain: request.subdomain)\r\n      user = account.users.create(user_params)\r\n      force_authentication!(account, user)\r\n      flash[:success] = 'You have signed up successfully.'\r\n      redirect_to root_path\r\n    end\r\n\r\n    private\r\n      def user_params\r\n        params.require(:user).permit(:email, :password, :password_confirmation)\r\n      end\r\n\r\nThis `force_authentication!` method will be placed in the application_controller, since it\r\nis used in more than one controller.\r\n\r\n    # controllers/subscribem/application_controller\r\n\r\n    def force_authentication!(account, user)\r\n      env['warden'].set_user(user.id, scope: :user)\r\n      env['warden'].set_user(account.id, scope: :account)\r\n    end\r\n\r\n    # controllers/subscribem/accounts_controller\r\n\r\n    force_authentication!(@account, @account.owner)\r\n\r\n## 3 Applying Account Scoping\r\n\r\nWe're going to scope specific resources within our application to accounts. This can be done by setting\r\nan `account_id` field for every database table that requires scoping. An alternative requires PostgreSQL\r\nand is more complex, but provides neater code. We'll use a PostgreSQL feature called *schemas* as well as\r\nthe gem *Apartment*, which makes dealing with PostgreSQL schemas a lot easier. Then we'll add\r\nfeatures to sign up and join accounts that already exist.\r\n\r\n### Scoping by a databasefield\r\n\r\nThe `account_id` on required tables will need to be checked every time the user is logged\r\ninto an account. It's important to make sure ALL required tables get this `account_id`,\r\nor restricted areas may be accessible. We'll test for this by creating two accounts and\r\ntwo users, and make sure they can't access each other.\r\n\r\n    # spec/features/accounts/scoping_spec.rb\r\n\r\n    require 'spec_helper'\r\n\r\n    feature "Account scoping" do\r\n\r\n      let!(:account_a) { FactoryGirl.create(:account) }\r\n      let!(:account_b) { FactoryGirl.create(:account) }\r\n      before do\r\n        Thing.create(name: "Account A's Thing", account: account_a)\r\n        Thing.create(name: "Account B's Thing", account: account_b)\r\n      end\r\n\r\n      scenario "displays only account A's records" do\r\n        sign_in_as(user: account_a.owner, account: account_a)\r\n        visit '/things'\r\n        page.should have_content("Account A's Thing")\r\n        page.should_not have_content("Account B's Thing")\r\n      end\r\n\r\n      scenario "displays only account B's records" do\r\n        sign_in_as(user: account_b.owner, account: account_b)\r\n        visit '/things'\r\n        page.should have_content("Account B's Thing")\r\n        page.should_not have_content("Account A's Thing")\r\n      end\r\n      \r\n    end\r\n\r\nThe `Thing` will be a model that manages objects scoped to an account. This will be\r\noutside the engine.\r\n\r\n    cd spec/dummy\r\n    rails g model thing name:string account_id:integer\r\n    cd -\r\n    RAILS_ENV=test rake db:migrate\r\n\r\nWe'll tell the model where the account association is defined:\r\n\r\n    belongs_to :account, class_name: 'Subscribem::Account'\r\n\r\nWe'll define a new method `sign_in_as` as a test helper\r\n\r\n    # spec/support/authentication_helpers.rb\r\n\r\n    module AuthenticationHelpers\r\n      include Warden::Test::Helpers\r\n      def sign_in_as(options={})\r\n        options.each do |scope, object|\r\n          login_as(object.id, scope: scope)\r\n        end\r\n      end\r\n\r\n      RSpec.configure do |config|\r\n        config.include AuthenticationHelpers, type: :feature\r\n        config.after type: :feature do\r\n          logout\r\n        end\r\n      end\r\n    end\r\n\r\nThis helper will be available in all feature specs. In the `sign_in_as` method, we\r\ngo through each option passed to the method with the `login_as` method, provided\r\nby `Warden::Test::Helpers`.\r\n\r\nNow we'll need to generate a controller for the `/things` route.\r\n\r\n    cd spec/dummy\r\n    rails g controller things index\r\n\r\n    # spec/dummy/config/routes.rb\r\n\r\n    get "/things" => "things#index", as: :things\r\n\r\n    # spec/dummy/app/controllers/things_controller.rb\r\n\r\n    def index\r\n      @things = current_account.things\r\n    end\r\n\r\nThe dummy app's controllers do not have access to methods in the `Subscribem::ApplicationController`\r\nyet. To do this, we need an extender. Our extender will *re-open* the ApplicationController\r\nclass and extend the methods.\r\n\r\n    # app/extenders\r\n\r\n    ::ApplicationController.class_eval do \r\n      helper_method [:current_account, :current_user, :user_signed_in?, :authenticate_user!]\r\n      def current_account\r\n        if user_signed_in?\r\n          @current_account ||= begin\r\n            account_id = env['warden'].user(scope: :account)\r\n            Subscribem::Account.find(account_id)\r\n          end\r\n        end\r\n      end\r\n      def current_user\r\n        if user_signed_in?\r\n          @current_user ||= begin\r\n            user_id = env['warden'].user(scope: :user)\r\n            Subscribem::User.find(user_id)\r\n          end\r\n        end\r\n      end\r\n      def user_signed_in?\r\n        env['warden'].authenticated?(:user)\r\n      end\r\n      def authenticate_user!\r\n        unless user_signed_in?\r\n          flash[:notice] = "Please sign in."\r\n          redirect_to '/sign_in'\r\n        end\r\n      end\r\n      def force_authentication!(account, user)\r\n        env['warden'].set_user(user.id, scope: :user)\r\n        env['warden'].set_user(account.id, scope: :account)\r\n      end\r\n    end\r\n\r\nThis file contains all the methods that were in the ApplicationController, so we can remove\r\nthem from the ApplicationController. To load these methods we create a `to_prepare` hook in\r\nthe engine's definition, inside the `Subscribem::Engine` class\r\n\r\n    # lib/subscribem/engine.rb\r\n\r\n    config.to_prepare do\r\n      root = Subscribem::Engine.root\r\n      extenders_path = root + "app/extenders/**/*.rb"\r\n      Dir.glob(extenders_path) do |file|\r\n        Rails.configuration.cache_classes ? require(file) : load(file)\r\n      end\r\n    end\r\n\r\nThis block will run every time a new request hits the development environment, and only\r\nwhen the server starts up in production. Using `Dir.glob` we retreive a list of\r\nall the files that match the combined string. Using this extender means that\r\nthe methods are now accessibly by the ApplicationController of the main app, not\r\nSubscribem::ApplicationController. To fix this change the inherited class in the\r\nSubscribem::ApplicationController.\r\n\r\n    class ApplicationController < ::ApplicationController\r\n\r\nNow we'll put a method in the `Thing` model to add an association to the `Subscribem::ACcount` model.\r\nWe can actually define that method in our engine:\r\n\r\n    # lib/subscribem/active_record_extensions.rb\r\n\r\n    ActiveRecord::Base.class_eval do\r\n      def self.scoped_to_account\r\n        belongs_to :account, class_name: "Subscribem::Account"\r\n        association_name = self.to_s.downcase.pluralize\r\n        Subscribem::Account.has_many association_name.to_sym, class_name: self.to_s\r\n      end\r\n    end\r\n\r\n    # lib/subscribem.rb\r\n    \r\n    require "subscribem/active_record_extensions"\r\n\r\nThis code is now available to all classes that inherit from `ActiveRecord::Base`. This\r\nmeans it could be used for more than just the `Things` class if we needed it in the future.\r\nNow we have an association called `things` in the `Subscribem::Account` model. We can\r\nmodify some of the code we used.\r\n\r\n    # spec/dummy/app/models/things.rb\r\n\r\n    class Thing < ActiveRecord::Base\r\n      scoped_to_account\r\n    end\r\n\r\nNow that we have access to `things`, we can get to it from the view.\r\n\r\n    # spec/dummy/app/views/things/index.html\r\n\r\n    <h1>Things</h1>\r\n    <ul>\r\n      <% @things.each do |thing| %>\r\n        <li><%= thing.name %></li>\r\n      <% end %>\r\n    </ul>\r\n\r\n### 3.2 Using Postgres\r\n\r\nNow we'll use Postgres *schemas* with the *Apartment* gem for a cleaner approach to scoping.\r\n\r\nWhen you create a table in Postgres, it is by default underneath the `public` schema. All\r\nqueries will look for tables inside schemas that match the schemas listed in the *schema search path*.\r\nBy default it looks in the `public` schema and a schema matching the current Postgres user's login.\r\nWe can put account resources within their own schema and then restrict the schema search path to look up\r\nonly that. So when a user signs in, we'll switch to the schema search path for their account.\r\n\r\n#### Experimenting with Postgres Schemas\r\n\r\nSee the currently active search path.\r\n\r\n    SHOW search_path;\r\n\r\nCreate a new database\r\n\r\n    CREATE DATABASE subscribem;\r\n\r\nChange to that database\r\n\r\n    \\c subscribem\r\n\r\nView the schemas\r\n\r\n    \\dn\r\n\r\nCreate a new table\r\n\r\n    CREATE TABLE accounts ( id integer );\r\n\r\nAdd a record\r\n\r\n    INSERT INTO accounts VALUES (1);\r\n\r\nquery the data\r\n\r\n    SELECT * FROM accounts WHERE id = 1;\r\n\r\nCreate a new schema\r\n\r\n    CREATE SCHEMA alternative;\r\n    CREATE TABLE alternative.accounts ( id integer );\r\n\r\nShow the tables (this will only be public tables)\r\n\r\n    \\dt\r\n\r\nChange the search path to show only alternative schema tables\r\n\r\n    SET search_path = 'alternative';\r\n    \\dt\r\n\r\nYou can specify a schema for performing a query.\r\n\r\n    SELECT * FROM alternative.accounts;\r\n\r\nYou can also specify a fallback search_path\r\n\r\n    SET search_path = 'alternative', 'public';\r\n\r\n#### Using the apartment gem.\r\n\r\nYou'll need to switch to a Postgres database from sqlite\r\n\r\n    # subscribem.gemspec\r\n\r\n    s.add_dependency "pg"\r\n    s.add_dependency "apartment", "~> 0.22.1"\r\n\r\n    # lib/subscribem/engine.rb\r\n\r\n    require 'apartment'\r\n\r\n    # spec/dummy/config/database.yml\r\n\r\n    development:\r\n      adapter: postgresql\r\n      encoding: utf8\r\n      pool: 5\r\n      database: subscribem_dev\r\n      username: shaun\r\n\r\n    test:\r\n      adapter: postgresql\r\n      encoding: utf8\r\n      pool: 5\r\n      database: subscribem_test\r\n      username: shaun\r\n\r\n    # Command Line\r\n\r\n    rake db:create:all\r\n    rake db:migrate\r\n    RAILS_ENV=test rake db:migrate\r\n\r\nYou can create schemas with the apartment gem through the rails console, in `spec/dummy`:\r\n\r\n    Apartment::Database.create('one')\r\n\r\nThis creates duplicates of the tables within the schema based on the migrations.\r\n\r\nTo view the current `schema_search_path`\r\n\r\n    ActiveRecord::Base.connection.schema_search_path\r\n\r\nTo switch the `schema_search_path`\r\n\r\n    Apartment::Database.switch('one')\r\n\r\nWhen we create an account, the record will live in `public.accounts`. But the associated\r\ndata should live in another schema. To create this other schema, we'll make a call to\r\n\r\n    Apartment::Database.create\r\n\r\nLet's write a test to make sure this works. We assert the schema has been\r\ncreated by running a raw SQL query.\r\n\r\n    # spec/models/subscribem/accounts_spec.rb\r\n\r\n    require 'spec_helper'\r\n\r\n    describe Subscribem::Account do\r\n      def schema_exists?(account)\r\n        query = %Q{SELECT nspname FROM pg_namespace\r\n                  WHERE nspname='#{account.subdomain}'}\r\n        result = ActiveRecord::Base.connection.select_value(query)\r\n        result.present?\r\n      end\r\n      it "creates a schema" do\r\n        account = Subscribem::Account.create!({\r\n          name: 'First Account',\r\n          subdomain: 'first'\r\n        })\r\n        account.create_schema\r\n        failure_message = "Schema #{account.subdomain} does not exist"\r\n        assert schema_exists?(account), failure_message\r\n      end\r\n    end\r\n\r\nTo get this passing we'll need a `create_schema` method inside the `Subscribem::Account` class\r\n\r\n    # app/models/subscribem/account.rb\r\n\r\n    def create_schema\r\n      Apartment::Database.create(subdomain)\r\n    end\r\n\r\nAll tests should pass now. We'll use this method in the controller when creating an account\r\nto create an associated schema automatically.\r\n\r\n    def create\r\n      @account = Subscribem::Account.create_with_owner(account_params)\r\n      if @account.save\r\n        force_authentication!(@account, @account.owner)\r\n        @account.create_schema\r\n        flash[:success] = 'Your account has been successfully created.'\r\n        redirect_to subscribem.root_url(subdomain: @account.subdomain)\r\n      else\r\n      ...\r\n\r\n#### Switching between schemas\r\n\r\nWe'll test that we can switch between schemas. This requires a modification to our current\r\ntest:\r\n\r\n    # spec/features/accounts/scoping_spec.rb\r\n\r\n    feature "Account scoping" do\r\n\r\n      let!(:account_a) { FactoryGirl.create(:account_with_schema) }\r\n      let!(:account_b) { FactoryGirl.create(:account_with_schema) }\r\n      before do\r\n        Apartment::Database.switch(account_a.subdomain)\r\n        Thing.create(name: "Account A's Thing")\r\n        Apartment::Database.switch(account_b.subdomain)\r\n        Thing.create(name: "Account B's Thing")\r\n        Apartment::Database.reset\r\n      end\r\n\r\n      scenario "displays only account A's records" do\r\n        sign_in_as(user: account_a.owner, account: account_a)\r\n        visit main_app.things_url(subdomain: account_a.subdomain)\r\n        page.should have_content("Account A's Thing")\r\n        page.should_not have_content("Account B's Thing")\r\n      end\r\n\r\n      scenario "displays only account B's records" do\r\n        sign_in_as(user: account_b.owner, account: account_b)\r\n        visit main_app.things_url(subdomain: account_b.subdomain)\r\n        page.should have_content("Account B's Thing")\r\n        page.should_not have_content("Account A's Thing")\r\n      end\r\n      \r\n    end\r\n\r\n    # spec/support/factories/account_factory.rb\r\n\r\n    factory :account, class: Subscribem::Account do    \r\n    ...\r\n      factory :account_with_schema do\r\n        after(:create) do |account|\r\n          account.create_schema\r\n        end\r\n      end\r\n    end\r\n\r\n    # spec/spec_helper.rb\r\n\r\n    config.after(:each) do\r\n      Apartment::Database.reset\r\n    end\r\n\r\nWe'll use a piece of middleware included with *Apartment* to switch between\r\ndatabase schemas along with the subdomains.\r\n\r\n    # lib/subscribem/engine.rb\r\n\r\n    initializer 'subscribem.middleware.apartment' do\r\n      Rails.application.config.middleware.use Apartment::Elevators::Subdomain\r\n    end\r\n\r\nWe'll want to exclude some models from *Apartment*'s scoping, such as the accounts model.\r\nThe accounts model must be publicly accessible so that it can be accessed before logging in.\r\n\r\n    # config/initializers/apartment.rb\r\n\r\n    Apartment.exclude_models = ["Subscribem::Account", "Subscribem::Member", "Subscribem::User"]\r\n\r\nAnd now that we're scoping by schema, from the resource controller we can access the records with simply:\r\n\r\n    @things = Thing.all\r\n\r\nRspec may complain about transactions being aborted, in which case you can modify the `spec_helper`\r\nby removing this line:\r\n\r\n    config.use_transactional_fixtures = true\r\n\r\nIf you do this, you will also need a gem called `database_cleaner` to clean up the database\r\nafter each test.\r\n\r\nMany other tests will fail now, in part due to the Capybara host interfering with\r\n`Apartment::Elevator::Subdomain`. At the end of `spec/spec_helper.rb` add this line to\r\nthe bottom:\r\n\r\n    Capybara.app_host = 'http://example.com'\r\n\r\nSome of our tests are creating accounts without schemas. So change to these lines:\r\n\r\n    # spec/features/accounts/sign_in_spec.rb\r\n\r\n    page.current_url.should == 'http://example.com/accounts'\r\n\r\n    # spec/features/users/sign_in_spec.rb, spec/features/users/sign_up_spec.rb\r\n\r\n    let!(:account) { FactoryGirl.create(:account_with_schema) }\r\n\r\nWe'll want to change the `current_account` helper from getting it's data from Warden\r\nto getting it's scope set by the subdomain.\r\n\r\n    # app/extenders/controllers/application_controller_extender.rb\r\n\r\n    def force_authentication!(user)\r\n      env['warden'].set_user(user.id, scope: :user)\r\n    end\r\n    def current_account\r\n      @current_account ||= Subscribem::Account.find_by(subdomain: request.subdomain)\r\n    end\r\n\r\n    # app/controllers/subscribem/accounts_controller.rb\r\n\r\n    force_authentication!(@account.owner)\r\n\r\n    # app/controllers/subscribem/acccount/users_controller.rb\r\n\r\n    force_authentication!(user)\r\n\r\n## Chapter 4 - The Forum Application\r\n\r\nWe'll bring the subscribem engine into a new application. These forums\r\nwill be scoped to relative accounts. The options to create this will skip the\r\nTest::Unit framework and use postgresql as the database.\r\n\r\n    rails new hosted_forums --skip-test-unit -d postgresql\r\n\r\nTo link the `subscribem` gem, get the path to your gem file\r\n\r\n    gem 'subscribem', path: '/Users/shaun/Documents/Sites/rails/subscribem'\r\n\r\nInstall the bundle, then mount the engine in the `config/routes.rb` file\r\n\r\n    mount Subscribem::Engine, at: '/'\r\n\r\nConfigure the database for development and testing. Because of all the tables\r\nthat will be created, we use the `min_messages` option to limit the output\r\n\r\n    development:\r\n      adapter: postgresql\r\n      encoding: unicode\r\n      database: hosted_forums_development\r\n      pool: 5\r\n      username: shaun\r\n      min_messages: warning\r\n\r\nThen set up the database migrations from the engine\r\n\r\n    rake db:create\r\n    rake railties:install:migrations\r\n    rake db:migrate\r\n\r\nInstall the `forem` gem from github, as well as rails4 versions of the required\r\ngems\r\n\r\n    gem 'forem', github: 'radar/forem', branch: 'rails4'\r\n    gem 'kaminari', '0.14.1'\r\n\r\n    gem 'friendly_id', github: 'FriendlyId/friendly_id'\r\n    gem 'cancan', git: 'https://github.com/nukturnal/cancan.git'\r\n\r\nThe `forem` gem has a builtin install, so to set up an initializer and migration files:\r\n\r\n    rails g forem:install\r\n\r\nThere will be some questions, such as *"What is your user class?"* and *"What is the `current_user` helper?"*\r\n\r\n    Subscribem::User\r\n    current_user\r\n\r\nThe forem installer will tell you what it's done. You can change the route for the\r\nengine, since the purpose of this app is just for forums. However, the forums\r\nshould only be accessible by their subdomains, so wrap it in the constraint created\r\nin the Subscribem engine\r\n\r\n    require 'subscribem/constraints/subdomain_required'\r\n\r\n    constraints(Subscribem::Constraints::SubdomainRequired) do\r\n      mount Forem::Engine, at: '/'\r\n    end\r\n\r\n### 4.2 Testing subscribem integration\r\n\r\nMake sure the app includes `rspec-rails` and `capybara` in the Gemfile, then\r\ninstall with `rails g rspec:install`. To test\r\nthat new account sign up is working correctly, write a new spec:\r\n\r\n    # spec/features/accounts/sign_up_spec.rb\r\n\r\n    require 'spec_helper'\r\n\r\n    feature 'Accounts' do\r\n      scenario 'creating an account' do\r\n        visit '/'\r\n        click_link 'Account Sign Up'\r\n        fill_in 'Name', with: 'Test'\r\n        fill_in 'Subdomain', with: 'test'\r\n        fill_in 'Email', with: 'subscribem@example.com'\r\n\r\n        password_field_id = 'account_owner_attributes_password'\r\n        fill_in password_field_id, with: 'password'\r\n        fill_in 'Password confirmation', with: 'password'\r\n\r\n        click_button 'Create Account'\r\n\r\n        page.should have_content('Your account has been successfully')\r\n        page.should have_content('Signed in as subscribem@example.com')\r\n        page.current_url.should == 'http://test.example.com/'\r\n      end  \r\n    end\r\n\r\nYou'll also need to add `Capybara.app_host = 'http://example.com'` to the `spec_helper`.\r\n\r\nThen set up flash message displays in the view\r\n\r\n    <% flash.each do |k,v| %>\r\n      <div class='flash <%= k %>'><%= v %></div>\r\n    <% end %>\r\n\r\nMove the `user_signed_in` logic from the Subscribem application view to a partial\r\n\r\n    # app/views/subscribem/shared_login.html.erb\r\n\r\n    <% if user_signed_in? %>\r\n      Signed in as <%= current_user.email %>\r\n    <% end %>\r\n\r\nThen from the main application, you can render this partial with:\r\n\r\n    <%= render 'subscribem/shared/login' %>\r\n\r\nThen test user sign in.\r\n\r\n    # spec/features/users/sign_in_spec.rb\r\n\r\n    require 'spec_helper'\r\n\r\n    feature 'User sign in' do\r\n      extend SubdomainHelpers\r\n      let!(:account) { FactoryGirl.create(:account_with_schema) }\r\n      let(:sign_in_url) { "http://#{account.subdomain}.example.com/sign_in" }\r\n      let(:root_url) { "http://#{account.subdomain}.example.com/" }\r\n      within_account_subdomain do\r\n        scenario "signs in as an account owner successfully" do\r\n          visit root_url\r\n          page.current_url.should == sign_in_url\r\n          page.should have_content("Please sign in.")\r\n          fill_in "Email", with: account.owner.email\r\n          fill_in "Password", with: 'password'\r\n          click_button 'Sign in'\r\n          page.should have_content('You are now signed in.')\r\n          page.current_url.should == root_url\r\n        end\r\n      end  \r\n    end\r\n\r\nThis utalizes the `SubdomainHelpers` class, currently only available in the subscribem\r\nengine. To share this with the main app, move it from `spec/support` to \r\n`lib/subscribem/testing_support`. It will need some more wrappers to function correctly\r\n\r\n    module Subscribem\r\n      module TestingSupport\r\n        module SubdomainHelpers\r\n          def within_account_subdomain\r\n            let(:subdomain_url) { "http://#{account.subdomain}.example.com" }\r\n            before { Capybara.default_host = subdomain_url }\r\n            after { Capybara.default_host = "http://www.example.com" }\r\n            yield\r\n          end\r\n        end\r\n      end\r\n    end\r\n\r\nThen the subscribem test will need to add a `require` statement and edit the `extend`\r\n\r\n    # subscribem/spec/features/users/sign_in_spec.rb\r\n\r\n    require 'subscribem/testing_support/subdomain_helpers'\r\n\r\n    extend Subscribem::TestingSupport::SubdomainHelpers\r\n\r\nAdd these lines to `hosted_forums/spec/features/users/sign_in_spec` as well.\r\n\r\nTo share FactoryGirl definitions, add a new directory:\r\n  \r\n    lib/subscribem/testing_support/factories\r\n\r\nAnd move the factory files from `subscribem/spec/support/factories` to there. Then we'll\r\nneed to require these factories from each of the test files that needs it.\r\n\r\n    require 'subscribem/testing_support/factories/account_factory'\r\n\r\nThe `account_factory` also depends on the `user_factory`, so add this to the top:\r\n\r\n    # lib/subscribem/testing_support/factories/account_factory.rb\r\n\r\n    require 'subscribem/testing_support/factories/user_factory'\r\n\r\nNow we need to make sure users are always signed in before attempting to access any\r\nof Forem's controllers. In order to do this, we're going to *monkey patch* the code\r\nfor the `Forem::ApplicationController`. We'll do this with an *extender* file.\r\n\r\n    # app/extenders/controllers/forem/application_controller.rb\r\n\r\n    Forem::ApplicationController.class_eval do\r\n      before_action :authenticate_user!\r\n    end\r\n\r\nThen we'll need to let the application know where to look for this.\r\n\r\n    # config/application.rb\r\n\r\n    class Application < Rails::Application\r\n      ...\r\n\r\n      config.to_prepare do\r\n        extenders_path = Rails.application.root + "app/extenders/**/*.rb"\r\n        Dir.glob(extenders_path) do |file|\r\n          Rails.configuration.cache_classes ? require(file) : load(file)\r\n        end\r\n      end\r\n\r\n### Testing Forem Integration\r\n\r\nWe'll write a test to make sure that a signed in user is\r\nonly able to see the forums for that account.\r\n\r\n    feature 'Forum scoping' do\r\n      let!(:account_a) { FactoryGirl.create(:account_with_schema) }\r\n      let!(:account_b) { FactoryGirl.create(:account_with_schema) }\r\n      def create_forum(name)\r\n        category = Forem::Category.create(name: 'A category')\r\n        forum = Forem::Forum.new\r\n        forum.name = name\r\n        forum.description = 'A forum'\r\n        forum.category = category\r\n        forum.save!\r\n      end\r\n\r\n      before do\r\n        Apartment::Database.switch(account_a.subdomain)\r\n        create_forum("Account A's Forum")\r\n        Apartment::Database.switch(account_b.subdomain)\r\n        create_forum("Account B's Forum")\r\n        Apartment::Database.reset\r\n      end\r\n\r\n      scenario "displays only account A's forums" do\r\n        sign_in_as(user: account_a.owner, account: account_a)\r\n        visit "http://#{account_a.subdomain}.example.com"\r\n        page.should have_content("Account A's Forum")\r\n        page.should_not have_content("Account B's Forum")\r\n      end\r\n\r\n      scenario "display only account B's forums" do\r\n        sign_in_as(user: account_b.owner, account: account_b)\r\n        visit "http://#{account_b.subdomain}.example.com"\r\n        page.should have_content("Account B's Forum")\r\n        page.should_not have_content("Account A's Forum")\r\n      end\r\n    end\r\n\r\nThe `sign_in_as` helper is only available in the Subscribem engine,\r\nso move this from `spec/support/authentication_helpers` to\r\n`lib/subscribem/testing_support/authentication_helpers`. It will\r\nneed to be wrapped in the `Subscribem` and `TestingSupport` modules,\r\nand another method is required to perform the `after` function\r\n\r\n    module Subscribem\r\n      module TestingSupport\r\n        module AuthenticationHelpers\r\n          include Warden::Test::Helpers\r\n          def self.included(base)\r\n            base.after do\r\n              logout\r\n            end\r\n          end\r\n          def sign_in_as(options={})\r\n            options.each do |scope, object|\r\n              login_as(object.id, scope: scope)\r\n            end\r\n          end\r\n        end\r\n      end\r\n    end\r\n\r\nThen include it in the `spec/features/account/scoping_spec` file\r\nwhere it is used\r\n\r\n\r\n    require 'subscribem/testing_support/authentication_helpers'\r\n    feature 'Forum scoping' do\r\n      include Subscribem::TestingSupport::AuthenticationHelpers\r\n      ...\r\n\r\n  \r\n	3	2015-03-31 21:14:39.879194	2015-03-31 21:14:39.879194
22	Programming Ruby	programming-ruby	## Chapter 2 - Ruby.new\r\n\r\n### Ruby is an Object-Oriented Language\r\n\r\nYou create *instances* of classes. New instances of a class are created with the `new` keyword. These objects are\r\ncalled *class instances*, but commonly just referred to as objects. Objects derived from these classes have access\r\nto:\r\n\r\n* Object ID\r\n* Instance Methods\r\n* Instance Variables\r\n\r\n### Some Basic Ruby\r\n\r\nSome variables are prefixed with a symbol.\r\n\r\n* $ - Global variables\r\n* @ - instance variables\r\n* @@ - class variables\r\n\r\nClass, Module, and constant names all begin with a capital letter.\r\n\r\n`nil` is an object\r\n\r\n### Arrays and hashes\r\n\r\n<dl>\r\n  <dt>.inspect</dt>\r\n  <dd>Used to display array as a string.</dd>\r\n  <dd><pre>\r\n    puts "The array is now #{a.inspect}"\r\n    # The array is now [1, "cat", nil]\r\n  </pre></dd>\r\n</dl>\r\n\r\n### Blocks and Iterators\r\n\r\nBlocks are used to pass around content.\r\n\r\n    def call_block\r\n      puts "Start of method"\r\n      yield\r\n      yield\r\n      puts "End of method"\r\n    end\r\n\r\n    call_block { puts "In the block" }\r\n\r\n    # Start of method\r\n    # In the block\r\n    # In the block\r\n    # End of method\r\n\r\nYou can provide arguments to the call to `yield` that will be passed to the block.\r\n\r\n    def who_says_what\r\n      yield("Dave", "hello")\r\n      yield("Andy", "goodbye")\r\n    end\r\n\r\n    who_says_what { |person, phrase| puts "#{person} says #{phrase}"}\r\n\r\n    # Dave says hello\r\n    # Andy says goodbye\r\n\r\n### Reading and Riting\r\n\r\n`puts` is very common, but you may also want to use `printf`\r\n\r\n    printf("Number: %5.2f,\\nString: %s\\n", 1.23, "hello")\r\n\r\n    # Number: 1.23\r\n    # String: hello\r\n\r\n`gets` is used to collect input.\r\n\r\n  while line = gets\r\n    print line\r\n  end\r\n\r\n### Command-line arguments\r\n\r\nwhen you run a program from the command line, you can pass in arguments\r\n\r\n    # cmd_line.rb\r\n\r\n    puts "You gave #{ARGV.size} arguments"\r\n    p ARGV\r\n\r\nOften you want to do this with a file name, in which case you'll want to use `ARGF`\r\n\r\n\r\n## Chapter 3 - Classes, Objects and Variables\r\n\r\nIn order to pass information into your class when it's being created, you should set\r\nup an `initialize` method.\r\n\r\n    class BookInStock\r\n      def initialize(isbn, price)\r\n        @isbn = isbn\r\n        @price = Float(price)\r\n      end\r\n    end\r\n\r\nUsing the `Float` method works like validation. If the number can't be converted\r\nto a float, it throws an error.\r\n\r\nYou can override the standard string output of a class (which is seen with `puts`),\r\nwith the `to_s` method.\r\n\r\n    def to_s\r\n      "ISBN: #{@isbn}, price: #{@price}"\r\n    end\r\n\r\n    b1 = BookInStock.new("isbn1", 3)\r\n    puts b1\r\n\r\n    # ISBN: isbn1, price: 3.0\r\n\r\n### Objects and Attributes\r\n\r\nThe class object as it is gives now way of accessing the individual variables. To\r\ndo this, we have to write methods that return the variables.\r\n\r\n    def isbn\r\n      @isbn\r\n    end\r\n\r\nThis can be done with the `attr_reader` shorthand method\r\n\r\n    attr_reader :isbn, :price\r\n\r\nIf you want to be able to edit a variable from outside the class, you'll need to create a\r\nmethod with the `=` operator\r\n\r\n    def price=(new_price)\r\n      @price = new_price\r\n    end\r\n\r\n*Virtual Attributes* are methods that are generated within the class\r\n\r\n    def price_in_cents\r\n      Integer(price*100 + 0.5)\r\n    end\r\n\r\n*NOTE:* The need for `0.5` in this case has to do with how floats are calculated and\r\nintegers are converted. When working with financial calculations it would be better\r\nto use BigDecimal as the datatype.\r\n\r\nYou can map values from virtual attributes as well.\r\n\r\n    def price_in_cents=(cents)\r\n      @price = cents / 100.0\r\n    end\r\n\r\n### Classes Working with Other Classes\r\n\r\nWe should write classes to represent objects, but also to perform actions in your\r\nprogram. For example, the book recording program will need to read CSV files, so\r\nwe can make a class called `CsvReader`\r\n\r\n    require 'csv'\r\n    require_relative 'book_in_stock'\r\n\r\n    class CsvReader\r\n      def initialize\r\n        @books_in_stock = []\r\n      end\r\n\r\n      def read_in_csv_data(csv_file_name)\r\n        CSV.foreach(csv_file_name, headers: true) do |row|\r\n          @books_in_stock << BookInStock.new(row["ISBN"], row["Price"])\r\n        end\r\n      end\r\n\r\n      def total_value_in_stock\r\n        sum = 0.0\r\n        @books_in_stock.each {|book| sum += book.price}\r\n        sum\r\n      end\r\n\r\n      def number_of_each_isbn\r\n\r\n      end\r\n    end\r\n\r\n\r\n    reader = CsvReader.new\r\n    reader.read_in_csv_data("file.csv")\r\n\r\n    puts "Total value in stock = #{reader.total_value_in_stock}"\r\n\r\nThe CSV library method used, CSV, takes an argument labeled `headers` as content for\r\nheaders. The instance method, `@books_in_stock`, stores the array of book objects.\r\n\r\nThe main program:\r\n\r\n    require_relative 'csv_reader'\r\n\r\n    reader = CsvReader.new\r\n\r\n    ARGV.each do |csv_file_name|\r\n      STDERR.puts "Processing #{csv_file_name}"\r\n      reader.read_in_csv_data(csv_file_name)\r\n    end\r\n\r\n    puts "Total value = #{reader.total_value_in_stock}"\r\n\r\nTo run the program\r\n\r\n    ruby stock_stats.rb data.csv\r\n\r\n### Access Control\r\n\r\nAccess can be defined a couple different ways\r\n\r\n  class myClass\r\n\r\n    def method1 # public\r\n\r\n    protected\r\n      def method2 # protected\r\n\r\n    private\r\n      def method3 # private\r\n\r\n    public\r\n      def method4 # public\r\n\r\nAnd\r\n\r\n  class myClass\r\n    def method1\r\n    def method2\r\n\r\n    public :method1, :method4\r\n    protected :method2\r\n    private :method3\r\n\r\n### Variables\r\n\r\nVariables hold references to objects\r\n\r\n    person1 = "Tim"\r\n    person2 = person1\r\n    person1[0] = "J"\r\n\r\n    # person1 and person2 both equal Jim\r\n\r\nYou can create a new verson of the variable with the `dup` method\r\n\r\n    person1 = "Tim"\r\n    person2 = person1.dup\r\n    person1[0] = "J"\r\n\r\nYou can also prevent changes to a variable with the `freeze` method\r\n\r\n    person1.freeze\r\n\r\n## Chapter 4 - Containers, Blocks and Iterators\r\n\r\n### Arrays\r\n\r\n* `push` adds to the end of an array\r\n* `pop` removes from the end\r\n* `shift` removes from the beginning\r\n\r\n### Hashes\r\n\r\nRuby remembers the order in which a hash has been populated and will return items\r\nin that order.\r\n\r\n`scan` Produces an array of substrings that match the given pattern.\r\n\r\n    def words_from_string(string)\r\n      string.downcase.scan(/[|w']+/)\r\n    end\r\n\r\nPassing a parameter in to the `Hash.new()` constructor sets a default value. An example\r\nof this would be in a function that counts the frequency of a particular word in a string.\r\n\r\n    def count_frequency(word_list)\r\n      counts = Hash.new(0)\r\n      for word in word_list\r\n        counts[word] += 1\r\n      end\r\n      counts\r\n    end\r\n\r\nRun tests and stuff.\r\n\r\n### Blocks and Iterators\r\n\r\nYou can specify that a variable used within the block is different than any on the local scope\r\nwith the `;`\r\n\r\n    [1, 2, 3, 4].each do |value; square|\r\n\r\nIn this case, `square` is the block local variable, because it's after the `;`\r\n\r\nDefining a method that takes a block, you can use the `yield` keyword to output the\r\ncontent defined within the block.\r\n\r\n    def two_times\r\n      yield\r\n      yield\r\n    end\r\n    two_times { puts "Hello" }\r\n\r\nYou can also pass parameters to the block\r\n\r\n    def fib_up_to(max)\r\n      i1, i2 = 1, 1 # parallel assignment, i1 = 1, i2 = 1\r\n      while i1 <= max\r\n        yield i1\r\n        i1, i2 = i2, i1+i2\r\n      end\r\n    end\r\n\r\n    fib_up_to(1000) { |f| print f, " " }\r\n\r\n### Containers Everywhere\r\n\r\n	2	2015-03-31 21:14:39.933717	2015-03-31 21:14:39.933717
23	Rails 4 in Action	rails-4-in-action	## Chapter 3 - Developing a Real Rails Application\r\n\r\nGenerate a new app\r\n\r\n    rails new ticketee\r\n\r\nThis app will:\r\n\r\n* Track tickets and group them into projects\r\n* Restrict users to certain projects\r\n* Allow users to upload files to tickets\r\n* Let users tag tickets so they're easy to find\r\n* Provide an API on which users can base development of their own applications\r\n\r\n### Version Control\r\n\r\nSet up a git repository. You can view a history of your commits with `git log`\r\n\r\n### Application Configuration\r\n\r\nAdd the testing gems to your Gemfile\r\n\r\n    group :test, :development do\r\n      gem "rspec-rails", "~> 2.14.0"\r\n    end\r\n\r\n    group :test do\r\n      gem "capybara", "~> 2.1.0"\r\n    end\r\n\r\nThen run `bundle update` (or in this case simply `bundle`). Note that when rails generates an application,\r\nit runs `bundle install --binstubs`, which stores executable files in the bin directory. This is\r\nwhy you don't need to run `bundle exec` before commands.\r\n\r\nTo set up the Rspec configuration:\r\n\r\n    rails g rspec:install\r\n\r\nFor this project you can get a stylesheet from:\r\n\r\n    http://github.com/rails3book/ticketee/raw/master/app/assets/stylesheets/application.css\r\n\r\nTo begin writing tests for our first feature, create a new directory at `spec/features`\r\n\r\n    # spec/features/creating_projects_spec.rb\r\n\r\n    require 'spec_helper'\r\n\r\n    feature 'Creating Projects' do\r\n      scenario 'can create a project' do\r\n        visit '/'\r\n\r\n        click_link 'New Project'\r\n\r\n        fill_in 'Name', with: 'TextMate 2'\r\n        fill_in 'Description', with: 'A text-editor for OSX'\r\n        click_button 'Create Project'\r\n\r\n        expect(page).to have_content('Project has been created.')\r\n      end\r\n    end\r\n\r\nThis first step is pretty basic, you can follow the errors to get it working. A useful\r\ncommand `p params` can be used in a controller action to output the params, either in a test\r\nor a console(possibly the view?)\r\n\r\nAdd some more things to test (at the end of the scenario)\r\n\r\n    project = Project.where(name: 'TextMate 2').first\r\n    title = 'TextMate 2 - Project - Ticketee'\r\n\r\n    expect(page.current_url).to eq(project_url(project))\r\n    expect(page).to have_title(title)\r\n\r\nCreate a function in the ApplicationHelper to handle this:\r\n\r\n    def title(*parts)\r\n      unless parts.empty?\r\n        content_for :title do\r\n          (parts << "Ticketee").join(" - ")\r\n        end\r\n      end\r\n    end\r\n\r\nThe use of an `*`(splat) in the arguments will store all arguments as an array. You can use this from\r\nthe show view of your project:\r\n\r\n    - title(@project.name, 'Projects')\r\n\r\nCreate a new scenario to test for validation.\r\n\r\n    scenario 'can not create a project without a name' do\r\n      visit '/'\r\n\r\n      click_link 'New Project'\r\n      click_button 'Create Project'\r\n\r\n      expect(page).to have_content('Project has not been created.')\r\n      expect(page).to have_content('Name can\\'t be blank')\r\n    end\r\n\r\nSome of the code in these scenarios can be combined, before both scenarios add:\r\n\r\n    before do\r\n      visit '/'\r\n\r\n      click_link 'New Project'\r\n    end\r\n\r\n## Chapter 4 - CRUD\r\n\r\nTo test for viewing the index action:\r\n\r\n    # spec/features/view_projects_spec.rb\r\n\r\n    require 'spec_helper'\r\n\r\n    feature "Viewing projects" do \r\n\r\n      scenario "Listing all projects" do\r\n        project = FactoryGirl.create(:project, name: "TextMate 2")\r\n        visit '/'\r\n        click_link 'TextMate 2'\r\n        expect(page.current_url).to eq(project_url(project))\r\n      end\r\n    end\r\n\r\nCreate a factory for the project\r\n\r\n    # spec/support/factories/project_factory.rb\r\n\r\n    FactoryGirl.define do \r\n      factory :project do\r\n        name "Example Project"\r\n      end  \r\n    end\r\n\r\nTo get this passing:\r\n\r\n    # projects controller\r\n\r\n    def index\r\n      @projects = Project.all\r\n    end\r\n\r\n    # projects index view\r\n\r\n    %h2 Projects\r\n    %ul\r\n      - @projects.each do |project|\r\n        %li= link_to project.name, project\r\n    = link_to 'New Project', new_project_path\r\n\r\nTest to edit projects:\r\n\r\n    # spec/features/editing_projects_spec.rb\r\n\r\n    require 'spec_helper'\r\n\r\n    feature 'Editing projects' do\r\n      scenario "Updating a project" do\r\n        FactoryGirl.create(:project, name: "TextMate 2")\r\n\r\n        visit "/"\r\n        click_link "TextMate 2"\r\n        click_link "Edit Project"\r\n        fill_in "Name", with: "TextMate 2 beta"\r\n        click_button "Update Project"\r\n\r\n        expect(page).to have_content("Project has been updated")\r\n      end \r\n    end\r\n\r\nFollow the tests and scaffolding to finish...\r\n\r\n### What happens when things can't be found?\r\n\r\nInstead of `RAILS_ENV=production` you can use `-e production`. Use this to rescue errors\r\nwhen a project cannot be found:\r\n\r\n    def set_project\r\n      @project = Project.find(params[:id])\r\n    rescue ActiveRecord::RecordNotFound\r\n      flash[:alert] = "The project you were looking for could not be found."\r\n      redirect_to projects_path\r\n    end\r\n\r\n## Chapter 5 - Nested Resources\r\n\r\nWe'll next add the functionality to create tickets underneath projects.\r\n\r\n    # spec/features/creating_tickets_spec.rb\r\n\r\n    require 'spec_helper'\r\n\r\n    feature 'Creating Tickets' do\r\n      before do\r\n        FactoryGirl.create(:project, name: 'Internet Explorer')\r\n\r\n        visit '/'\r\n        click_link 'Internet Explorer'\r\n        click_link 'New Ticket'\r\n      end\r\n\r\n      scenario 'Creating a ticket' do\r\n        fill_in 'Title', with: 'Non-standards compliance'\r\n        fill_in 'Description', with: 'My pages are ugly!'\r\n        click_button 'Create Ticket'\r\n\r\n        expect(page).to have_content('Ticket has been created.')\r\n      end\r\n\r\n      scenario 'Creating a ticket without valid attributes fails' do\r\n        click_button 'Create Ticket'\r\n\r\n        expect(page).to have_content('Ticket has not been created.')\r\n        expect(page).to have_content('Title can't be blank')\r\n        expect(page).to have_content('Description can\\'t be blank')\r\n      end\r\n    end\r\n\r\nCreate a link on the `projects/show` page to add a new ticket\r\n\r\n    = link_to 'New Ticket', new_project_ticket_path(@project)\r\n\r\nWith nested routes, you gain access to compounded helpers, such as `new_project_ticket_path`.\r\n\r\n    # config/routes.rb\r\n\r\n    resources :projects do\r\n      resources :tickets\r\n    end\r\n\r\nThen generate a tickets controller\r\n\r\n    rails g controller tickets\r\n\r\nYou can build a new ticket controller with a project id already specified by using:\r\n\r\n    def new\r\n      @ticket = @project.tickets.build\r\n    end\r\n\r\nThis is the same as `Ticket.new(project_id: @project.id)`. Of course we'll need to specify\r\nthe `@project`, which will be used in moer than one method so you can create a `set_project`\r\nbefore action\r\n\r\n    before_action :set_project\r\n    ...\r\n    private\r\n      def set_project\r\n        @project = Project.find(params[:project_id])\r\n      end\r\n\r\n`:project_id` in this case would come from the route, because it is nested within the `:project`\r\nresource. Next you'll define the association in the project model,\r\nso that rails can find the `tickets` method.\r\n\r\n    has_many :tickets\r\n\r\nWe'll need a corresponding model\r\n\r\n    generate model ticket title description:text project:references\r\n\r\nYou don't need to write in the `add_index :tickets, :project_id` method, because\r\nthe `references` keyword does that automatically. Run the migration and prepare the test database\r\n\r\nNow create a template for the new ticket\r\n\r\n    # app/views/tickets/new.html.haml\r\n\r\n    %h2 New Ticket\r\n    = render 'form'\r\n\r\n    # app/views/tickets/_form.html.haml\r\n\r\n    = form_for [@project, @ticket] do |f|\r\n      - if @ticket.errors.any?\r\n        #error_explanation\r\n          %h2\r\n            = pluralize(@ticket.errors.count, "error")\r\n            prohibited this ticket from being saved:\r\n          %ul\r\n            - @ticket.errors.full_messages.each do |msg|\r\n              %li= msg\r\n\r\n      %p\r\n        = f.label :title\r\n        = f.text_field :title\r\n      %p\r\n        = f.label :description\r\n        = f.text_area :description\r\n      = f.submit\r\n\r\nYou'll need a create action as well\r\n\r\n    def create\r\n      @ticket = @project.tickets.build(ticket_params)\r\n      if @ticket.save\r\n        flash[:notice] = "Ticket has been created."\r\n        redirect_to [@project, @ticket]\r\n      else\r\n        flash[:alert] = 'Ticket has not been created.'\r\n        render 'new'\r\n      end\r\n    end\r\n\r\n    private\r\n      def ticket_params\r\n        params.require(:ticket).permit(:title, :description)\r\n      end\r\n\r\nTo show the ticket:\r\n\r\n    before_action :set_project\r\n    before_action :set_ticket, only: [:show, :edit, :update, :destroy]\r\n\r\n    def show\r\n    end\r\n\r\n    def set_ticket\r\n      @ticket = @project.tickets.find(params[:id])\r\n    end\r\n\r\nThen create a view template:\r\n\r\n    #ticket\r\n      %h2= @ticket.title\r\n      = simple_format(@ticket.description)\r\n\r\nThis `simple_format` method converts line breaks into `<br>` tags so the description\r\nrenders neatly.\r\n\r\nPrepare validations in your model:\r\n\r\n    validates :title, :description, presence: true\r\n	3	2015-03-31 21:14:39.985024	2015-03-31 21:14:39.985024
24	Rails 4 Outlaws	rails-4-outlaws	## 1-1 - Routes, Ruby 1.9.3 & ThreadSafety\r\n\r\nYou can seperate resources into concerns\r\n\r\n  concern :sociable do\r\n    respources :comments\r\n    resource :categories\r\n    resources :tags\r\n  end\r\n\r\n  resource :messages, concerns: :sociable\r\n\r\nYou can extract this into a seperate file.\r\n\r\n  #app/concerns/sociable.rb\r\n\r\n  class Sociable\r\n    def self.call(mapper, options)\r\n      respources :comments, options\r\n      resource :categories, options\r\n      resources :tags, options\r\n    end\r\n  end\r\n\r\n## 2-1 - ActiveRecord Finders\r\n\r\nOld style\r\n\r\n  Post.find(:all, conditions: { author: 'admin' })\r\n\r\nNew style\r\n\r\n  Post.where(author: 'admin')\r\n\r\nYou can use the activerecord-deprecated_finders gem to continue using the old style.\r\n\r\nOld style\r\n\r\n  Post.find_all_by_title('Rails 4')\r\n\r\nNew style\r\n\r\n  Post.where(title: 'Rails 4')\r\n\r\nA single `find` is still usable, but the new style uses `find_by`\r\n\r\n  Post.find_by(title: 'Rails 4')\r\n\r\nBut adding conditions to find is deprecated, so you should use the new syntax:\r\n\r\nOld style\r\n\r\n  Post.find_by_title('Rails 4', conditions: {author: 'admin'})\r\n\r\nNew style\r\n\r\n  Post.find_by(title: 'Rails 4', author: 'admin')\r\n\r\nDynamic finders that create new objects are also deprecated.\r\n\r\nOld style\r\n  \r\n  Post.find_or_initialize_by_title('Rails 4')\r\n  Post.find_or_create_by_title('Rails 4')\r\n\r\nNew style\r\n\r\n  Post.find_or_initialize_by(title: 'Rails 4')\r\n  Post.find_or_create_by(title: 'Rails 4')\r\n\r\nUpdating attributes has new method calls as well.\r\n\r\nOld style\r\n\r\n  @post.update_attributes(post_params)\r\n\r\n  @post.update_attribute(:title, 'Rails 4')\r\n  @post.update_column(:title, 'Rails 4')\r\n\r\nNew style\r\n\r\n  @post.update(post_params)\r\n\r\n  @post.update_columns(post_params)\r\n\r\nYou used to have to use `.scoped` to prevent a query from being run when the method was called. But now `.all` doesn't run the query right away either.\r\n\r\nOld style\r\n\r\n  @tweets = Tweet.scoped\r\n  # -- Some other checks\r\n\r\nNew style\r\n\r\n  @tweets = Tweet.all\r\n  # -- Some other checks\r\n\r\n## 2-2 - ActiveModel\r\n\r\n*eager-evaluated scopes* have been deprecated. Now use *proc object* syntax\r\n\r\nOld style\r\n\r\n  scope :sold, where(state: 'sold')\r\n  default_scope where(state: 'available')\r\n\r\nNew style\r\n\r\n  scope :sold, ->{ where(state: 'sold') }\r\n  # or\r\n  default_scope { where(state: 'available') }\r\n\r\n`.none` returns an active record relation without hitting the database\r\n\r\n  def visible_posts\r\n    case role\r\n    when 'Country Manager'\r\n      Post.where(country: country)\r\n    when 'Reviewer'\r\n      Post.published\r\n    when 'Bad User'\r\n      Post.none\r\n  end\r\n\r\nThis way, you don't get a `no method error` when there are no query results.\r\n\r\nThere is now a `.not` method for queries. This will generate the correct SQL on nil, unlike the old way.\r\n\r\nOld way\r\n\r\n  Post.where('author != ?', author)\r\n\r\nNew way\r\n\r\n  Post.where.not(author: author)\r\n\r\nYou can now use a hash rather than string for ordering\r\n\r\nOld way\r\n\r\n  User.order(:name, 'created_at DESC')\r\n\r\nNew way\r\n\r\n  User.order(:name, created_at: :desc)\r\n\r\nSay you want to query posts and also include the comments, but you only want posts\r\nthat have a comment who's name is the string 'foo'.\r\n\r\nOld way\r\n\r\n  Post.includes(:comments).where("comments.name = 'foo'")\r\n\r\nNew way\r\n\r\n  Post.includes(:comments).where("comments.name = 'foo'").references(:comments)\r\n\r\nNow in Rails 4 you must include the references method, unless you are using a hash\r\nin the where clause or not passing any conditionals.\r\n\r\nStill good way\r\n\r\n  Post.includes(:comments).where(comments: {name: 'foo'})\r\n  Post.includes(:comments).where('comments.name' => 'foo')\r\n\r\n  Post.includes(:comments).order('comments.name')\r\n\r\n## 3-1 Strong Parameters, Filters & Remote Forms\r\n\r\nStrong Parameters are done in the controller.\r\n\r\n  params.require(:user).permit(:name)\r\n\r\nYou can use AJAX with a form by specifying `remote: true`\r\n\r\n  <%= form_for(@user, remote: true) do |f| %>\r\n\r\n## 3-2 Filters, Sessions, Custom Flash Types\r\n\r\nInstead of `before_filter` use `before_action`.\r\n\r\nSessions use cookies by default. In rails 4, these cookies are encrypted.\r\n\r\nYou can set custom flash types in your `application_controller.rb` file\r\n\r\n  add_flash_types :grunt, :snarl\r\n\r\n  #controllers/users_controller.rb\r\n  flash[:grunt] = "brains"\r\n  redirect_to @user, grunt: 'brains'\r\n\r\n  #views/users/show.html.haml\r\n  #grunt= grunt\r\n\r\n## 4-1 Views\r\n\r\nYou can use the `collection_select` method to make a dropdown list\r\n\r\n  collection_select(:item, :owner_id, Owner.all, :id, :name)\r\n\r\nCreate a collection of checkboxes or radio buttons is more difficult\r\n\r\nOld way\r\n\r\n  - @owners.each do |owner\r\n    = radio_button_tag :owner_id, owner.id\r\n    = owner.name\r\n\r\nNew way\r\n\r\n  = collection_radio_buttons(:item, :owner_id, Owner.all, :id, :name)\r\n\r\nThere's a new date field form as well\r\n\r\n  = f.date_field :return_date\r\n\r\n## 5-1 Testing\r\n\r\n## 6-1 ETags\r\n\r\nRails generates an *ETag* after it renders a body for a client. This ETag is an MD5 hash\r\nof the response body. The code to make this:\r\n\r\n  headers['ETag'] = Digest::MD5.hexdigest(body)\r\n\r\nIt then sends the body and ETag to the client. The client will then cache the response body\r\nand store the ETag. Then on the second request, the Client will sent the ETag back as\r\n`headers['If-None-Match']`. Then Rails will still render the body and ETag, compare the ETags\r\nand if they match, only send the ETag with a status code *304 Not Modified* to the client.\r\n\r\nYou can generate custom ETags with the `fresh_when()` method in your controller. This\r\nwill set the ETag equal to the *cache_key* of the particular item, like this:\r\n\r\n  headers['ETag'] = Digest::MD5.hexdigest(@item.cache_key)\r\n\r\nThe *cache_key* of a record is equal to the `<model name>/<id>-<updated_at>` columns.\r\nIn this way, the ETag gets created before the server renders the body. Then the body\r\ndoesn't have to be rendered again if the ETag matches.\r\n\r\nYou can combine more variables to construct your ETag. For example:\r\n\r\n  fresh_when([@item, current_user.id, current_user.age])\r\n\r\nIf you have multiple actions that will set ETags like this, you can place them at the top of\r\nyour controller.\r\n\r\n  etag { current_user.id }\r\n\r\n  def show\r\n    @item = Item.find(params[:id])\r\n    fresh_when(@item)\r\n  end\r\n\r\n## Dalli & Cache Digests\r\n\r\nRails now defaults to using Dalli as a client for memcaching. In order to use Dalli,\r\njust include it in your gem file, the application will default to it.\r\n\r\n  gem 'dalli'\r\n\r\nAn example without fragment caching\r\n\r\n  # app/views/projects/show.html.haml\r\n  = render @project.documents\r\n\r\n  # app/views/documents/_document.html.haml\r\n  %article\r\n    %h3= document.title\r\n    %ul\r\n      = render document.comments\r\n    = link_to 'View details', document\r\n\r\n  # app/views/comments/_comment.html.haml\r\n  %li= comment\r\n\r\nStart caching on the inner-most level\r\n\r\n    # app/views/comments/_comment.html.haml\r\n    - cache comment do\r\n      %li= comment\r\n\r\nThis will check for the default *cache_key* (modelname/id-updated). If it doesn't find\r\none, it will create one. Rails 4 by default adds an MD5 hash of the template to see if it\r\nchanged. So the *cache_key* actually looks like `[modelname/id-updated/md5]`\r\n\r\nWith caching in place on the comment level, we can go up one level to the document\r\nand cache that as well.\r\n\r\n    # app/views/documents/_document.html.haml\r\n    - cache document do\r\n      %article\r\n        %h3= document.title\r\n        %ul\r\n          = render document.comments\r\n        = link_to 'View details', document\r\n\r\nRails checks the outer-most cache levels first. So when you have an inner cache that `belongs_to`\r\nthe outer cache, use `touch: true` when specifying the relationship. That way the\r\n`updated_at` column it the parent is updated when the child is updated.\r\n\r\nRails 4 creates an MD5 hash that combines any inner templates. So if any template\r\nis changed, the cache will be regenerated. However, if you're using a *utility method*\r\non the comments, for example:\r\n\r\n    = render document.recent_comments\r\n\r\nThe cache digest wont work. You will need to explicitly set the partial, or use the comment\r\nsyntax to specify the partial\r\n\r\n    -# Template Dependency: comments/comment\r\n    = render document.recent_comments\r\n\r\n## Streaming & Turbolinks\r\n\r\nIn order to do streaming inside the actions, use `ActionController::Live` in the controller.\r\n\r\n  class ItemsController < ApplicationController\r\n    include ActionController::Live\r\n\r\nYou will need to use a compatible server, like Puma or Rainbows. Then in the method you\r\nneed to specify a header for event-streams.\r\n\r\n  def show\r\n    response.headers["Content-Type"] = "text/event-stream"\r\n    3.times {\r\n      response.stream.write "Hello, browser!\\n"\r\n      sleep 1\r\n    }\r\n    response.stream.close\r\n  end\r\n\r\n*NOTE:* It is important to close your stream.\r\n\r\nIn the list items example, you'll need to use JavaScript to update your template.\r\n\r\n  # views/owners/show.html.haml\r\n  %ul#items\r\n\r\n  #assets/javascripts/owners.js\r\n  $(document).ready(initialize);\r\n  function initialize() {\r\n    // connects to this path\r\n    var source = new EventSource('/items/events');\r\n    // calls this function for each message received\r\n    source.addEventListener('message', update);\r\n  }\r\n\r\n  function update(event) {\r\n    var item = $('<li>').text(event.data);\r\n    $('#items').append(item);\r\n  }\r\n\r\nUsing a messaging database like Redis, this will work well.\r\n\r\n### Turbolinks\r\n\r\nTurbolinks will use AJAX to only grab the title and body of pages you load, without\r\nany assets. This can cause issues if you're using the `$(document).ready()` function\r\n\r\nTo fix this, use turbolinks with named functions\r\n\r\n  function initialize() {\r\n    $('#owner_active').click(function() {\r\n      alert(this.checked);\r\n    });\r\n  }\r\n  $(document).ready(initialize);\r\n  $(document).on('page:load', initialize);\r\n\r\nYou can also use the `jquery-turbolinks` gem to automatically use this functionality.\r\nBe sure to include it in your application.js below jquery\r\n\r\n  //= require jquery\r\n  //= require jquery.turbolinks\r\n  //= require jquery.ujs\r\n  //= require turbolinks\r\n\r\nYou can also bind events directly to the document.\r\n\r\n  function checkAlert() {\r\n    alert(this.checked);\r\n  }\r\n  $(document).on('click', '#owner_active', checkAlert);\r\n\r\nTurbolinks will speed up your site, but it will not show any browser default loading\r\nmessages. You will have to create your own.\r\n\r\n  # application.html\r\n  #loading Loading...\r\n\r\n  # application.css\r\n  #loading {\r\n    font-size: 24px;\r\n    color: #9900FF;\r\n    display: none;\r\n  }\r\n\r\nListen for turbo links events to show this loading div.\r\n\r\n  $(document).on('page:fetch', function() {\r\n    $('#loading').show();\r\n  });\r\n  $(document).on('page:change', function() {\r\n    $('#loading').hide();\r\n  });\r\n\r\nIf you have a link that you want to force a refresh, rather than turbolinks default behavior.\r\nUse the `"data-no-turbolink" => true` attribute\r\n\r\n  = link_to 'Requests', requests_path, "data-no-turbolink" => true\r\n\r\nIf used on a parent element, all the children will be opted out of turbolinks\r\n\r\n  #navigation{'data-no-turbolink' => true}\r\n    = link_to 'Show', @request\r\n	3	2015-03-31 21:14:40.037238	2015-03-31 21:14:40.037238
25	Railscast - 405 - AngularJS	railscast-405-angularjs	Generate a new controller for the app, it will be just a one page app in this case.\r\n\r\n    rails g controller raffle index\r\n\r\nYou can add angular js to the vendor javascripts, or use the gem `angularjs-rails`. Then reference it in the javascript manifest\r\n\r\n    //= require jquery\r\n    //= require jquery_ujs\r\n    //= require angular\r\n    //= require_tree .\r\n\r\nAdd the `ng-app` attribute to your application.html file\r\n\r\n    <html ng-app>\r\n\r\nIn the template for the raffle:\r\n\r\n    <h1>Raffler</h1>\r\n\r\n    <form>\r\n      <input type="text" ng-model="newEntry.name">\r\n    </form>\r\n\r\n    {{newEntry.name}}\r\n\r\nThis will display the text entry. To do more advanced functions add some javascript through a controller. Wrap the entire form in a div:\r\n\r\n    <div ng-controller="RaffleCtrl">\r\n      <form></form>\r\n      {{newEntry.name}}\r\n    </div>\r\n\r\nThen in a seperate javascript file you can define the controller\r\n\r\n    # raffle.js.coffee\r\n\r\n    @RaffleCtrl = ($scope) ->\r\n      $scope.entries = [\r\n        {name: 'Larry'}\r\n        {name: 'Curly'}\r\n        {name: 'Moe'}\r\n      ]\r\n\r\nYou can access this array anywhere inside the `RaffleCtrl` controller\r\n\r\n    <ul>\r\n      <li ng-repeat="entry in entries">\r\n        {{entry.name}}\r\n      </li>\r\n    </ul>\r\n\r\nThen you can add names to the list from the form\r\n\r\n    <form ng-submit="addEntry()">\r\n      <input type="text" ng-model="NewEntry.name">\r\n      <input type="submit" value="Add">\r\n    </form>\r\n\r\nDefine the function within the `@RaffleCtrl` function\r\n\r\n    $scope.addEntry = ->\r\n      $scope.entries.push($scope.newEntry)\r\n      # clear the text field\r\n      $scope.newEntry = {}\r\n\r\nThen we'll create a function to draw the winner.\r\n\r\n    # index.html\r\n\r\n    <button ng-click="drawWinner()">Draw Winner</button>\r\n\r\n    # raffle.js.coffee\r\n\r\n    $scope.drawWinner = ->\r\n      entry = $scope.entries[Math.floor(Math.random()*$scope.entries.length)]\r\n      entry.winner = true\r\n      $scope.lastWinner = entry\r\n\r\nTo display the winner:\r\n\r\n    # index.html\r\n\r\n    <li ng-repeat="entry in entries">\r\n      {{entry.name}}\r\n      <span ng-show="entry.winner" ng-class="{highlight: entry == lastWinner}" class="winner">WINNER</span>\r\n    </li>\r\n\r\nWe can modify this to only choose from the entries that haven't won before.\r\n\r\n    # raffle.js.coffee\r\n\r\n    $scope.drawWinner = ->\r\n      pool = []\r\n      angular.forEach $scope.entries, (entry) ->\r\n        pool.push(entry) if !entry.winner\r\n      if pool.length > 0\r\n        entry = pool[Math.floor(Math.random()*pool.length)]\r\n        entry.winner = true\r\n        $scope.lastWinner = entry\r\n\r\n## Server setup\r\n\r\nGenerate a resource to save entries\r\n\r\n    rails g resource entry name winner:boolean\r\n\r\n    rake db:migrate\r\n\r\nIn the seeds.rb file you can add some entries\r\n\r\n    # seeds.rb\r\n\r\n    Entry.create!(name: 'Matz')\r\n    Entry.create!(name: 'DHH')\r\n    Entry.create!(name: 'Jose Valim')\r\n    Entry.create!(name: 'Avdi Grimm')\r\n    Entry.create!(name: 'Steve Klabnik')\r\n    Entry.create!(name: 'Aaron Patterson')\r\n\r\n    # command line\r\n\r\n    rake db:seed\r\n\r\nWe'll communicate with Angular through a JSON API.\r\n\r\n    # entries_controller\r\n\r\n    respond_to :json\r\n\r\n    def index\r\n      respond_with Entry.all\r\n    end\r\n\r\n    def show\r\n      respond_with Entry.find(params[:id])\r\n    end\r\n\r\n    def create\r\n      respond_with Entry.create(params[:entry])\r\n    end\r\n\r\n    def update\r\n      respond_with Entry.update(params[:id], params[:entry])\r\n    end\r\n\r\n    def destroy\r\n      respond_with Entry.destroy(params[:id])\r\n    end\r\n\r\nTo communicate with the server, you'll need the `angular-resource` script which is included in the gem\r\n\r\n    //= require angular-resource\r\n\r\nThen you need to define the resource as a dependency, so you'll create a module.\r\n\r\n    # raffle.js.coffee\r\n\r\n    app = angular.module('Raffler', ['ngResource'])\r\n\r\n    @RaffleCtrl = ($scope, $resource) ->\r\n      Entry = $resource("/entries/:id", {id: "@id"}, {update: {method: "PUT"}})\r\n      $scope.entries = Entry.query()\r\n\r\n      $scope.addEntry = ->\r\n        entry = Entry.save($scope.newEntry)\r\n        $scope.entries.push(entry)\r\n        $scope.newEntry = {}\r\n\r\n      $scope.drawWinner = ->\r\n        pool = []\r\n        angular.forEach $scope.entries, (entry) ->\r\n          pool.push(entry) if !entry.winner\r\n        if pool.length > 0\r\n          entry = pool[Math.floor(Math.random()*pool.length)]\r\n          entry.winner = true\r\n          entry.$update()\r\n          $scope.lastWinner = entry\r\n\r\n    # application.html\r\n\r\n    <html ng-app="Raffler"></html>\r\n\r\nTo refactor this, pass the entry resource into a *service*.\r\n\r\n    # raffle.js.coffee\r\n\r\n    app.factory "Entry", ($resource) ->\r\n      $resource("/entries/:id", {id: "@id"}, {update: {method: "PUT"}})\r\n\r\n    @RaffleCtrl = ($scope, Entry) ->\r\n      $scope.entries = Entry.query()\r\n\r\nBecause Rails will automatically minify javascript assets for production, you'll need to define the variables as part of an array for any function that uses a service\r\n\r\n    # raffle.js.coffee\r\n\r\n    app.factory "Entry", ["$resource", ($resource) ->\r\n      # code...\r\n    ]\r\n\r\n    @RaffleCtrl = ["$scope", "Entry", ($scope, Entry) ->\r\n      # code...\r\n    ]\r\n\r\nAlternatively, in the production.rb environment change how compression is done.\r\n\r\n    config.assets.compress = true\r\n\r\n    config.assets.js_compressor = Sprockets::LazyCompressor.new { Uglifier.new(mangle: false) }\r\n	3	2015-03-31 21:14:40.091408	2015-03-31 21:14:40.091408
26	RailsCast - Advanced Search	railscast-advanced-search	Generate a model that will be used to search\r\n\r\n    rails g model search keywords:string category_id:integer min_price:decimal max_price:decimal\r\n\r\nCreate a controller to use the model.\r\n\r\n    rails g controller searches\r\n\r\nIn the routes file:\r\n\r\n    resources :searches\r\n\r\nCreate a link to the 'advanced search'\r\n\r\n    = link_to 'Advanced Search', new_search_path\r\n\r\nIn the SearchesController\r\n\r\n    def new\r\n      @search = Search.new\r\n    end\r\n\r\nCreate a form to search the database\r\n\r\n    %h1 Advanced Search\r\n\r\n    = form_for @search do |f|\r\n      %ol\r\n        %li\r\n          = f.label :keywords\r\n          = f.text_field :keywords\r\n        %li\r\n          = f.label :category_id\r\n          = f.collection_select :category_id, Category.order(:name), :id, :name, :include_blank: true\r\n        %li\r\n          = f.label :min_price, 'Price Range'\r\n          = f.text_field :min_price, size: 10\r\n          = f.text_field :max_price, size: 10\r\n        %li.actions\r\n          = f.submit "Search"\r\n\r\nYou'll need a `create` action for when the form is submitted\r\n  \r\n    # searches_controller.rb\r\n    def create\r\n      @search = Search.create!(params[:search])\r\n      redirect_to @search\r\n    end\r\n\r\n    def show\r\n      @search = Search.find(params[:id])\r\n    end\r\n\r\nThe show template:\r\n\r\n    %h1 Search results\r\n\r\n    = render @search.products\r\n\r\nAdd a method in the search model to handle the search results\r\n\r\n    def products\r\n      @products ||= find_products\r\n    end\r\n\r\n    private\r\n\r\n      def find_products\r\n        products = Product.order(:name)\r\n        products = products.where("name like ?", "%#{keywords}%") if keywords.present?\r\n        products = products.where(category_id: category_id) if category_id.present?\r\n        products = products.where("price >= ?", min_price) if min_price.present?\r\n        products = products.where("price <= ?", max_price) if max_price.present?\r\n        products\r\n      end\r\n\r\nThe `searches` table can get quite large. You can set up a rake task to clear the search table\r\n\r\n    # lib/tasks/searches.rake\r\n\r\n    desc "Remove searches older than a month"\r\n    task :remove_old_searches => :environment do\r\n      Search.delete_all ["created_at < ?", 1.month.ago]\r\n    end\r\n\r\nYou may want to trigger this via a cron job, with the whenever gem.\r\n	3	2015-03-31 21:14:40.145836	2015-03-31 21:14:40.145836
27	Railscast - 165- Edit Multiple	railscast-165-edit-multiple	## Simple Checkbox\r\n\r\nIn the index view\r\n\r\n    # views/products/index.html.haml\r\n\r\n    = form_tag discontinue_products_path, method: :put do\r\n      %table\r\n        - @products.each do |product|\r\n          %tr\r\n            -# the square brackest will submit an array to the controller action\r\n            -# that the form submits to.\r\n            %td= check_box_tag "product_ids[]", product.id\r\n            %td= product.name\r\n      = submit_tag "Discontinue Checked"\r\n\r\nCreate a route for the path in your routes file\r\n\r\n    resources :products do\r\n      collection do\r\n        put :discontinue\r\n      end\r\n    end\r\n\r\nThis will go to the discontinue action on the ProductsController\r\n\r\n    def discontinue\r\n      Product.update_all({discontinued: true}, {id: params[:product_ids]})\r\n      redirect_to products_url\r\n    end\r\n    \r\n## Edit Multiple fields\r\n\r\nYou will need to go to a seperate form for editing multiple fields. Change the form created in the previous\r\nexample to link to another form. You may want to make it a post request, but get is fine for a few items:\r\n\r\n    # views/products/index.html.haml\r\n\r\n    = form_tag edit_multiple_products_path, method: :get do\r\n      %table\r\n        - @products.each do |product|\r\n          %tr\r\n            -# the square brackest will submit an array to the controller action\r\n            -# that the form submits to.\r\n            %td= check_box_tag "product_ids[]", product.id\r\n            %td= product.name\r\n      = submit_tag "Edit Checked"\r\n\r\nEdit your routes to handle this\r\n\r\n    resources :products do\r\n      collection do\r\n        get :edit_multiple\r\n        put :update_multiple\r\n      end\r\n    end\r\n\r\nDefine the actions in the ProductsController\r\n\r\n    def edit_multiple\r\n      @products = Product.find(params[:product_ids])\r\n    end\r\n\r\nCreate a template for this. Fields for is useful to use by itself in this case.\r\n\r\n    %h1 Edit Checked Products\r\n\r\n    = form_tag update_multiple_products_path, method: :put do\r\n      - @products.each do |product|\r\n        %h2= product.name\r\n        = fields_for "products[]", product do |f|\r\n          - if product.errors.any?\r\n            %p\r\n              = pluralize(product.errors.count, "error")\r\n              prohibited this product from being saved:\r\n            %ul\r\n              - product.errors.full_messages.each do |msg|\r\n                %li= msg\r\n          %ol\r\n            %li\r\n              = f.label :name\r\n              = f.text_field :name\r\n      = submit_tag "Update"\r\n\r\nThe form will be submitted with `product[1][name]` type names. This indicates a hash you will use to get the data.\r\n\r\nThen create the controller action\r\n\r\n    def update_multiple\r\n      @products = Product.update(params[:products].keys, params[:products].values)\r\n      @products.reject! { |p| p.errors.empty? }\r\n      if @products.empty?\r\n        redirect_to products_url\r\n      else\r\n        render 'edit_multiple'\r\n      end\r\n    end\r\n\r\n## Edit Multiple items with one field\r\n	3	2015-03-31 21:14:40.20492	2015-03-31 21:14:40.20492
28	RailsCast - 196 - Nested Model Form	railscast-196-nested-model-form	The models:\r\n\r\n    # survey.rb\r\n\r\n    attr_accessible :name\r\n    has_many :questions\r\n\r\n    # question.rb\r\n\r\n    attr_accessible :content, :survey_id\r\n    belongs_to :survey\r\n    has_many :answers\r\n\r\n    # answer.rb\r\n\r\n    attr_accessible :content, :question_id\r\n    belongs_to :question\r\n\r\nIf you want to pass questions into your survey form, add this to the model:\r\n\r\n    accepts_nested_attributes_for :questions\r\n\r\nYou will also need to add an `_attributes` attr_accessible (probably strong parameter too?)\r\n\r\n    attr_accessible :name, :questions_attributes\r\n\r\nAdd fields for your questions association.\r\n\r\n    = form_for @survey do |f|\r\n      %li\r\n        = f.label :name\r\n        = f.text_field :name\r\n      \r\n      = f.fields_for :questions do |builder|\r\n        %li\r\n          = builder.label :content, "Question"\r\n          = builder.text_area :content\r\n\r\n\r\n      %li.actions\r\n        = f.submit\r\n\r\nYou can also use a checkbox to remove the associations. The model will need an `allow_destroy` option set to true\r\n\r\n    # survey.rb\r\n\r\n    accepts_nested_attributes_for :questions, allow_destroy: true\r\n\r\n    # form.html\r\n\r\n    = builder.label :content, "Question"\r\n    = builder.text_area :content\r\n    %br/\r\n    = builder.check_box :_destroy\r\n    = builder.label :_destroy, "Remove Question"\r\n\r\nYou can repeat the process for deeply nested models. To clean it up, move the nested fields into partials.\r\n\r\nIt may be more convenient to manipulate *add* and *remove* options with JavaScript. To do this,\r\nfirst store the `:_destroy` action in a hidden field\r\n\r\n    f.label :content, "Answer"\r\n    f.text_field :content\r\n    = f.hidden_field :_destroy\r\n    = link_to "remove", "#", class: "remove_fields"\r\n\r\nThen, in your JavaScript file:\r\n\r\n    jQuery ->\r\n      $('form').on 'click', '.remove_fields', (event) ->\r\n        $(this).prev('input[type=hidden]').val('1')\r\n        $(this).closest('fieldset').hide()\r\n        event.preventDefault()\r\n\r\nTo add questions and answers is a little more difficult. You'll need to make a helper, in this case\r\ncalled `link_to_add_fields`\r\n\r\n    # _question_fields.html\r\n\r\n    = link_to_add_fields "Add Answer", f, :answers\r\n\r\n    # application_helper.rb\r\n\r\n    def link_to_add_fields(name, f, assocation)\r\n      new_object = f.object.send(association).klass.new\r\n      id = new_object.object_id\r\n      fields = f.fields_for(association, new_object, child_index: id) do |builder|\r\n        render(association.to_s.singularize + "_fields", f: builder)\r\n      end\r\n      link_to(name, '#', class: 'add_fields', data: { id: id, fields: fields.gsub("\\n", "")})\r\n    end\r\n\r\n    # surveys.js.coffee\r\n\r\n    $('form').on 'click', '.add_fields', (event) ->\r\n      time = new Date().getTime()\r\n      regexp = new RegExp($(this).data('id'), 'g')\r\n      $(this).before($(this).data('fields').replace(regexp, time))\r\n      event.preventDefault()\r\n	3	2015-03-31 21:14:40.257563	2015-03-31 21:14:40.257563
29	RailsCast 416 Form Objects	railscast-416-form-objects	Store your form object in a `app/forms` directory.\r\n\r\n    # app/forms/password_form.rb\r\n\r\n    class PasswordForm\r\n      include ActiveModel::Model\r\n\r\n      attr_accessor :original_password, :new_password\r\n\r\n      [validations]\r\n\r\n      [callbacks]\r\n\r\n      [functions]\r\n    end\r\n\r\nYou'll access this object as you would a model. Any models that you will use in this\r\nobject will need to be initialized\r\n\r\n    def initialize(user)\r\n      @user = user\r\n    end\r\n\r\nAny functions that were original `self.` will change then to the model (i.e. `user.`)\r\nBy using the form object, you might not need strong parameters. This may mean you need\r\nto include the `attr_accessor` methods in your form object.\r\n\r\nIn your controller, you will access the form object with a custom function\r\n\r\n    def create\r\n      @password_form = PasswordForm.new(current_user)\r\n      if @password_form.submit(params[:password_form])\r\n        redirect_to current_user, notice: 'Sucessfully changed password.'\r\n      else\r\n        render 'new'\r\n      end\r\n    end\r\n\r\nDefine the submit method:\r\n\r\n    def submit(params)\r\n      self.original_password = params[:original_password]\r\n      self.new_password = params[:new_password]\r\n      self.new_password_confirmation = params[:new_password_confirmation]\r\n      if valid?\r\n        @user.password = new_password\r\n        @user.save!\r\n        true\r\n      else\r\n        false\r\n      end\r\n    end\r\n\r\n`accepts_nested_attributes_for` is not usually necessary with form objects, because\r\nthis functionality is defined in the form object. You can use the `delegate` method\r\nfor this.\r\n\r\n    # forms/signup_form.rb\r\n\r\n    delegate :username, :email, :password, :password_confirmation, to: :user\r\n    delegate :twitter_name, :github_name, :bio, to: :profile\r\n\r\n    def user\r\n      @user ||= User.new\r\n    end\r\n\r\n    def profile\r\n      @profile ||= user.build_profile\r\n    end\r\n\r\nYou'll have to split up the params hash to use with the different models.\r\n\r\n    def submit(params)\r\n      user.attributes = params.slice(:email, :password, :password_confirmation)\r\n      profile.attributes = params.slice(:twitter_name, :github_name, :bio)\r\n      self.subscribed = params[:subscribed]\r\n      if valid?\r\n        generate_token\r\n        user.save!\r\n        profile.save!\r\n        true\r\n      else\r\n        false\r\n      end\r\n    end\r\n\r\nIf you don't want to use the form object name in your parameters, you can define it specifically:\r\n\r\n    # forms/signup_form.rb\r\n\r\n    def self.model_name\r\n      ActiveModel::Name.new(self, nil, "User")\r\n    end\r\n	3	2015-03-31 21:14:40.308089	2015-03-31 21:14:40.308089
30	Hacking with Arel	hacking-with-arel	Rather than a long SQL query, you can break things into named scopes. For example:\r\n\r\n    def self.search(query)\r\n      where("released_at <= ? and (discontinued_at is null or discontinued_at > ?) and stock >= ? and name like ?", Time.zone.now, Time.zone.now, 2, "%#{query}%")\r\n    end\r\n\r\n### Refactoring\r\n\r\nA simple way to make things more readable is to turn `?`s into hashes.\r\n\r\n    where("name = :name and title = :title", name: name, title: title)\r\n\r\nYou may want to move sections into named scopes for reusability\r\n\r\n    scope :released,  -> { where('released_at <= ?', Time.zone.now) }\r\n    scope :not_discontinued, -> { where('discontinued_at is null or discontinued_at > ?', Time.zone.now) }\r\n    scope :in_stock,  -> { where("stock >= ?", 2) }\r\n    scope :available, -> { released.not_discontinued.in_stock }\r\n    scope :search,    ->(query) { available.where('name like ?', "%#{query}%") }\r\n\r\nYou could instead just define a class method, if you have a lot of arguments\r\n\r\n    def self.search(query)\r\n      available.wher("name like ?", "%@{query}%")\r\n    end\r\n\r\nThese all contain raw SQL, however. To avoid this use *arel*. \r\n\r\n### Experimenting with *arel*\r\n\r\nYou can experiment with *arel* in the console.\r\n\r\n\r\n    t = Product.arel_table\r\n    # returns Arel object\r\n    t[:price].lt(10)\r\n    # returns Arel node matching query.\r\n    Product.where(_)\r\n    # Search product table with result of t[:price].lt(10)\r\n\r\nThere isn't a lot of documentation available, so browsing the source code on github is important.\r\nYou can learn about the predicates available from the `/lib/arel/predications.rb` file. There is also\r\na list of adapters in the `/lib/arel/vistors` directory.\r\n\r\n    Product.where(t[:name].matches("%catan%"))\r\n    # performs the appropriate grep using any available database.\r\n\r\nApplying this to the `product.rb` class in the app:\r\n\r\n    def self.search(query)\r\n      available.where(arel_table[:name].matches("%#{query}%"))\r\n    end\r\n\r\n### Using Arel as a generator\r\n\r\nYou can also use Arel to generate the names scopes. For example, you can generate a method:\r\n\r\n    scope :released, -> { released_at_lt(Time.zone.now) }\r\n\r\nThis functionality should be added as an `initializer`\r\n\r\n    # config/initializers/scope_generator.rb\r\n\r\n    module ScopeGenerator\r\n\r\n      def generate_scopes\r\n\r\n        # this will automatically generate scopes for all of the columns on a given table.\r\n        columns.each do |column|\r\n\r\n          # determines the type of predicates to create based on type of column.\r\n          predicates_for(column).each do |predicate|\r\n\r\n            # this gives the name to each scope and runs the arel_table where clause\r\n            scope "#{column.name}_#{predicate}", ->(value) do\r\n              where(arel_table[column.name].send(predicate, value))\r\n            end\r\n          end\r\n        end\r\n      end\r\n\r\n      def predicates_for(column)\r\n        base = [:eq, :not_eq, :in, :not_in]\r\n        case column.type\r\n        when :integer, :float, :decimal, :date, :datetime, :timestamp, :time\r\n          base + [:lt, :lteq, :gt, :gteq]\r\n        when :string, :text\r\n          base + [:matches, :does_not_match]\r\n        else\r\n          base\r\n        end\r\n      end\r\n    end\r\n\r\n    # extend this module to ActiveRecord::Base once loaded\r\n    ActiveSupport.on_load :active_record do\r\n      extend ScopeGenerator\r\n    end\r\n\r\nNow you can generate these scopes by including `generate_scopes` in your model\r\n\r\n    class Product\r\n      generate_scopes\r\n\r\nNow you can simpilfy your scopes and queries.\r\n\r\n    generate_scopes\r\n\r\n    scope :not_discontinued, -> { #code }\r\n    scope :available, -> { released_at_lteq(Time.zone.now).not_discontinued.stock_gteq(2) }\r\n\r\n    def self.search(query)\r\n      available.name_matches("%#{query}%")\r\n    end\r\n\r\nThis will hit performance pretty hard if there are a lot of columns. So you may want to\r\noverride the method_missing call with something to just generate the scopes lazily, as they're called.\r\n\r\n### The `or` condition\r\n\r\nA nice syntax would be:\r\n\r\n    scope :not_discontinued, -> { discontinued_at_eq(nil) | discontinued_at_gt(Time.zone.now) }\r\n\r\nTo be able to this, you need to understand how arel and active record work together.\r\n\r\n    Product.where(stock: 2).arel.class\r\n    # Returns Arel::SelectManager\r\n    Product.where(stock: 2).arel.constraints\r\n    # Returns a list of nodes, basically showing all the available columns\r\n    _.first.or(Product.where(id: 1).arel.constraints.first)\r\n    # Take a node out of the first constraint and pass it another node.\r\n    Product.where(_)\r\n    # Use active record to query the arel node, returns the result of an *or* statement\r\n\r\nTo put this in the project, create a new initializer:\r\n\r\n    # config/initializers/scope_operators.rb\r\n    module ScopeOperators\r\n      def or(other)\r\n\r\n        # returns an array of possibly many constraints, so they must be reduced and merged\r\n        left = arel.constraints.reduce(:and) # a.and(b).and(c)\r\n        right = other.arel.constraints.reduce(:and)\r\n        scope = merge(other)\r\n\r\n        # where typically returns and, but in this case we are overwriting `where_values`\r\n        # to return or.\r\n        scope.where_values = [left.or(right)]\r\n        scope\r\n      end\r\n\r\n      alias_method :|, :or\r\n    end\r\n\r\n    ActiveSupport.on_load :active_record do\r\n      ACtiveRecord::RElation.send(:include, ScopeOperators)\r\n    end\r\n\r\nYou can create other custom methods in this way\r\n\r\n    def not(other)\r\n      left = arel.constraints.reduce(:and)\r\n      right = other.arel.constraints.reduce(:and)\r\n      scope = merge(other)\r\n      scope.where_values = [left, right.not]\r\n      scope\r\n    end\r\n\r\n    alias_method :-, :not\r\n\r\n    def and(*args)\r\n      merge(*args)\r\n    end\r\n\r\n    alias_method :&, :and\r\n\r\n### Alternative to magic scopes\r\n\r\nYou may want to do something like this instead:\r\n\r\n    scope :available, -> { match(released_at: {lteq: Time.zone.now}) }\r\n\r\nThis will also need an initializer\r\n\r\n    # /config/initializers/match_scope.rb\r\n    module MatchScope\r\n      def match(matches)\r\n        clause = matches.map do |attribute, conditions|\r\n          Array.wrap(conditions).map do |predicates|\r\n            predicates = predicates.kind_of?(Hash) ? predicates : {eq: predicates}\r\n            predicates.map do |predicate, value|\r\n              arel_table[attribute].send(predicate, value)\r\n            end.reduce(:and)\r\n          end.reduce(:or)\r\n        end.reduce(:and)\r\n        where(clause)\r\n      end\r\n    end\r\n\r\n    ActiveSupport.on_load :active_record do\r\n      extend MatchScope\r\n    end\r\n\r\nYou can then simplify your search method:\r\n\r\n    # app/models/product.rb\r\n\r\n    def self.search(query)\r\n      match(\r\n        released_at: {lteq: Time.zone.now},\r\n        discontinued_at: [nil, {gt: Time.zone.now}],\r\n        stock: {gteq: 2},\r\n        name: {matches: "%#{query}%"}\r\n      )\r\n    end\r\n	3	2015-03-31 21:14:40.359452	2015-03-31 21:14:40.359452
31	RailsGuides - Getting Started with Engines	railsguides-getting-started-with-engines	## Engine examples\r\n\r\n* Devise: Authentication\r\n* Forem: Forum\r\n* Spree: eCommerce\r\n* RefineryCMS: CMS\r\n\r\n## Generating\r\n\r\n    rails plugin new blorgh --mountable\r\n\r\nMore info about options for a plugin can be seen with:\r\n\r\n    rails plugin --help\r\n\r\nUsing the `--full` options tells the generator that you want to create an engine. This includes\r\na skeleton structure:\r\n\r\n* app\r\n* config/routes.rb\r\n* lib/blorgh/engine.rb\r\n\r\nThe `--mountable` option also does this, it also uses a namespace and creates:\r\n\r\n* Asset manifest files\r\n* `ApplicationController`\r\n* `ApplicationHelper`\r\n* Layout view template\r\n\r\nIn the engine a `test/dummy` application will be created, that points to the engine in it's routes with:\r\n\r\n    mount Blorgh::Engine, at: "blorgh"\r\n\r\n### Inside an Engine\r\n\r\nThe `blorgh.gemspec` file will need to be included from the application's gemfile\r\n\r\n    gem 'blorgh', path: 'vender/engines/blorgh'\r\n\r\nRun `bundle install` as usual once added. This will create file in your lib directory\r\nto define the base module. The `lib/blorgh/engine.rb` defines a base class for the engine.\r\n\r\n    module Blorgh\r\n      class Engine < Rails::Engine\r\n        isolate_namespace Blorgh\r\n      end\r\n    end\r\n\r\nThe `isolate_namespace` method is responsible for isolating the namespace from similar components\r\nin the main application. So any `rails g` commands will create classes within the namespace.\r\n\r\nThere is `test` directory that contains a simple app to use when testing the engine.\r\n\r\n## Providing engine functionality\r\n\r\nThe demo will create a blog. To do this many things are the same as they would be in any rails application.\r\n\r\n    rails generate scaffold post title:string text:text\r\n    rails generate model Comment post_id:integer text:text\r\n    rake db:migrate\r\n\r\nEverything the generator creates will be namespaced so it's ready to mount in another app. You can view the engine\r\nby running a server from `test/dummy` and going to `blorgh/posts` in your browser.\r\n\r\nTo implement commenting:\r\n\r\n    # Command Line\r\n\r\n    rails g controller comments\r\n\r\n    # views/blorgh/posts/show.html\r\n\r\n    %h3 Comments\r\n    = render @post.comments\r\n    = render 'blorgh/comments/form'\r\n\r\n    # models/blorgh/post.rb\r\n\r\n    has_many :comments\r\n\r\n    # views/blorgh/comments/_comment.html\r\n    \r\n    = comment_counter + 1\r\n    = comment.text\r\n\r\n    # views/blorgh/comments/_form.html\r\n\r\n    %h3 New comment\r\n    = form_for [@post, @post.comments.build] do |f|\r\n      %p\r\n        = f.label :text\r\n        = f.text_area :text\r\n      = f.submit\r\n\r\n    # config/routes.rb\r\n\r\n    resources :posts do\r\n      resources :comments\r\n    end\r\n\r\n    # controllers/blorgh/comments_controller.rb\r\n\r\n    def create\r\n      @post = Post.find(params[:post_id])\r\n      @comment = @post.comments.create(comment_params)\r\n      flash[:notice] = "Comment has been created!"\r\n      redirect_to posts_path\r\n    end\r\n\r\n    private\r\n      def comment_params\r\n        params.require(:comment).permit(:text)\r\n      end\r\n\r\nIn this example, the `comment_counter` local variable is given by the `render @post.comments` call. It increments\r\neach time a comment is rendered.\r\n\r\n## Hooking into an application\r\n\r\nBecause you're developing the engine locally, you'll need to specify a path to it in your gemfile.\r\n\r\n    gem 'blorgh', path: '/path/to/blorgh'\r\n\r\nSpecify a path to the engine in your routes file as well\r\n\r\n    mount Blorgh::Engine, at: '/blog'\r\n\r\nThe engine will need to connect to the main application database so copy over the migrations.\r\n\r\n    rake blorgh:install:migrations\r\n    # if there are multiple engines: rake railties:install:migrations\r\n    rake db:migrate\r\n    # if there are multiple engines and you only want one: rake db:migrate SCOPE=blorgh VERSION=0\r\n\r\n### Using a class provided by the application\r\n\r\nYou should not hard code models in the engine that will be determined by the application. For example,\r\nthe Blorgh engine should have access an author, which in this case will come from the Users table\r\n\r\n    rails g model user name:string\r\n\r\nThe post form will need to set an author name\r\n\r\n    # views/blorgh/posts/_form.html\r\n\r\n    .field\r\n      = f.label :author_name\r\n      = f.text_field :author_name\r\n\r\n    # views/blorgh/posts/show.html\r\n\r\n    %p\r\n      %b Author:\r\n      = @post.author\r\n\r\n    # models/user.rb\r\n\r\n    # define the field to display in a view\r\n    def to_s\r\n      name\r\n    end\r\n\r\n    # controllers/blorgh/posts_controller.rb\r\n\r\n    def post_params\r\n      params.require(:post).permit(:title, :text, :author_name)\r\n    end\r\n\r\n    # Command Line\r\n\r\n    rails g migration add_author_id_to_blorgh_posts author_id:integer\r\n    #note, you'll need to run the rake blorgh:install:migrations command to run it from the application\r\n    rake db:migrate\r\n\r\nIn order for the post model to have access to this method, you'll set an `attr_accessor`. Then a `before_save`\r\nmethod can be used to make the association\r\n\r\n    attr_accessor :author_name\r\n    belongs_to :author, class_name: "User"\r\n\r\n    before_save :set_author\r\n\r\n    private\r\n      def set_author\r\n        self.author = User.find_or_create_by(name: author_name)\r\n      end\r\n\r\n### Using controller provided by the application\r\n\r\nGenerally controllers share code through the `ApplicationController`. For the blorgh engine you'll need to\r\nmodify the `app/controllers/blorgh/application_controller.rb` to inherit from this as well\r\n\r\n    class Blorgh::ApplicationController < ApplicationController\r\n    end\r\n\r\n### Configuring the Engine\r\n\r\nTo set up the customizable author class, define a setting in the configuration\r\n\r\n    # lib/blorgh.rb\r\n\r\n    mattr_accessor :author_class\r\n\r\n    # models/blorgh/post.rb\r\n\r\n    belongs_to :author, class_name Blorgh.author_class\r\n\r\n    self.author = Blorgh.author_class.constantize.find_or_create_by(name: author_name)\r\n\r\n*NOTE:* You can avoid using `constantize` more than once if it's in multiple places by creating a method\r\nto override the `author_class` getter\r\n\r\n    def self.author_class\r\n      @@author_class.constantize\r\n    end\r\n\r\n    belongs_to :author, class_name: Blorgh.author_class.to_s\r\n\r\n    self.author = Blorgh.author_class.find_or_create_by(name: author_name)\r\n\r\nIn the application, you can set this value by creating an intializer\r\n\r\n    # config/initializers/blorgh.rb\r\n\r\n    Blorgh.author_class = "User"\r\n\r\nYou can use intializers within the engine, as well as locales.\r\n\r\n## Testing an engine\r\n\r\nTesting can be done through the `test/dummy` application within your engine. You may have to explicity\r\ntell the application how to route to controllers\r\n\r\n    get :index, use_route: :blorgh\r\n\r\n## Improving engine functionality\r\n\r\nIf you wish to reference the main application from within the views of the Engines, use the `main_app` helper\r\n\r\n    = link_to "Home", main_app.root_path\r\n\r\n### Assets\r\n\r\nAssets should be namespaced, such as `app/assets/stylesheets/[engine_name]/style.css`\r\n\r\nYou may not need assets from your engine, you can define assets for precompilation in `engine.rb`\r\n\r\n    initializer "blorgh.assets.precompile" do |app|\r\n      app.config.assets.precompile += %w(admin.css admin.js)\r\n    end\r\n\r\n### Required gems\r\n\r\nDependencies should be specified inside the `.gemspec` file. To specify a dependency that should be installed with\r\nthe engine during a typical install, inside the `Gem::Specification` block of the `.gemspec` file add:\r\n\r\n    s.add_dependency "moo"\r\n    # for a development only dependency\r\n    s.add_development_dependency "moo"\r\n\r\nIf there are things you want to immediately require when the engine is required, add them before the engine's initialization\r\n\r\n    require 'other_engine/engine'\r\n    require 'yet_another_engine/engine'\r\n\r\n    module MyEngine\r\n      class Engine < ::Rails::Engine\r\n      end\r\n    end\r\n	3	2015-03-31 21:14:40.410905	2015-03-31 21:14:40.410905
32	Rails for Zombies	rails-for-zombies	## Level 1 - Into the CRUD\r\n\r\nHash\r\n: Series of key value pairs\r\n\r\n\tb = { :status => "I just ate some delicious brains", :zombie => "Jeb" }\r\n\r\n\tputs t[:status]\r\n\t# prints "I just ate some delicious brains."\r\n\r\n\tputs t.status\r\n\t# prints "I just ate some delicious brains."\r\n\r\nCreate a database item\r\n\r\n\tt = Tweet.new\r\n\tt.status = "I <3 Brains."\r\n\tt.zombie = "Jim"\r\n\tt.save\r\n\r\n\tt = Tweet.new(:status => "I <3 Brains", :zombie => "Jim")\r\n\tTweet.create(:status => "I <3 Brains", :zombie => "Jim")\r\n\r\nRead an item\r\n\r\n\tTweet.find(2)\r\n\tTweet.find(3, 4, 5)\r\n\tTweet.first\r\n\tTweet.last\r\n\tTweet.all\r\n\tTweet.count\r\n\tTweet.order(:zombie)\r\n\tTweet.limit(10)\r\n\tTweet.where(:zombie => "ash")\r\n\tTweet(:zombie => "ash").order(:zombie).limit(10)\r\n\r\nUpdate\r\n\r\n\tt = Tweet.find(3)\r\n\tt.zombie = "EyeballChomper"\r\n\tt.save\r\n\r\n\tt = Tweet.find(2)\r\n\tt.attributes = {:status => "Can I munch your eyeballs?", :zombie => "EyeballChomper"}\r\n\tt.save\r\n\r\n\tt = Tweet.find(2)\r\n\tt.update_attributes(:status => "Can I munch your eyeballs?", :zombie => "EyeballChomper")\r\n\r\nDelete\r\n\r\n\tt = Tweet.find(2)\r\n\tt.destroy\r\n\r\n\tTweet.find(2).destroy\r\n\r\n\tTweet.destroy_all\r\n\r\n## Level 2: Models\r\n\r\nThe singular 'Tweet' class will look for a plural 'tweets' table\r\n\r\n\tclass Tweet < ActiveRecord::Base\r\n\t\tvalidates_presence_of :status\r\n\tend\r\n\r\nNow the status must be defined, or it will return false and produce an error.\r\n\r\n\tt = Tweet.new\r\n\tt.save\r\n\t# returns false\r\n\tt.errors\r\n\t# returns {:status => ["can't be blank"]}\r\n\tt.errors[:status]\r\n\t# returns {"can't be blank"}\r\n\r\nAvailable Validation Types\r\n\r\n\tvalidates_presence_of :status\r\n\tvalidates_numericality_of :fingers\r\n\tvalidates_uniqueness_of :toothmarks\r\n\tvalidates_confirmation_of :password\r\n\tvalidates_acceptance_of :zombification\r\n\tvalidates_length_of :password, :minimum => 3\r\n\tvalidates_format_of :email, :with => /regex/i\r\n\tvalidates_inclusion_of :age, :in => 21..99\r\n\tvalidates_exclusion_of :age, :in => 0...21, :message => "Sorry you must be over 21"\r\n\r\nYou can combine validations\r\n\r\n\tvalidates :status, :presence => true, :length => { :minimum => 3 }\r\n\r\nRelationships\r\n\r\n\tclass Tweet < ActiveRecord::Base\r\n\t\tbelongs_to :zombie\r\n\tend\r\n\r\n\tclass Zombie < ActiveRecord::Base\r\n\t\thas_many :tweets\r\n\tend\r\n\r\nExample:\r\n\r\n\tz = Zombie.find(2)\r\n\r\n\tt = Tweet.create(:status => "Your eyelids taste like bacon.", :zombie => z)\r\n\tt.zombie.name\r\n\t# returns "Bob"\r\n\r\n\tz.tweets.count\r\n\t# returns 4\r\n\r\n\tz.tweets\r\n\t# returns tweets the zombie has done.\r\n\r\n## Level 3 - Views\r\n\r\n`views/layouts/application.html.erb` will be the master page\r\n\r\n\t<!DOCTYPE html>\r\n\t<html>\r\n\t<head>\r\n\t\t<title></title>\r\n\t\t<%= stylesheet_link_tag :all %>\r\n\t\t<%= javascript_include_tag :defaults %>\r\n\t\t<%= csrf_meta_tag %>\r\n\t</head>\r\n\t<body>\r\n\t\t<%= yield %>\r\n\r\n\t</body>\r\n\t</html>\r\n\r\nCreating links\r\n\r\n\t<%= link_to tweet.zombie.name, zombie_path(tweet.zombie) %>\r\n\r\nRenders `<a href="/zombies/">ash</a>\r\n\r\n1. How to find more info about options\r\n\tgit clone http://github.com/rails/rails.git\r\n\r\n2. Or go to [api.rubyonrails.org]\r\n3. [apidock.com/rails]\r\n4. [railsapi.com\r\n\r\nTo loop through a table:\r\n\r\n\t<% tweets = Tweet.all %>\r\n\r\n\t<% tweets.each do |tweet| %>\r\n\t<tr>\r\n\t\t<td><%= link_to tweet.status, tweet %></td>\r\n\t\t<td><%= link_to tweet.zombie.name, tweet.zombie %></td>\r\n\t\t<td><%= link_to "Edit", edit_tweet_path(tweet) %></td>\r\n\t\t<td><%= link_to "Delete", tweet, :method => :delete %></td>\r\n\t</tr>\r\n\t<% end %>\r\n\t<% if tweets.empty? %>\r\n\t\t<em>No Tweets Found</em>\r\n\t<% end %>\r\n\r\nLink to paths (3 will need tweet = Tweet.find(1)):\r\n\r\n\t<%= link_to "<link text>", <code> %>\r\n\r\n\tAction | Code | URL Generated\r\n\t-+-+-\r\n\tList all the tweets | tweets_path | /tweets\r\n\tNew tweet form | new_tweet_path | /tweets/new\r\n\tShow a tweet | tweet | /tweets/1\r\n\tEdit a tweet | edit_tweet_path(tweet) | /tweets/1/edit\r\n\tDelete a tweet | tweet, :method => :delete | /tweets/1\r\n\r\n## Level 4 - Controllers\r\n\r\nCreating a controller\r\n\r\n\tclass TweetsController < ApplicationController\r\n\t\tdef show\r\n\t\t\t@tweet = Tweet.find(params[:id])\r\n\t\tend\r\n\tend\r\n\r\nVariable scope\r\n: Using the '@' symbol, you can get access to the variable from your views.\r\n\r\nIf you want the route to be 'status' rather the 'show', you can add code to the show controller\r\n\r\n\tdef show\r\n\t\trender :action => 'status'\r\n\tend\r\n\r\nYou can render additional encoding types (xml, json) by including formats in the controller.\r\n\r\n\tdef show\r\n\t\t@tweet = Tweet.find(params[:id])\r\n\r\n\t\trespond_to do |format|\r\n\t\t\tformat.html # show.html.erb\r\n\t\t\tformat.xml { render :xml => @tweet }\r\n\t\t\tformat.json { render :json => @tweet }\r\n\t\tend\r\n\tend\r\n\r\nCommon actions\r\n\r\n\tdef index - list all tweets\r\n\tdef show - show a single tweet\r\n\tdef new - show a new tweet form\r\n\tdef edit - show an edit tweet form\r\n\tdef create - create a new tweet\r\n\tdef update - update a tweet\r\n\tdef destroy - delete a tweet\r\n\r\n### Adding some authorization.\r\n\r\nclass TweetsController < ApplicationController\r\n\tdef edit\r\n\t\t@tweet = Tweet.find(params[:id])\r\n\r\n\t\tif session[:zombie_id] != @tweet.zombie_id\r\n\t\t\tredirect_to(tweets_path, :notice => "Sorry, you can't edit this tweet")\r\n\t\tend\r\n\tend\r\nend\r\n\r\nThen print the notice in the layout\r\n\r\n\t<% if flash[:notice] %>\r\n\t\t<div id="notice"><%= flash[:notice] %></div>\r\n\t<% end %>\r\n\r\nYou can specify an action to be executed for all actions, or just some actions, to help make your code more DRY.\r\n\r\n\tbefore_filter :get_tweet, :only => [:edit, :update, :destroy]\r\n\tbefore_filter :check_auth, :only => [:edit, :update, :destroy]\r\n\r\n\tdef get_tweet\r\n\t\t@tweet = Tweet.find(params[:id])\r\n\tend\r\n\r\n\tdef check_auth\r\n\t\tif session[:zombie_id] != @tweet.zombie_id\r\n\t\t\tredirect_to(tweets_path, :notice => "Sorry, you can't edit this tweet")\r\n\t\tend\r\n\tend\r\n\r\nIf you want to create a zombie and then redirect to that zombie.\r\n\r\n\tdef create\r\n\t\t@zombie = Zombie.create(params[:zombie])\r\n\t\tredirect_to zombie_path(@zombie)\r\n\tend\r\n\r\n## Routing\r\n\r\nA basic route will start with:\r\n\r\n\tZombieTwitter::Application.routes.draw do |map|\r\n\t\tresources :tweets\r\n\tend\r\n\r\nThe resources sets up basic routes\r\n\r\n\tCode | URL | Action\r\n\t-+-+-\r\n\ttweets_path | /tweets | def index\r\n\ttweet | /tweet/[id] | def show\r\n\tnew_tweet_path | /tweets/new | def new\r\n\tedit_tweet_path(tweet) | /tweets/[id]/edit | def edit\r\n\r\nYou can define a custom route in the routes file with:\r\n\r\n\tresources :tweets\r\n\tmatch 'new_tweet' => "Tweets#new"\r\n\r\nYou can define a named route:\r\n\r\n\tmatch 'all' => 'tweets#index', :as => "all_tweets"\r\n\r\n\t<%= link_to "All Tweets", all_tweets_path %>\r\n\r\nYou can redirect to a particular path\r\n\r\n\tmatch 'all' => redirect('/tweets')\r\n\tmatch 'google' => redirect('http://google.com')\r\n\t\r\n\t# root route\r\n\troot :to => "tweets#index"\r\n\r\n\t<%= link_to "All Tweets", root_path %>\r\n\r\nYou can set a route to reveal particular data sets\r\n\r\n\tdef index\r\n\t\tif params[:zipcode]\r\n\t\t\t@tweets = Tweet.where(:zipcode => params[:zipcode])\r\n\t\telse\r\n\t\t\t@tweets = Tweet.all\r\n\t\tend\r\n\r\n\t\trespond_to do |format|\r\n\t\t\tformat.html #index.html.erb\r\n\t\t\tformat.xml { render :xml => @tweets }\r\n\t\tend\r\n\tend\r\n\r\nYou get to this action by defining the route\r\n\r\n\tmatch 'local_tweets/:zipcode' => 'Tweets#index', :as => 'local_tweets'\r\n\r\nYou can set it up to show based on a user name.\r\n\r\n\t#Route\r\n\tmatch ':name' => 'tweet#index', :as => 'zombie_tweets'\r\n\r\n\t#View\r\n\t<%= link_to "Gregg", zombie_tweets_path('greggpollack') %>\r\n\r\n\t#Controller\r\n\tdef index\r\n\t\tif params[:name]\r\n\t\t\t@zombie = Zombie.where(:name => params[:name]).first\r\n\t\t\t@tweets = @zombie.tweets\r\n\t\telse\r\n\t\t\t@tweets = Tweet.all\r\n\t\tend\r\n\tend\r\n	3	2015-03-31 21:14:40.461464	2015-03-31 21:14:40.461464
33	RailsGuide - Caching	railsguide-caching	## Fragment Caching\r\n\r\nA basic example:\r\n\r\n    <% Order.find_recent.each do |o| %>\r\n      <%= o.buyer.name %> bought <%= o.product.name %>\r\n    <% end %>\r\n\r\n    <% cache do %>\r\n      All available products:\r\n      <% Product.all.each do |p| %>\r\n        <%= link_to p.name, product_url(p) %>\r\n      <% end %>\r\n    <% end %>\r\n\r\nThis will cache all the products available. This is bound to the action.\r\n\r\nIf you want to cache multiple fragments.\r\n\r\n    <% cache(action: 'recent', action_suffix: 'all_products') do %>\r\n      All available products:\r\n\r\nThen expire the cache (from the controller?)\r\n\r\n    expire_fragment(controller: 'products', action: 'recent', action_suffix: 'all_products')\r\n\r\nIf you don't want the cache block to be bound to the action, use a globally keyed fragment\r\n\r\n    <% cache('all_available_products') do %>\r\n      All available products:\r\n    <% end %>\r\n\r\nWhich can be expired with:\r\n\r\n    expire_fragment('all_available_products')\r\n\r\nYou can make a helper method to expire the cache\r\n\r\n    module ProductsHelper\r\n      def cache_key_for_products\r\n        count = Product.count\r\n        max_updated_at =\r\n          Product.maximum(:updated_at).try(:utc).try(:to_s, :number)\r\n        "products/all-#{count}-#{max_updated_at}"\r\n      end\r\n    end\r\n\r\nThis method generates a cache key that depends on all products. From the view it can be used:\r\n\r\n    <% cache(cache_key_for_products) do %>\r\n      All available products:\r\n    <% end %>\r\n\r\nYou can also use an Active Record model for the cache key\r\n\r\n    <% Product.all.each do |p| %>\r\n      <% cache(p) do %>\r\n        <%= link_to p.name, product_url(p) %>\r\n      <% end %>\r\n    <% end %>\r\n\r\nBehind the scenes, a method called `cache_key` is invoked.\r\nThis will return a string based on the model, id, and updated_at.\r\n	3	2015-03-31 21:14:40.512716	2015-03-31 21:14:40.512716
34	12 - ActiveRecord Associations	12-activerecord-associations	Related tables should have a `[related_table]_id` field. For example, `user_id` in any table can be referenced to the `user` table.\r\n\r\nWhen running a migration to update a table, you can use a default value to set existing items to a particular field default. For example:\r\n\r\n  add_column :issues, :project_id, :integer, default: 1\r\n\r\n`belongs_to`\r\n: Declare the parent table\r\n`has_many`\r\n: Declares a child that has many\r\n\r\nYou can then access the child with a loop\r\n\r\nThen you can generate a list of issues for each product:\r\n\r\n  %ul\r\n    - @project.issues.each do |issue|\r\n      %li= link_to issue.title, issue\r\n\r\nFrom the issue show page link back to it's project:\r\n\r\n  %b Project:\r\n  = link_to @issue.project.name, @issue.project\r\n\r\n`has_one`\r\n: This gives you a single result if there will only be one relationship.\r\n`has_many, through`\r\n: This association works with a bridge table\r\n\r\n  has_many :issues, through: :join_model\r\n\r\n  #if you need to access join model data:\r\n  has_many :join_model\r\n\r\n  has_many :projects, through: :join_model\r\n\r\n  #Join Model:\r\n\r\n  belongs_to :project\r\n  belongs_to :issues\r\n\r\n`has_many_and_belongs_to`\r\n: If you don't need to access anything in the join model.\r\n\r\n  has_many_and_belongs_to :projects\r\n  has_many_and_belongs_to :issues\r\n\r\nIn order to use `has_many_and_belongs_to` the table will need to be called issues_projects(alphabetical), with no other fields than the project_id and issue_id. You can see an example migration:\r\n\r\n  create_table :issues_projects, id: false do |t|\r\n    t.references :issues, null: false\r\n    t.references :project, null: false\r\n  end\r\n\r\n  add_index(:issues_projects, [:issue_id, :project_id], unique: true)\r\n\r\n## 13 - ActiveRecord Callbacks\r\n\r\nCall a method after an action\r\n\r\n`after_create`\r\n: Triggered after an object is created\r\n\r\n  after_save :add_to_timeline\r\n\r\n  private\r\n\r\n  def add_to_timeline\r\n    Timeline.create!({ content: "An issue was created!",\r\n      timelineable_id: id,\r\n      timelineable_type: self.class.to_s })\r\n  end\r\n\r\n`before_save`\r\n: Triggered before an object is saved\r\n\r\n  before_save :strip_spaces_from_tags\r\n\r\n  def strip_spaces_from_tags\r\n    self.tags.gsub! ", ", ","\r\n  end\r\n\r\n## 14 - Internationalization\r\n\r\nChange internationalization default locale in `config/application.rb`\r\n\r\nIn `config/locales/` there are yaml files for available locales. These can b e found in github at `rails-i18n`. Add the file from `rails/locale`\r\n\r\nTo allow changing of strings, use the `t` variable\r\n\r\n  =t "nav.timeline"\r\n\r\nThis will look through the yaml file.\r\n\r\n  nav:\r\n    timeline: Linha de tempo\r\n\r\nIf you want to be able to switch languages, in `application_controller.rb` add a `before_filter`\r\n\r\n  before_filter :set_locale\r\n\r\n  def set_locale\r\n    I18n.locale = params[:locale] || I18n.default_locale\r\n  end\r\n\r\nIn the routes file, create a scope and put all relevant routes inside of it.\r\n\r\n  scope "/:locale" do\r\n    get "timeline/index"\r\n\r\n    resources :projects\r\n\r\n    resources :issues\r\n  end\r\n\r\nYou may need to pass your `:id`s explicitly now, rather than just the object.\r\n\r\n  = link_to "Show", issue_path(id: issue.id)\r\n\r\nYou can translate other things in your controller using the `t()` helper\r\n\r\n  if @issue.save\r\n    format.html { redirect_to issue_path(id: @issue.id), notice: t('issues.created', title: @issue.title) }\r\n\r\nIn the yaml file:\r\n\r\n  issues:\r\n    created: 0 bilhete %{title} foi criado!\r\n\r\nTo change localization formating, use the `l` command\r\n\r\n  %b Created at:\r\n  = l @issue.created_at, format: :short\r\n\r\n## 15 - Asset Pipeline\r\n\r\n## 16 - The Gemfile\r\n\r\n## 17 - Sending Email\r\n\r\nSet up your SMTP configuration\r\n\r\n  config.action_mailer.delivery_method = :smtp\r\n  config.action_mailer.smtp_settings = {\r\n    address: 'smtp.mandrillapp.com',\r\n    port: '587',\r\n    enable_starttls_auto: true, #detects and uses STARTTLS\r\n    user_name: 'polycube@live.com',\r\n    password: 'zdAyKO6k9FAKYFVwqKZRQg',\r\n    authentication: 'login'\r\n  }\r\n\r\nSet up your mailer\r\n\r\n  rails g mailer post_mailer\r\n\r\nIn the `post_mailer`, define the delivery option\r\n\r\n  class PostMailer < ActionMailer::Base\r\n    default from: "rails@posts.com"\r\n\r\n    def post_created(issue)\r\n      @issue = issue\r\n      mail subject: 'A new posted was created', to: 'polycube@live.com'    \r\n    end\r\n  end\r\n\r\nIn the controller, call the `PostMailer`\r\n\r\n  if @post.save\r\n    PostMailer.post_created(@post).deliver\r\n\r\nCreate a view in `views/post_mailer` called `post_created`(based on the method name)\r\n\r\n  %h1 An issue has been created.\r\n\r\n  %p Hi, how are you?\r\n\r\n  %h2= @post.title\r\n\r\n  %p= @post.body\r\n\r\n  %p Bye!\r\n\r\n*NOTE:* Also include an .text.haml file, which will display the correct version based on the browser.\r\n\r\n## 18 - Final Tips\r\n\r\nSpend some time deciding on your domain object before jumping into Rails.\r\n\r\n### Useful References\r\n\r\n* Ruby on Rails guides\r\n* Railscasts\r\n* Ruby Toolbox - Organized gems\r\n* TutsPlus\r\n* reddit.com/r/rails\r\n* StackOverflow\r\n\r\n### Useful Gems\r\n\r\n* Authentication: Devise, Sorcery\r\n* File uploads: Carrierwave (post files and connect them to active record)\r\n* PDF Generation: PDFkit, Prawn\r\n* Deployment: Capistrano, Heroku\r\n* Fulltext Search: Sunspot, Thinking Sphinx\r\n* SOAP webservices: Savon\r\n\r\n### Testing\r\n\r\nTutsPlus Ruby Test Driven Development.\r\n	3	2015-03-31 21:14:40.561625	2015-03-31 21:14:40.561625
35	Ruby on Rails LiveLessons - with Mike Hartl	ruby-on-rails-livelessons-with-mike-hartl	## Lesson 3: Mostly Static Pages\r\n\r\n### Setting up the sample app\r\n\r\n  rails new sample_app -d postgresql -- skip-test-unit\r\n\r\nThe gem file may have some issues with Rails 4, here's what I have so far:\r\n\r\n\r\n  gem 'gravatar_image_tag'\r\n  gem 'will_paginate', '~> 3.0'\r\n  gem 'haml'\r\n  gem 'haml-rails'\r\n\r\n\r\n  group :development, :test do\r\n    gem 'rspec-rails', '~> 2.0'\r\n  end\r\n\r\n  group :development do\r\n    gem 'annotate', '2.4.0'\r\n    gem 'faker', '0.3.1'\r\n  end\r\n\r\n  group :test do\r\n    gem 'webrat', '0.7.1'\r\n    gem 'spork', '~> 1.0rc'\r\n    gem 'factory_girl_rails'\r\n    # gem 'autotest', '4.4.6'\r\n    # gem 'autotest-rails-pure', '4.1.2'\r\n    # gem 'autotest-fsevent', '0.2.4'\r\n    # gem 'autotest-growl', '0.2.9'\r\n  end\r\n\r\nJust for haml\r\n\r\n  html2haml app/views/layouts/application.html.erb app/views/layouts/application.html.haml\r\n\r\nInstall rspec\r\n\r\n  rails generate rspec:install\r\n\r\nSetup repository\r\n\r\n  git init\r\n  git add .\r\n  git commit -m "First Commit"\r\n\r\nDeploy\r\n\r\n  heroku create --stack cedar\r\n  git push heroku master\r\n\r\nRename README\r\n\r\n  git mv README.rdoc README.md\r\n\r\nCreate databases\r\n\r\n  rake db:create:all\r\n\r\nPrevent the generator from making too much\r\n\r\n  config.generators do |g|\r\n    g.stylesheets     false\r\n    g.javascripts     false\r\n    g.helper          false\r\n    g.view_specs      false\r\n    g.routing_specs   false\r\n  end\r\n\r\n### Static Pages\r\n\r\nGenerate the controller\r\n\r\n  rails generate controller Pages home help --no-test-framework\r\n\r\n*NOTE:* If you want to reset to your last commit, you can simple do:\r\n\r\n  git add .\r\n  git checkout -f\r\n\r\n### Our First Tests\r\n\r\n  rails generate integration_test pages\r\n\r\nIn the `spec/spec_helper.rb` file I needed to add this to the end of the config block:\r\n\r\n  config.include Capybara::DSL\r\n\r\nThe `pages_spec.rb` file will have blocks like this:\r\n\r\n  describe "Home Page" do\r\n\r\n    it "should have the content 'Sample App'" do\r\n      visit '/pages/home'\r\n      page.should have_selector('h1', text: 'Sample App')\r\n    end\r\n\r\n    it "should have the right title" do\r\n      visit '/pages/home'\r\n      page.should have_title('Sample App | Home')\r\n    end\r\n\r\n  end  \r\n\r\nAdd an about us page in the pages controller (spec, route, controller, view)\r\n\r\n*NOTE:* `have_title` is new to the capybara gems. Older versions may use have_selector('title')\r\n\r\n### Slightly Dynamic Pages\r\n\r\nUsing provide, you can apply variables using embedded ruby.\r\n\r\n  - provide(:title, 'Help')\r\n  = yield(:title)\r\n\r\nI used string interpolation:\r\n\r\n  %title= "Rails App | #{yield(:title)}"\r\n\r\n### Conclusion\r\n\r\n## Lesson 5: Filling In the Layout\r\n\r\n### Learning Objectives\r\n\r\n### Introduction\r\n\r\n### Adding some structure\r\n\r\nI'm choosing not to use the Bootstrap framework. Instead:\r\n\r\n  gem 'bourbon', '~> 3.1'\r\n  gem 'neat'\r\n  gem 'normalize-rails', '~> 2.1'\r\n\r\nHAML doesn't play nicely with the IE conditionals. So I created a partial called `_main.html.haml` and In the `application.html.erb`:\r\n\r\n  <!DOCTYPE html>\r\n  <!-- paulirish.com/2008/conditional-stylesheets-vs-css-hacks-answer-neither/ -->\r\n  <!--[if lt IE 7 ]> <html class="no-js ie6" lang="en"> <![endif]-->\r\n  <!--[if IE 7 ]> <html class="no-js ie7" lang="en"> <![endif]-->\r\n  <!--[if IE 8 ]> <html class="no-js ie8" lang="en"> <![endif]-->\r\n  <!--[if IE 9 ]> <html class="no-js ie9" lang="en"> <![endif]-->\r\n  <!--[if (gt IE 9)|!(IE)]> <!--> <html class="no-js" lang="en"> <![endif]-->\r\n    <%= render 'layouts/main' %>\r\n  </html>\r\n\r\n### Sass and the asset pipeline\r\n\r\nIf you don't want additional scss (and other) files generated when you run a generator:\r\n\r\n  config.generators do |g|\r\n    g.stylesheets     false\r\n    g.javascripts     false\r\n    g.helper          false\r\n    g.view_specs      false\r\n    g.routing_specs   false\r\n  end\r\n\r\n### Layout links\r\n\r\n### Pretty RSpec\r\n\r\n### User signup: A first step\r\n\r\n  rails generate controller Users new --no-test-framework\r\n\r\n  rails generate integration_test user_pages\r\n\r\n\r\n\r\n### Conclusion\r\n\r\n\r\n\r\n## Lesson 6: Modeling Users\r\n\r\n### Learning Objectives\r\n\r\n### Introduction\r\n\r\n### User model\r\n\r\n### User validations\r\n\r\n### Email format\r\n\r\n### Email uniqueness\r\n\r\n### Adding a secure password\r\n\r\n### Addendum with regex correction\r\n\r\n\r\n## Lesson 7: Sign Up\r\n\r\n### Learning Objectives\r\n\r\n### Introduction\r\n\r\n### Showing users\r\n\r\n### Signup form\r\n\r\n### Signup failure\r\n\r\n### Signup success\r\n\r\n### Refactoring the tests\r\n\r\n### Styling the form HTML\r\n\r\n### Signup error messages\r\n\r\n### Signup success (with Flash)\r\n\r\n### Solutions to exercises\r\n\r\n### Deploying to production with SSL\r\n\r\n### Conclusion\r\n\r\n\r\n## Lesson 8: Sign In, Sign Out\r\n\r\n### Learning Objectives\r\n\r\n### Introduction\r\n\r\n### Sessions\r\n\r\n### Signin failure\r\n\r\n### Signin success\r\n\r\n### sign_in & a remember token\r\n\r\n### A working signin method\r\n\r\n### current_user\r\n\r\n### Changing the layout links\r\n\r\n### Signing out\r\n\r\n### Intro to Cucumber (optional)\r\n\r\n### Deploying to Heroku\r\n\r\n### Addendum on current_user\r\n\r\n\r\n## Lesson 9: Updating, Showing, and Deleting Users\r\n\r\n### Learning Objectives\r\n\r\n### Introduction\r\n\r\n### Updating users\r\n\r\n### Successful edits\r\n\r\n### Requiring signed-in users\r\n\r\n### Requiring the right user\r\n\r\n### Friendly forwarding\r\n\r\n### Showing all users\r\n\r\n### Sample users\r\n\r\n### Pagination\r\n\r\n### Deleting users\r\n\r\n### Deploying to Heroku\r\n\r\n\r\n## Lesson 10: User Microposts\r\n\r\n### Learning Objectives\r\n\r\n### Introduction\r\n\r\n### A Micropost model\r\n\r\n### Showing microposts\r\n\r\n### Creating microposts\r\n\r\n### A proto-feed\r\n\r\n### Destroying microposts\r\n\r\n### Errata addendum\r\n\r\n\r\n## Lesson 11: Following Users\r\n\r\n### Learning Objectives\r\n\r\n### Introduction\r\n\r\n### The Relationship model\r\n\r\n### Followed users and followers\r\n\r\n### A web interface\r\n\r\n### Stats and a follow form\r\n\r\n### Following and followers pages\r\n\r\n### A working follow button\r\n\r\n### A follow button with Ajax\r\n\r\n### The status feed\r\n\r\n### Deploying the final sample app\r\n\r\n### Conclusion\r\n\r\n\r\n## Bonus\r\n\r\n### Installation\r\n\r\n### Advanced Setup\r\nSublime Text 2\r\n	3	2015-03-31 21:14:40.612263	2015-03-31 21:14:40.612263
36	Ruby Bits	ruby-bits	## Level 1: Expressions\r\n\r\nInstead of `if !` you can use `unless`\r\n\r\n\tunless tweets.empty?\r\n\t\tputs "Timeline:"\r\n\t\tputs tweets\r\n\tend\r\n\r\n*NOTE:* Probably not a good idea to use unless with an else statement.\r\n\r\nNil is treated as false\r\n\r\n\tif attachment.file_path\r\n\t\tattachment.post\r\n\tend\r\n\r\nThese are all true\r\n\r\n\t""\r\n\t0\r\n\t[]\r\n\r\nSo something like 'name.length' is always true.\r\n\r\nYou can write some conditionals on one line, to make it more readable\r\n\r\n\tfail "Password too short" if password.length < 8\r\n\tfail "No user name set" unless username\r\n\r\nAn `if` statement will check the first condition first, and not run the second if it is false.\r\n\r\n\tif user && user.signed_in?\r\n\r\n\tend\r\n\r\n### Short-Circuit Assignment\r\n\r\nThe first of a combination of assignments will be assigned in these cases:\r\n\r\n\tresult = nil || 1\r\n\tresult = 1 || nil\r\n\tresult = 1 || 2\r\n\r\nSo you can use\r\n\r\n\ttweets = timeline.tweets || []\r\n\t\r\nWhich is equivalent to\r\n\r\n\ttweets = timeline.tweets\r\n\ttweets = [] unless tweets\r\n\r\n### Conditional Assignment\r\n\r\nYou can check whether a variable has been set and assign a value if it hasn't\r\n\r\n\ti_was_set = 1\r\n\ti_was_set ||= 2\r\n\r\n\tputs i_was_set\r\n\t# returns 1\r\n\r\n\ti_was_not_set ||= 2\r\n\r\n\tputs i_was_not_set\r\n\t# returns 2\r\n\r\nSo you can use\r\n\r\n\toptions[:country] ||= 'us'\r\n\r\nRather than\r\n\t\r\n\toptions[:country] = 'us' if options[:country].nil?\r\n\r\n### Return Values\r\n\r\nConditionals always return a value. So you can expect a useable value from this:\r\n\r\n\toptions[:path] = if list_name\r\n\t\t"/#{user_name}/#{list_name}"\r\n\telse\r\n\t\t"/#{user_name}"\r\n\tend\r\n\r\nMethods also return values\r\n\r\n\tdef list_url(user_name, list_name)\r\n\t\tif list_name\r\n\t\t\t"https://twitter.com/#{user_name}/#{list_name}"\r\n\t\telse\r\n\t\t\t"https://twitter.com/#{user_name}"\r\n\t\tend\r\n\tend\r\n\r\nCase statements also return values, and can be used with regular expressions\r\n\r\n\ttweet_type = case tweet.status\r\n\t\twhen /\\A@\\w+/\r\n\t\t\t:mention\r\n\t\twhen /\\Ad\\s+\\w+/\r\n\t\t\t:direct_message\r\n\t\telse\r\n\t\t\t:public\r\n\tend\r\n\r\nYou can also use a case statement on a single line\r\n\r\n\ttweet_type = case tweet.status\r\n\t\twhen /\\A@\\w+/\t\t\t\tthen\t:mention\r\n\t\twhen /\\Ad\\s+\\w+/\t\tthen\t:direct_message\r\n\t\telse \t\t\t\t\t\t\t\t\t\t\t:public\r\n\tend\r\n\r\n#### Challenge Example\r\n\r\n\tdef search_index(games, search_term)\r\n\t  search_index = games.find_index(search_term)\r\n\r\n\t  if search_index\r\n\t    search_index\r\n\t  else\r\n\t    "Not Found"\r\n\t  end\r\n\tend\r\n\r\nCan be reduced to\r\n\r\n\tgames.find_index(search_term) || "Not Found"\r\n\r\n## Level 2: Methods and Classes\r\n\r\n### Optional Arguments\r\n\r\nSupplying a default for arguments allow you to put in optional arguments for your methods.\r\n\r\n\tdef tweet(message, lat = nil, long = nil)\r\n\r\n\tend\r\n\r\nOption hashes allow you to create a method without a string of optional arguments\r\n\r\n\tdef tweet(message, options = {})\r\n\t\tstatus = Status.new\r\n\t\tstatus.lat = options[:lat]\r\n\t\tstatus.long = options[:long]\r\n\t\tstatus.body = message\r\n\t\tstatus.reply_id = options[:reply_id]\r\n\t\tstatus.post\r\n\tend\r\n\r\n\ttweet("practicing Ruby-Fu!",\r\n\t\t\t\tlat: 28.55,\r\n\t\t\t\tlong: -81.33,\r\n\t\t\t\treply_id: 227946)\r\n\r\n#### Challenge example\r\n\r\n\tdef new_game(name, options = {})\r\n\t  {\r\n\t    name: name,\r\n\t    year: options[:year],\r\n\t    system: options[:system]\r\n\t  }\r\n\tend\r\n\tgame = new_game("Street Figher II", system: "SNES", year: 1992)\r\n\r\n### Exceptions\r\n\r\nSometimes you'll want to raise an exception, rather than printing a message about your error\r\n\r\n\tdef get_tweets(list)\r\n\t\tunless list.authorized?(@user)\r\n\t\t\traise AuthorizationException.new\r\n\t\tend\r\n\t\tlist.tweets\r\n\tend\r\n\r\nThen you call the method using `begin` and `rescue`\r\n\r\n\tbegin\r\n\t\ttweets = get_tweets(my_list)\r\n\trescue AuthorizationException\r\n\t\twarn "You are not authorized to access this list."\r\n\tend\r\n\r\n### 'Splat' Arguments\r\n\r\nCreates an array of arguments for your method using `*`\r\n\r\n\tdef describe_favorites(*games)\r\n\t  for game in games\r\n\t    puts "Favorite Game: #{game}"\r\n\t  end  \r\n\tend\r\n\tdescribe_favorites('Mario', 'Contra', 'Metroid')\r\n\r\n### When to use a class.\r\n\r\nOnce you have a series of data that may need formatting\r\n\r\n\tclass Name\r\n\t\tdef initialize(first, last = nil)\r\n\t\t\t@first = first\r\n\t\t\t@last = last\r\n\t\tend\r\n\r\n\t\tdef format\r\n\t\t\t[@last, @first].compact.join(', ')\r\n\t\tend\r\n\tend\r\n\r\nSometimes you'll want to be able to read an attribute but not set it. In that case use `attr_reader` instead of `attr_accessor`\r\n\r\n\tclass Tweet\r\n\t\tattr_accessor :status\r\n\t\tattr_reader :created_at\r\n\t\tdef initialize(status)\r\n\t\t\t@status = status\r\n\t\t\t@created_at = Time.new\r\n\t\tend\r\n\tend\r\n\r\nYou can reopen classes and also redefine functions at any point\r\n\r\n\tclass Tweet\r\n\t\tdef to_s\r\n\t\t\t"#{@status}\\n#{@created_at}"\r\n\t\tend\r\n\tend\r\n\r\nTo get attributes for a class, you need to use the `self.` prefix\r\n\r\n\tclass UserList\r\n\t\tattr_accessor :name\r\n\t\tdef initialize(name)\r\n\t\t\tself.name = name\r\n\t\tend\r\n\tend\r\n\r\n#### Challenge Examples\r\n\r\nCreate instance variables to use in the class\r\n\r\n\tclass Game\r\n\t  attr_accessor :name, :year, :system\r\n\t  attr_reader :created_at\r\n\t  def initialize(name, options={})\r\n\t    @name = name\r\n\t    @year = options[:year]\r\n\t    @system = options[:system]\r\n\t    @created_at = Time.now\r\n\t  end\r\n\tend\r\n\r\n## Level 3: Classes\r\n\r\nPassing data around as strings and numbers breaks encapsulation.\r\n\r\nYou should pass data in to the object\r\n\r\n\ttweet = Tweet.new\r\n\ttweet.status = "Practicing Ruby-Fu"\r\n\ttweet.owner_id = current_user.id\r\n\r\n\tsend tweet(tweet)\r\n\r\nThe data should be processed by a method within the class\r\n\r\n\tclass Tweet\r\n\t\tattr_accessor\r\n\r\n\t\tdef owner\r\n\t\t\tretrieve_user(owner_id)\r\n\t\tend\r\n\tend\r\n\r\nYou can make methods private or protected\r\n\r\n\tprotected\r\n\tdef bump_karma\r\n\t\tputs "karma up for #{name}"\r\n\tend\r\n\r\nInheritance is important to use for optimizing code\r\n\r\n\tclass Attachment\r\n\t\tattr_accessor :title, :size, :url\r\n\r\n\t\tdef to_s\r\n\t\t\t"#{@title}, #{@size}"\r\n\t\tend\r\n\tend\r\n\r\n\tclass Image < Attachment\r\n\tend\r\n\r\n\tclass Video < Attachment\r\n\t\tattr_accessor :duration\r\n\tend\r\n\r\nIf you want to extend the functionality of a method, without overwritting it, use `super`\r\n\r\n\tclass User\r\n\t\tdef initialize(name)\r\n\t\t\t@name = name\r\n\t\tend\r\n\tend\r\n\r\n\tclass Follower < User\r\n\t\tdef initialize(name, following)\r\n\t\t\t@following = following\r\n\t\t\tsuper(name)\r\n\t\tend\r\n\t\tdef relationship\r\n\t\t\t"#{@name} follows #{@following}"\r\n\t\tend\r\n\tend\r\n\r\nIf you pass in a method with no parameters, it will automatically pass in the arguments that were passed to the method\r\n\r\nIf you know that a class will be performing a particular method more than others, you can set the default in the parent and overwrite it in the children\r\n\r\n\tclass Attachment\r\n\t\tdef preview\r\n\t\t\tthumbnail\r\n\t\tend\r\n\tend\r\n\r\n\tclass Audio < Attachment\r\n\t\tdef preview\r\n\t\t\tplayer\r\n\t\tend\r\n\tend\r\n\r\nSometimes you may want to create additional methods. In this case, `display_name` minimizes the repeated code to display a user name\r\n\r\n\tclass User\r\n\t\tdef display_name\r\n\t\t\t[@first_name, @last_name].join(' ')\r\n\t\tend\r\n\r\n\t\tdef tweet_header\r\n\t\t\tdisplay_name\r\n\t\tend\r\n\r\n\t\tdef profile\r\n\t\t\tdisplay_name + @description\r\n\t\tend\r\n\tend\r\n\r\nAdd an item to an array\r\n\r\n  def add_game(game)\r\n    @games << game\r\n  end\r\n\r\n## Level 4: Active Support\r\n\r\nThe Activesupport and i18n gems add additional functionality on objects. Including array methods\r\n\r\n\tarray = [0, 1, 2, 3, 4, 5, 6]\r\n\r\n\tarray.from(4)\r\n\t# returns 4, 5, 6\r\n\tarray.to(2)\r\n\t# returns 0, 1, 2\r\n\tarray.in_groups_of(3)\r\n\t# returns [0, 1, 2] [3, 4, 5], [6, nil, nil]\r\n\tarray.split(2)\r\n\t# returns [0, 1], [3, 4, 5, 6]\r\n\r\nAlso date functions\r\n\r\n\tapocalypse = DateTime.new(2012, 12, 21, 14, 27, 45)\r\n\tapocalypse.at_beginning_of_day\r\n\tapocalypse.at_end_of_month\r\n\tapocalypse.at_beginning_of_year\r\n\tapocalypse.advance(years: 4, months: 3)\r\n\tapocalypse.tomorrow\r\n\r\nHash functions.\r\n\r\n\toptions.diff(new_options)\r\n\t# returns difference between options and new_options\r\n\toptions.stringify_keys\r\n\t# converts all keys to strings\r\n\r\n\toptions.reverse_merge(defaults)\r\n\t# add any elements from defaults that aren't present in options.\r\n\r\n\tnew_option.except(:password)\r\n\t# remove key\r\n\r\n\tnew_option.assert_valid_keys(:user, :lang)\r\n\t# throws exception if hash contains any keys besides those listed\r\n\r\n\tdef background_class(index)\r\n\t\treturn 'white' if index.odd?\r\n\t\t# odd and even are active class methods\r\n\t\treturn 'grery' if index.even?\r\n\tend\r\n\t\r\nString functions\r\n\r\n\t.ordinalize\r\n\t.pluralize\r\n\t.singularize\r\n\t.titleize\r\n\t.humanize\r\n\r\n## Level 5: Modules\r\n\r\nNamespacing is done using modules. You can include files from a separate file with simply the name of the file\r\n\r\n\trequire 'image_utils'\r\n\r\nThen within the file, declare a module\r\n\r\n\tmodule ImageUtils\r\n\t\tdef self.preview(image)\r\n\t\tend\r\n\r\n\t\tdef self.transfer(image, destination)\r\n\t\tend\r\n\tend\r\n\r\nYou will call those functions from the other file using a namespace\r\n\r\n\trequire 'image_utils'\r\n\r\n\timage = user.image\r\n\tImageUtils.preview(image)\r\n\r\nIt's also common to include a module within a class\r\n\r\n\trequire 'image_utils'\r\n\r\n\tclass Image\r\n\t\tinclude ImageUtils\r\n\tend\r\n\r\nThe namespacing is then done with the class, not `ImageUtils`\r\n\r\n\t.ancestors\r\n\r\n\t.included_modules\r\n\r\n### Mixins vs Class Inheritance\r\n\r\nClasses can only inherit from a single parent, so in some cases a module is more appropriate\r\n\r\n\tmodule Shareable\r\n\t\tdef share_on_facebook\r\n\t\tend\r\n\tend\r\n\r\n\tclass Post\r\n\t\tinclude Shareable\r\n\tend\r\n\r\n\tclass Image\r\n\t\tinclude Shareable\r\n\tend\r\n\r\n\tclass Tweet\r\n\t\tinclude Shareable\r\n\tend\r\n\r\nIf you want to run module methods as class methods, use the extend keyword\r\n\r\n\tmodule Searchable\r\n\t\tdef find_all_from(user)\r\n\t\tend\r\n\tend\r\n\r\n\tclass Tweet\r\n\t\textend Searchable\r\n\tend\r\n\r\n\tTweet.find_all_from('@GreggPollack')\r\n\r\nUse `include` to expose them as instance methods, and `extend` to expose them as class methods\r\n\r\nYou can also extend the module specifically from an object, rather than from the class\r\n\r\n\tclass Image\r\n\tend\r\n\r\n\timage = Image.new\r\n\timage.extend(ImageUtils)\r\n\r\n#### Challenge Examples\r\n\r\n\tmodule GameUtils\r\n\t  def self.lend_to_friend(game, friend_email)\r\n\t  end\r\n\tend\r\n\tgame = Game.new("Contra")\r\n\tGameUtils.lend_to_friend(game, "gregg@codeschool.com")\r\n\r\n## Level 6: Blocks\r\n\r\nBlocks can be used for loops\r\n\r\n\twords = ['Had', 'eggs', 'for', 'breakfast.']\r\n\twords.each { |word| puts word }\r\n\r\n\twords.each do |word|\r\n\t\tputs word\r\n\tend\r\n\r\nYou can yield the results of a block in a method using the `yield` keyword\r\n\r\n\tclass Timeline\r\n\t\tdef each\r\n\t\t\t@user.friends.each do |friend|\r\n\t\t\t\tfriend.tweets.each { |tweet| yield tweet }\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\r\n\ttimeline = Timeline.new(user)\r\n\ttimeline.each { |tweet| puts tweet }\r\n\ttimeline.each { |tweet| tweet.cache }\r\n\r\nWhen defining each, you can also include `Enumerable`, to gain access to several other functions\r\n\r\n\tclass Timeline\r\n\t\tdef each\r\n\r\n\t\tend\r\n\t\tinclude Enumerable\r\n\tend\r\n\r\n\ttimeline.sort_by { |tweet| tweet.created_at }\r\n\ttimeline.map { |tweet| tweet.status }\r\n\ttimeline.find_all { |tweet| tweet.status =~ /\\@codeschool. }\r\n\r\n#### Challenge Examples\r\n\r\n\tclass Library\r\n\t  attr_accessor :games\r\n\r\n\t  def initialize(games = [])\r\n\t    self.games = games\r\n\t  end\r\n\r\n\t  def each_on_system(system)\r\n\t    games.each do |game|\r\n\t      yield if game.system == system\r\n\t    end\r\n\t  end\r\n\tend\r\n	2	2015-03-31 21:14:40.663187	2015-03-31 21:14:40.663187
37	Ruby Deployment Techniques	ruby-deployment-techniques	* Nginx\r\n* Unicorn\r\n* PostgreSQL\r\n\r\n## Vagrant as a Virtual Server\r\n\r\nDownload Vagrant and virtual box for your systems\r\n\r\n[vagrantbox.es](vagrantbox.es)\r\n\r\nDownload the latest version of Ubuntu. (Ubuntu precise 32 or 64)\r\n\r\nTo determine which version of vagrant you're running\r\n\r\n  which vagrant\r\n\r\nDownload image\r\n\r\n  vagrant box add ubuntu32 http://files.vagrantup.com/precise32.box\r\n\r\nNew instance of the image you downloaded\r\n\r\n  vagrant init ubuntu32\r\n\r\nThe config file will have be heavily commented to help you make your settings. Uncomment:\r\n\r\n  config.vm.bridged\r\n\r\nBoot up the virtual machine\r\n\r\n  vagrant up\r\n\r\nSpecify a network to bridge\r\n\r\nSSH into your virtual machine\r\n\r\n  vagrant ssh\r\n\r\n  sudo apt-get update\r\n  sudo apt-get install build-essential git-core python-software-properties nodejs\r\n\r\nThe shared folder is `/vagrant`\r\n\r\nTo shutdown the vagrant box\r\n\r\n  vagrant halt\r\n\r\n## Installing Rbenv\r\n\r\nFollow the github instructions to install rbenv on your server.\r\n\r\n[https://github.com/sstephenson/rbenv#installation](https://github.com/sstephenson/rbenv#installation)\r\n\r\nOr use the rbenv-installer, [https://github.com/fesplugas/rbenv-installer](https://github.com/fesplugas/rbenv-installer) also from github. You can run this from your server, once you install:\r\n\r\n  sudo apt-get install curl\r\n\r\nPaste the required code into `~/.bashrc` at the top. Install your version of ruby\r\n\r\n  rbenv install 2.0.0-p247\r\n  rbenv rehash\r\n  rbenv global 2.0.0-p247\r\n\r\nYou can also set the ruby version in your project\r\n\r\n  cat .ruby-version\r\n\r\nInstall bundler\r\n\r\n  gem install bundler\r\n  rbenv rehash\r\n\r\nYou may need to install packages, such as sqlite\r\n\r\n  sudo apt-get install  sqlite3 sqlite3-dev\r\n\r\n## Nginx as the Web Server\r\n\r\nBoot up your virtual machine from the directory of your project with the `Vagrantfile`\r\n\r\n  vagrant up\r\n  vagrant ssh\r\n\r\nAdd a new software source for nginx\r\n\r\n  sudo apt-add-repository ppa:nginx/stable\r\n  sudo apt-get-update\r\n  sudo apt-get install nginx\r\n  sudo service nginx start\r\n\r\nYou will likely need to edit the config file\r\n\r\n  sudo vi /etc/nginx/nginx.conf\r\n\r\nYou should see\r\n\r\n  include /etc/nginx/sites-enabled/*\r\n\r\nYou might need to disable IPv6\r\n\r\n  # listen [::]:80 default_server;\r\n\r\nwtf\r\n\r\n## Unicorn as the Application Server Cluster\r\n\r\nAdd unicorn to your gem file\r\n\r\n  gem 'unicorn'\r\n\r\nUnicorn requires a configuration file.\r\n\r\n  # config/unicorn.rb\r\n\r\n  # specify a root for the application server\r\n  working_directory File.expand_path("../..", __FILE__)\r\n\r\nThen run unicorn\r\n\r\n  bundle exec unicorn -c config/unicorn.rb\r\n\r\nYou can add some more options to the configuration file\r\n\r\n  # allowing for more requests\r\n  worker_processes 3\r\n\r\n  # specify a port or socket\r\n  listen "/tmp/unicorn.sock"\r\n\r\nWe will be creating a socket through which Nginx can communicate later\r\n\r\n  # set the timeout in seconds\r\n  timeout 30\r\n\r\n  # specify a pid file\r\n  pid "/tmp/unicorn_rails3demo.pid"\r\n\r\nPID\r\n: Process ID. Each application has a process ID. This is where the pid will be stored.\r\n\r\n  # logging\r\n  stdout_path "/Users/envato/projects/rails3demo/log/unicorn.log"\r\n  stderr_path "/Users/envato/projects/rails3demo/log/unicorn.log"\r\n\r\nNow when you start unicorn, nothing will output on the screen, it will go directly to the log.\r\n\r\n## Postgresql as the Database Server\r\n\r\nYou can find all the versions of postgres available\r\n\r\n  sudo aptitude search postgresql\r\n\r\nAdd a new repository to get the most recent version.\r\n\r\n  sudo apt-add-repository ppa:pitti/postgresql\r\n\r\n  sudo apt-get -y update\r\n\r\nInstall postgres\r\n  \r\n  sudo apt-get install postgresql-9.2 libpq-dev\r\n\r\n  sudo service postgresql status\r\n  # returns 9.2/main (port 5432): online\r\n\r\nCreate a user for the application\r\n\r\n  sudo su -c psql postgres\r\n\r\n  create role vagrant with password 'secret';\r\n  # allow creation of databases\r\n  alter role vagrant createdb;\r\n  alter role vagrant login;\r\n  \\q\r\n\r\n## Our First Manual Deploy\r\n\r\nYou'll need to update nginx to work with unicorn.\r\n\r\n  # sudo vim /etc/nginx/sites-enabled/rails3demo\r\n\r\n  upstream unicorn {\r\n    server unix:/tmp/unicorn.sock fail_timeout=0;\r\n  }\r\n\r\n  server {\r\n    listen 80 default_server;\r\n\r\n    root /vagrant/public/;\r\n\r\n    error_page 404 /404.html;\r\n    error_page 500 502 503 504 /50x.html;\r\n\r\n    location / {\r\n      try_file $uri/index.html $uri @unicorn;\r\n    }\r\n\r\n    location @unicorn {\r\n      proxy_set_header X-Forwarded-For $proxy_and_x_forwarded_for;\r\n      proxy_set_header Host $http_host;\r\n      proxy_redirect off;\r\n      proxy_pass http://unicorn;\r\n    }\r\n  }\r\n\r\nRestart the nginx server\r\n\r\n  sudo service nginx restart\r\n\r\nStart unicorn\r\n\r\n  bundle exec unicorn -c config/unicorn.rb -E production\r\n\r\nIf production gems don't get installed:\r\n\r\n  bundle install --without test development\r\n\r\nMake sure your `database.yml` is correct for production, but don't put it in source control. Then create your database\r\n\r\n  sudo su -c psql postgres\r\n  create database rails3demo owner vagrant;\r\n  \\q\r\n  RAILS_ENV=production bundle exec rake db:migrate\r\n\r\nPrecompile your assets\r\n\r\n  bundle exec rake assets:precompile\r\n\r\n  bundle exec unicorn -c config/unicorn.rb -E production\r\n\r\n## Introducing Capistrano\r\n\r\nTo install capistrano\r\n\r\n  gem install capistrano\r\n\r\nRemember to `rbenv rehash` after installing gems that have binaries.\r\n\r\nSet up capistrano configuration ( `.` targets the current directory )\r\n\r\n  capify .\r\n\r\nList tasks available\r\n\r\n  cap -vT\r\n\r\nIn the `Capfile`, you will already have some commands. In `config/deploy.rb`:\r\n\r\n  # This will require the authentication for your server.\r\n  set :user, "vagrant"\r\n  task :status, hosts: "192.168.1.93" do\r\n    run "service nginx status"\r\n    run "service postgresql status"\r\n  end\r\n\r\nThen you can run\r\n\r\n  cap status\r\n\r\nThen it will ask you to put in the password and output the status. You can separate these tasks\r\n\r\n  # primary: true is required to specify the database,\r\n  # in this case there's only one in the cluster\r\n  server "192.168.1.93", :app, :web, :db, primary: true\r\n\r\n  task :nginx_status, roles: :web do\r\n    run "service nginx status"\r\n  end\r\n\r\n  task :pg_status, roles: :db do\r\n    run "service postgresql status"\r\n  end\r\n\r\nYou can also define different places for your app, web, and database servers\r\n\r\n  role :app, "192.168.1.93"\r\n  role :web, "192.168.1.93"\r\n  role :db, "192.168.1.93"\r\n\r\n## Prepare Capistrano for Your Application - Part 1\r\n\r\nIn `Capfile`, uncomment the `deploy: assets` line for a rails project\r\n\r\nIn the `config/deploy.rb`, there are several lines already filled in\r\n\r\n  set :application, "rails3demo"\r\n  set :repository, "get://github.com/josemota/rails3demo"\r\n  set :user, "vagrant"\r\n  set :deploy_to, "/home/vagrant/apps/rails3demo"\r\n  # This means the user will run all commands, without sudo\r\n  set :use_sudo, false\r\n\r\n  set :scm, :git\r\n\r\n  server "192.168.1.93", :app, :web, :db, primary: true\r\n\r\n`cap deploy:check`\r\n: Check if the server is ready to deploy the application. It will require your authentication.\r\n`cap deploy:setup`\r\n: This will create the required folder structure for the application.\r\n`cap deploy:update`\r\n: Pull all code from the repository and put it in a snapshot\r\n\r\n## Prepare Capistrano for Your Application - Part 2\r\n\r\nFor a first deploy, in the `config/deploy.rb`:\r\n\r\n  namespace :deploy do\r\n    task :start do\r\n      sudo "service nginx start"\r\n      sudo "service postgresql start"\r\n      run "cd #{current_path} && bundle exec unicorn -c config/unicorn.rb -E production -D"\r\n    end\r\n\r\n    task :stop do\r\n      sudo "service nginx stop"\r\n      sudo "service postgresql stop"\r\n      run "kill `cat /tmp/unicorn_rails3demo.pid`"\r\n    end\r\n\r\n    task :restart do\r\n      stop\r\n      start\r\n    end\r\n  end\r\n\r\nThen, `cap deploy:start` and `cap deploy:stop` can be used to start and stop the services. You may want to install htop to monitor the running services.\r\n\r\n  sudo apt-get install htop\r\n\r\n## Performing Regular Deploys\r\n\r\n`cap deploy`\r\n: Updates the code and restarts the services.\r\n`cap deploy:migrate`\r\n: Run the migration for your current project. You will need to do this if the database has been modified.\r\n\r\nIf you have problems with the assets, open the current directory to make sure they're being generated. You may need to change the nginx root\r\n\r\n  root /home/vagrant/apps/rails3demo/current/public/;\r\n\r\n*NOTE:* rdiscount is a gem that parses markdown.\r\n\r\nMake sure the `bundler` task is active in the Capfile.\r\n\r\n## Final Tips\r\n	2	2015-03-31 21:14:40.714534	2015-03-31 21:14:40.714534
38	Catching up with Rails 4	catching-up-with-rails-4	## 05 - Caching\r\n\r\nRemember to add `touch: true` to relationships that you want to effect the parent.\r\n\r\nTo start caching, add the `cache` method with a variabe or string\r\n\r\n  - cache @post do\r\n    %div\r\n      %h1= post.title\r\n\r\n    = @post.body\r\n\r\n    %h2 Comments\r\n\r\n    - @post.comments.select(&:persisted?).each do |comment|\r\n      %blockquote\r\n        = simple_format comment.body\r\n\r\n    - unless @post.comments.select(&:persisted?).any?\r\n      There are no comments.\r\n\r\n    = render "comments/form"\r\n\r\nWith `touch: true`, the whole page will be updated if the comment is updated.\r\n	3	2015-03-31 21:14:40.765514	2015-03-31 21:14:40.765514
39	Well-Grounded Rubyist	well-grounded-rubyist	## Chapter 1 - Bootstrapping your Ruby literacy\r\n\r\n* Ruby syntax\r\n* Walk-throughs of Sample Ruby programs\r\n* Mechanics of Ruby extensions\r\n* Ruby's out-of-the-box command-line tools\r\n\r\nWhen opening the `irb` console, use the option for `--simple-prompt` for a cleaner screen.\r\n\r\nSome notes on syntax:\r\n\r\n* `puts` adds a newline and `print` doesn't. `p` outputs an inspect string with additional info about what is printing\r\n* You can assign input directly to variables with `string = gets`\r\n* The keyword `self` refers to the default object.\r\n* True, 0, and empty strings will all pass conditional checks.\r\n\r\nTypes of variables:\r\n\r\n* Local\r\n* Instance (@) - Store information for individual objects\r\n* Class (@@) - Store info per class hierarchy\r\n* Global ($)\r\n\r\n### Method calls, messages, and Ruby objects\r\n\r\n*Messages* correspond to methods that the object understands. These are preceded with a dot\r\n\r\n    x = "100".to_i\r\n\r\nEvery object is an instance of exactly one class. The class has the responsibility of launching the object, but from there the object has a life of its own.\r\n\r\n### Simple programming\r\n\r\nYou can run a ruby file with `ruby file.rb`. To check it for syntax errors first, add the flag `-cw`, like: `ruby -cw c2f.rb`.\r\n\r\nAn example of getting keyboard input:\r\n\r\n    print 'Enter a Celsius value: '\r\n    celsius = gets\r\n    fahrenheit = (celsius.to_i * 9 / 5) + 32\r\n    puts fahrenheit\r\n\r\nUsing file input\r\n\r\n    puts "Reading data file..."\r\n    num = File.read("temp.dat")\r\n    celsius = num.to_i\r\n    fahrenheit = (celsius.to_i * 9 / 5) + 32\r\n    puts fahrenheit\r\n\r\nWriting to a file\r\n\r\n    print "Enter a Celsius value: "\r\n    celsius = gets.to_i\r\n    fahrenheit = (celsius.to_i * 9 / 5) + 32\r\n    ptus "Saving result"\r\n    fh = File.new("temp.out", "w")\r\n    fh.puts fahrenheit\r\n    fh.close\r\n\r\n### Anatomy of the Ruby installation\r\n\r\nYou can find out where the installation files are with the `rbconfig` package from an IRB console, just include the `rrbconfig` flag when opening the IRB\r\n\r\n    irb --simple-prompt -rrbconfig\r\n\r\n    >> Config::CONFIG["bindir"]\r\n\r\nIn the rubylibdir(`Config::CONFIG["rubylibdir"]`), you'll find library files written in ruby that you can require in your own code if they have functionality you need\r\n\r\n* cgi.rb - Tools to facilitate CGI programming\r\n* fileutils.rb - Utilities for manipulating files easily from Ruby programs\r\n* tempfile.rb - A mechanism for automating the creation of temporary files\r\n* tk.rb - A programming interface to the Tk graphics library\r\n\r\narchdir(`Conifg::CONFIG["archidr"]`) contains architecture-specific extensions and libraries. These files may not be human-readable, but the Ruby interpreter knows how to load them so you can use them in your programs.\r\n\r\nThird-party extensions and libraries can be stored in site_ruby(`Config::CONFIG["sitedir"]` and `Config::CONFIG["vendordir"]`).\r\n\r\n### Ruby extensions and programming libraries\r\n\r\nUsing the `load` method, you can run ruby code from another file. Load works by searching a list of directories for the files you ask it to load.By examining the contents of your load path, you can see which directories will be searched.\r\n\r\n    ruby -e 'puts $:'\r\n\r\nYou can also use `require`, which will not load the same file more than once. For this reason, `require` is used more often.\r\n\r\n### Ruby tools and Applications\r\n\r\nTo check which command-line tools are installed, `require "rbconfig"` in IRB and examine `Config::CONFIG["bindir"]`.\r\n\r\nWhen running the Ruby interpreter, you have more than 20 command-line options to choose from.\r\n\r\n* c - check the syntax without executing program\r\n* w - Give warning messages during program execution\r\n* e - Execute inline code (`ruby -e 'puts "Code demo!"'`)\r\n* v - Show Ruby version information and execute program in verbose mode\r\n* l - Line mode, print newline after every line of output.\r\n* rname - Require the named feature (`ruby -rprofile`)\r\n* --version - Show ruby version information (`ruby --version`)\r\n\r\nA common combination is `cw`, which checks syntax and gives warnings without executing the file. `ve` can be used to check if a particular method is available in a version, like `ruby186 -ve "puts 'abc'.start_with?('a')"`.\r\n\r\nSome other options that may be helpful are `--simple-prompt`, which limits some of the text output. `--noecho` will limit even more.\r\n\r\n`ri` and `rdoc` are tools for providing documentation. If you have comments in your code that follow the RDoc format, they will be organized nicely when you run `rdoc`. `ri` allows you to view the RDoc information. For example `ri String#upcase` will give you documentation on the upcase method of the String class.\r\n\r\n#### Rake task-management\r\n\r\nRake will execute tasks from a `Rakefile`. For example:\r\n\r\n    namespace :admin do\r\n      desc "Interactively delete all files in /tmp"\r\n      task :clean_tmp do\r\n        Dir["/tmp/*"].each do |f|\r\n          next unless File.file?(f)\r\n          print "Delete #{f}?"\r\n          answer = $stdin.gets\r\n          case answer\r\n          when /^y/\r\n            File.unlink(f)\r\n          when /^q/\r\n            break\r\n          end\r\n        end\r\n      end\r\n    end\r\n\r\n    $ rake admin:clean_tmp\r\n\r\nYou can view the defined tasks with `rake --tasks`\r\n\r\n#### Gems\r\n\r\n`gem install` will install Gems from RubyForge. You can specify a location to install from if it should come from another area. Using the `require` command in your project will make sure it is available in your project.\r\n\r\n## Chapter 2 - Objects, Methods, and Local Variables\r\n\r\nYou can define a generic object simply using\r\n\r\n    ticket = Object.new\r\n\r\nNow that it is defined as an object, it can be given properties and methods\r\n\r\n    def ticket.venue\r\n      "Town Hall"\r\n    end\r\n\r\n    def ticket.price\r\n      5.50\r\n    end\r\n\r\nThen retrieving values is easy\r\n\r\n    print ticket.venue\r\n\r\nMethods that return a true or false value can be ended with a `?`\r\n\r\n    def ticket.available?\r\n      false\r\n    end\r\n\r\n    if ticket.available?\r\n      # code\r\n    else\r\n      # code\r\n    end\r\n\r\nThe only *false* objects are `false` and `nil`. Note: the return value of a `puts` method is always `nil`.\r\n\r\n### Innate behavior of objects\r\n\r\nTo view an array of the available methods to a new object, you can check `p Object.new.methods.sort`. Some of the more useful methods are `object_id`, `respond_to?`, `send`(also `__send__`). Note: these objects are actually built on the more basic *BasicObjects*, which you can generate with `BasicObject.new`.\r\n\r\nThe `object_id` of every new object is unique. Two variables can point to the same object, but two strings are different objects even if they have the same content.\r\n\r\n    a = Object.new\r\n    b = a\r\n    # b & a have the same object_id\r\n\r\n    string_1 = "hello"\r\n    string_2 = "hello"\r\n    # string_1 & string_2 have different object_ids.\r\n\r\n`respond_to?` is useful to find out if an object will understand the method you want. This can also be used to identify if you've created the object you're expecting.\r\n\r\n    obj = Object.new\r\n    if obj.respond_to?('talk')\r\n      obj.talk\r\n    else\r\n      puts 'no method "talk"'\r\n    end\r\n\r\n`send` can be used to send a request to the object as a method. For example\r\n\r\n    if ticket.respond_to?(request)\r\n      puts ticket.send(request)\r\n    else\r\n      puts 'no info available'\r\n    end\r\n\r\nHere, `send` is translating the input into a method. So if the `request` happens to be `venue`, then `ticket.send(venue)` will processed as `ticket.venue` by the object.\r\n\r\n### Method arguments\r\n\r\nUsing an `*` with the arguments when defining a method will allow any number of arguments.\r\n\r\n    def obj.multi_args(*x)\r\n      puts 'zero or more arguments!'\r\n    end\r\n\r\nIn this case, `x` is assigned to an array of values corresponding to the arguments sent. You can mix this `*` with standard arguments to have both required and option arguments.\r\n\r\n    def two_or_more(a, b, *c)\r\n      p a, b, c\r\n    end\r\n\r\nIn this case, any arguments supplied after the first two will be stored as an array. You can supply a default for an argument\r\n\r\n    def default_args(a, b, c=1)\r\n      puts a, b, c\r\n    end\r\n\r\nThe `*` can even be used in the middle of a group of arguments\r\n\r\n    def mixed_args(a, b, *c, d)\r\n      puts a, b, c, d\r\n    end\r\n\r\nThen, if there are extras, or not enough, the variable with `*` assigned to it absorbs them.\r\nIf there are both `*` characters and default arguments set, the defaults will get overridden before the `*` argument fills in.\r\n\r\n    args_unleashed(a, b=1, *c, d, e)\r\n      puts a, b, c, d, e\r\n    end\r\n\r\n    args_unleashed(1, 2, 3, 4)\r\n    # 1, 2, [], 3, 4\r\n\r\n    args_unleashed(1, 2, 3)\r\n    # 1, 1, [], 2, 3\r\n\r\n    args_unleashed(1, 2, 3, 4, 5, 6, 7, 8)\r\n    # 1, 2, [3, 4, 5, 6], 7, 8\r\n\r\nBecause of this, you can't put any `*` characters before a default argument.\r\n\r\n    def broken_args(x, *y, z=1)\r\n\r\n### Local variables and variable assignment\r\n\r\nVariables are references to objects. You can duplicate or freeze variables to prevent them from changing.\r\n\r\n    s = 'Original string'\r\n    change_string(s.dup)\r\n    puts s\r\n    # original string\r\n\r\n    s = 'Original string'\r\n    s.freeze\r\n    change_string(s)\r\n    # Runtime Error\r\n\r\nYou can also `clone` an object, which maintains the `freeze` state, unlike dup. Note that for something like an array, freezing the array does not freeze any strings inside.\r\n\r\n    numbers = ['one', 'two', 'three']\r\n    numbers.freeze\r\n    numbers[2] = 'four'\r\n    # RuntimeError\r\n    numbers[2].replace('four')\r\n    numbers\r\n    # ['one', 'two', 'four']\r\n\r\nA plain word could be a local variable, keyword or method call. If it is a keyword, it's processed as a keyword. If there's an equal sign, it's a variable undergoing an assignment. Otherwise, it's assumed to be a method call.\r\n\r\n## Chapter 3 - Organizing objects with classes\r\n\r\nYou can create an object as simply as typing `obj = Object.new`. This uses the built-in Ruby class, Object, with the `new` constructor. This constructor is available with all classes, and is used to create a new instance of the class. You can build a class to better organize your objects.\r\n\r\n    class Ticket\r\n      def event\r\n        # code\r\n      end\r\n    end\r\n\r\n    ticket = Ticket.new\r\n    puts ticket.event\r\n\r\nThe example `event` method in this case is an *instance method*, meaning it doesn't belong to only one object. Methods defined for one particular object are known as *singleton* methods. Classes can be added to from different files or have their methods overridden.\r\n\r\n### Instance Variables\r\n\r\nInstance variables are only visible to the object to which they belong. This means it must be initialized through one method, and set through another. To do this manually, you would set up something like this:\r\n\r\n    class Person\r\n      def set_name(string)\r\n        puts 'Setting name'\r\n        @name = string\r\n      end\r\n\r\n      def get_name\r\n        puts 'Retuning name'\r\n        @name\r\n      end\r\n    end\r\n\r\nA specialy `initialize` method will be executed whenever you create a new instance of a class. Using this automatic method, we can set properties for a class when creating it.\r\n\r\n    def initialize(venue, date)\r\n      @venue = venue\r\n      @date = date\r\n    end\r\n\r\n    def venue\r\n      @venue\r\n    end\r\n\r\n    def date\r\n      @date\r\n    end\r\n\r\nThen when creating the object, you'll need to pass in these arguments\r\n\r\n    th = Ticket.new('Town Hall', '11/12/13')\r\n\r\nYou can change an instance variable's value in any method\r\n\r\n    def discount(percent)\r\n      @price = @price * (100 - percent) / 100.0\r\n    end\r\n\r\nAnother way to set an instance variable, outside of the `initialize` method, is with a method using the `=` sign in it's definition\r\n\r\n    def price=(ammount)\r\n      @price = amount\r\n    end\r\n\r\n    ticket.price=(63.00)\r\n    # or\r\n    ticket.price = 63.00\r\n\r\n### `attr_` methods\r\n\r\nAs an alternative to defining methods to access instance variables, you can use `attr` methods as a shortcut.\r\n\r\n    class Ticket\r\n      attr_reader :venue, :date, :price\r\n    end\r\n\r\nLooking at the `attr_reader` as a message, you'll notice there's no dot or paranthesis. The lack of a defined object means it will use `self.`, which in this case is the Ticket class. Paranthesis are optional in this case.\r\n\r\nFor automatically including *setter* methods, use the `attr_writer` method. If a variable will be read and written, you can use `attr_accessor`. Using simply `attr` works, but `attr_accessor` is more clear to read and `attr` requires a second argument of `true` to create both readers and writers.\r\n\r\n### Inheritance\r\n\r\nRuby supports *single inheritance*, meaning that the object can only inherit from one parent. If you need to support additional functionality, you can use modules.\r\n\r\n### Class objects\r\n\r\n#### Metaprogramming\r\n\r\n* The class `Class` is an instance of itself. It is a `Class` object.\r\n* There is also a class `Object`\r\n* `Object` is an object\r\n* `Object` is a class\r\n* `Class` is an object\r\n* `Class` is a class\r\n\r\nEvery object has an internal record of what class it's an instance of. This internal record inside the object `Class` points back to `Class`.\r\n\r\nBecause any class defined comes from the `Class` object, it has access to the `.new` method. The superclass of `Class` in `Module`, which contains the `attr` family of methods.\r\n\r\n#### Singletons\r\n\r\nA singleton is defined on the Ticket class, also called a *class method*. These messages are sent to the class rather than each instance.\r\n\r\n    def Ticket.most_expensive(*tickets)\r\n      tickets.max_by(&:price)\r\n    end\r\n\r\n    highest = Ticket.most_expensive(th,cc,fg)\r\n\r\n#### Notation Reference\r\n\r\n* `Ticket#price` refers to an instance method\r\n* `Ticket.most_expensive` refers to the class method\r\n* `Ticket::most_expensive` also refers to the class method\r\n\r\nYou can check if something is inherited by using the `is_a?` method\r\n\r\n    mag = Magazine.new\r\n    mag.is_a?(Magazine)\r\n    mag.is_a?(Publication)\r\n\r\nIs possible, but uncommon, to add a method directly to the instance of a class.\r\n\r\n    mag = Magazine.new\r\n    def mag.wings\r\n      puts "Look! I can fly!"\r\n    end\r\n\r\n## Chapter 4 - Modules and program organization\r\n	2	2015-03-31 21:14:40.816821	2015-03-31 21:14:40.816821
40	CodeSchool - Rails 4 Patterns	codeschool-rails-4-patterns	## Chapter 1\r\n\r\n### Fat Controllers are bad\r\n\r\nHere is an example of a fat controller, with too many calls to the same object\r\n\r\n    def publish\r\n      if @item.is_approved? && @item.user != 'Loblaw'\r\n        @item.published_on = Time.now\r\n        if @item.save\r\n          flash[:notice] = 'Your item published!'\r\n        else\r\n          flash[:notice] = 'There was an error.'\r\n        end\r\n      else\r\n        flash[:notice] = 'There was an error.'\r\n      end\r\n\r\n      redirect_to @item\r\n    end\r\n\r\nThis can be refactored into an instance method in the model.\r\n    \r\n    # model\r\n\r\n    def publish\r\n      if !is_approved? || user == 'Loblaw'\r\n        return false\r\n      end\r\n\r\n      self.published_on = Time.now\r\n      self.save\r\n    end\r\n\r\n    # controller\r\n\r\n    def publish\r\n      if @item.publish\r\n        flash[:notice] = 'Your item published!'\r\n      else\r\n        flash[:notice] = 'There was an error.'\r\n      end\r\n\r\n      redirect_to @item\r\n    end\r\n\r\n### Avoid calling other domain objects from callbacks\r\n\r\nThis creates a tight coupling of the model to other models\r\n\r\n    class User\r\n\r\n      before_create :set_token\r\n\r\n      protected\r\n\r\n        def set_token\r\n          self.token = TokenGenerator.create(self)\r\n        end\r\n      end\r\n\r\nBy creating a new method in the user class, you can avoid needing the callback.\r\n\r\n    # model\r\n\r\n    def register\r\n      self.token = TokenGenerator.create(self)\r\n      save\r\n    end\r\n\r\n    # controller\r\n\r\n    def create\r\n      @user = User.new(user_params)\r\n      if @user.register\r\n        redirect_to @user, notice: 'Success'\r\n      else\r\n        ...\r\n      end\r\n    end\r\n\r\nNOTE: Callbacks should only be used to modify the internal state of the object. Like this:\r\n\r\n    before_create :set_name\r\n\r\n    protected\r\n\r\n      def set_name\r\n        self.name = self.login.capitalize if name.blank?\r\n      end\r\n\r\n### Create new abstractions.\r\n\r\nYou don not want any object to be responsible for too many other objects.\r\nOne way to avoid this is by creating ruby objects that encapsulate other\r\ncode.\r\n\r\n    # app/models/user_suspension.rb\r\n\r\n    class UserSuspension\r\n      def initialize(user)\r\n        @user = user\r\n      end\r\n\r\n      def create\r\n        @user.class.transaction do\r\n          disapprove_user!\r\n          disapprove_items!\r\n          disapprove_reviews!\r\n        end\r\n      end\r\n\r\n      private\r\n        def disapprove_user!\r\n        def disapprove_items!\r\n        def disapprove_reviews!\r\n    end\r\n\r\nNow you can access this object from the standard Users_Controller\r\n\r\n    # app/controllers/users_controller.rb\r\n\r\n    def suspend\r\n      @user = User.find(params[:id])\r\n      suspension = User.suspension.new(@user)\r\n      suspension.create!\r\n      redirect_to @user, notice: 'Successfully suspended.'\r\n    end\r\n\r\nOther non-Active record models may be:\r\n\r\n* UserRegistration\r\n* PlanSubscription\r\n* CreditCardCharge\r\n* ShoppingCart\r\n\r\n## Chapter 2 - Scopes and Class Methods\r\n\r\nScopes always return a chainable relation, so you should use them when\r\nconstructing queries\r\n\r\n    scope :by_author, ->(author) { where(author: author) if author.present? }\r\n    scope :recent, -> { where("published_on > ?", 2.days.ago) }\r\n\r\nIf you want to use a scope from another model, you can use the `merge` method\r\n\r\n    scope :with_approved_comments, -> { joins(:comments).merge(Comment.approved) }\r\n\r\nIf you might run into a common column between two scopes, and you want\r\nthe new query to override the first, you can also use merge.\r\n\r\n    User.active.merge(User.inactive)\r\n\r\n## Chapter 3 - Concerns\r\n\r\nYou can move shared model code into a concern\r\n\r\n    # app/model/concerns/commentable.rb\r\n\r\n    module Commentable\r\n      extend ActiveSupport::Concern\r\n\r\n      included do\r\n        has_many :comments, as: :commentable\r\n      end\r\n      \r\n      def comments_by_user(id)\r\n        comments.where(user_id: id)\r\n      end\r\n    end\r\n\r\n    # app/models/post.rb\r\n\r\n    include Commentable\r\n\r\nYou can also develop class methods to be used, by creating a `ClassMethods` module\r\nwithin the conern, because of the `ActiveSupport::Concern` extension.\r\n\r\n    module Commentable\r\n      extend ActiveSupport::Concern\r\n\r\n      module ClassMethods\r\n        def upvote(comment)\r\n\r\n        end\r\n      end\r\n    end\r\n\r\n    # in controller\r\n\r\n    Post.upvote(@comment)\r\n\r\nConcerns can also be used with controllers. For example this show method:\r\n\r\n    class ImagesController\r\n      def show\r\n        @image = Image.find(params[:id])\r\n        file_name = File.basename(@image.path)\r\n        @thumbnail = "/thumbs/#{file_name}"\r\n      end\r\n    end\r\n\r\nThis thumbnail generation is used for Images and Videos, so it can be placed in a concern\r\n\r\n    # app/controllers/concerns/previewable.rb\r\n\r\n    module Previewable\r\n      def thumbnail(attachment)\r\n        file_name = File.basename(attachment.path)\r\n        "/thumbs/#{file_name}"\r\n      end\r\n    end\r\n\r\n    # app/controllers/images_controller.rb\r\n\r\n    include Previewable\r\n    def show\r\n      @image = Image.find(params[:id])\r\n      @thumbnail = thumbnail(@image)\r\n    end\r\n\r\n## Chapter 4 - Decorators\r\n\r\nThe decorator directory must be manually created, but Rails automatically adds it to the load path.\r\nThis directory can be used for presentation logic that isn not necessary anywhere else.\r\n\r\n    # app/decorators/post_decorator.rb\r\n\r\n    class PostDecorator\r\n      attr_reader :post\r\n\r\n      def initialize(post)\r\n        @post = post\r\n      end\r\n\r\n      def is_front_page?\r\n        post.published_at > 2.days.ago\r\n      end\r\n    end\r\n\r\nThen you can use the post decorator through the PostController\r\n\r\n    # app/controllers/posts_controller.rb\r\n\r\n    def show\r\n      post = Post.find(params[:id])\r\n      @post_decorator = PostDecorator.new(post)\r\n    end\r\n\r\nNOTE: For a collection of records, use the `build_collection` method:\r\n\r\n    @items_decorator = ItemDecorator.build_collection(items)\r\n\r\nSo now, the @post_decorator is the only way to access the post from the view. Then from the view:\r\n\r\n    - if @post_decorator.is_front_page?\r\n      = image_tag(@post_decorator.image)\r\n\r\nThe `@post_decorator.image` method does not yet work, we have to forward the missing method\r\nto the wrapped object, in this case `post`\r\n\r\n    # decorator\r\n\r\n    def method_missing(method_name, *args, &block)\r\n      post.send(method_name, *args, &block)\r\n    end\r\n\r\nHowever, the `respond_to?` method will still return false for things like the `image` method.\r\n\r\n    # decorator\r\n\r\n    def respond_to_missing?(method_name, include_private = false)\r\n      post.respond_to?(method_name, include_private) || super\r\n    end\r\n\r\nThere are some reasons you don not want to do this kind of thing with Rails view helpers:\r\n\r\n1. Pollutes the global namespace with methods specific to a model\r\n2. Forces a functional approach, not OOP\r\n\r\nYou can also use the PostDecorator for HTML output\r\n\r\n    # decorator\r\n\r\n    def classes\r\n      classes = ['page', 'btn']\r\n      classes << 'cover' if post.is_front_page?\r\n      classes\r\n    end\r\n\r\n    # show template\r\n\r\n    %article{class: @post_decorator.classes}\r\n      = @post_decorator.content\r\n\r\n## Chapter 5 - Basic Serializer\r\n\r\nYou can provide a default JSON format in your model:\r\n\r\n    # model\r\n\r\n    def as_json(params={})\r\n      super(except: [:created_at, :updated_at],\r\n        include: {comments: { only: :id}})\r\n    end\r\n\r\nYou want to decouple this from the model, though. Active model serializers are a way to\r\ndo that. You will need to include the gem\r\n\r\n    gem 'active_model_serializers', github: 'rails-api/active_model_serializers'\r\n\r\nAlso, remove the `jbuilder` gem, to avoid conflicts. The active model serializers will\r\nautomatically add a root node, so your JSON response will look like this:\r\n\r\n    {"items": [{"id":1},{"id":2},{"id":3}]}\r\n\r\nYou can use the same generated JSON in your controller, or create a custom serializer\r\n\r\n    rails g serializer Item\r\n\r\nThis will create the `serializers` directory\r\n\r\n    # app/serializers/item_serializer.rb\r\n\r\n    class ItemSerializer < ActiveModel::Serializer\r\n      attributes :id\r\n    end\r\n\r\nSo now, when you `render json:` it will go to the appropriately named serializer automatically.\r\nIf you want to tell it specifically which serializer to use, you can do it in the\r\ncontroller or the model:\r\n\r\n    # controller\r\n\r\n    render json: @items, serializer: SomeOtherSerializer\r\n\r\n    # model\r\n\r\n    def active_model_serializer\r\n      SomeOtherSerializer\r\n    end\r\n\r\nIf backwards compatibility is an issue, you may need to get rid of that root node. You can do that in the controller or with a custom serializer.\r\n\r\n    # controller\r\n\r\n    render json: @items, root: false\r\n\r\n    # app/serializers/custom_collection_serializer.rb\r\n\r\n    class ItemsCollectionSerializer < ActiveModel::ArraySerializer\r\n      self.root = false\r\n    end\r\n\r\n    # serializer controller\r\n\r\n    render json: @items, serializer: ItemsCollectionSerializer\r\n\r\nYou can add custom methods and properties to your serializers\r\n\r\n    class ItemSerializer\r\n      attributes :id, :name, :url\r\n\r\n      def url\r\n        item_url(object)\r\n      end\r\n    end\r\n\r\n## Chapter 6 - Advanced Serializer\r\n\r\nYou can use associations within a serializer\r\n\r\n    class ItemSerializer < ActiveModel::Serializer\r\n      attributes :id, :name, :url\r\n\r\n      has_many :comments\r\n\r\n      def url\r\n        item_url(object)\r\n      end\r\n    end\r\n\r\nOptions to the associations will return particular attributes\r\n\r\n    has_many :comments, embed: :ids\r\n\r\nIf you have multiple associations you only want the IDs for, you can use the `embed` method\r\n\r\n    embed :ids\r\n\r\nYou may also want to *side-load* the association objects. This will reduce the number of HTTP\r\nrequests.\r\n\r\n    embed :id, include: true\r\n\r\nUsing this method, you will have to create a custom serializer (CommentSerializer in this case).\r\n\r\nIn these serializers *object* always refers to the item being serialized. We can customize what\r\ngets returned from these serializers by overwritting the default method. In the case of `comments`\r\nwe create a new `comments` method\r\n\r\n    # Model\r\n\r\n    scope :approved, -> { where(approved: true) }\r\n\r\n    # Serializer\r\n\r\n    has_many :comments\r\n\r\n    def comments\r\n      object.comments.approved\r\n    end\r\n\r\nIf you want to add a specific property based on some other attribute from the model,\r\nyou can do this:\r\n\r\n    class ItemSerializer < ActiveModel::Serializer\r\n      attributes :id, :name, :price\r\n\r\n      def attributes\r\n        data = super\r\n        if current_user.premium_account?\r\n          data[:discounted_price] = object.discounted_price\r\n        end\r\n        data\r\n      end\r\n    end\r\n\r\n`super` will look for attributes defined at the top level. Serializer gives you access to\r\nthe `current_user` helper method by default, because it is so common. If you use a different\r\nmethod for this, you can declare it in the ApplicationController\r\n\r\n    serialization_scope :logged_user\r\n\r\nor when rendering from the controller\r\n\r\n    render json: @items, scope: logged_user, scope_name: :logged_user\r\n\r\n## Chapter 7 - Fine Tuning\r\n\r\n### Faster Queries\r\n\r\nUse the `select` method when you do not need all the items from the collection or record\r\n\r\n    items = Item.select(:id).where('due_at < ?', 2.days.from_now)\r\n\r\nYou can further speed things up with the `pluck` method. This returns selected columns\r\nand does not create active record objects, simply an array\r\n\r\n    ids = Item.where('due_at < ?', 2.days.from_now).pluck(:id)\r\n\r\nPluck can take multiple arguments, to get an array of arrays.\r\n\r\n### Filter Sensitive Parameters\r\n\r\nIn the `config/application.rb`, you can add any other filter parameters\r\n\r\n    config.filter_parameters += [:password, :ssn]\r\n\r\n### Procfile\r\n\r\nYou may have several processes to run your app, if you have workers and schedules. You can\r\ncreate a Procfile to streamline this\r\n\r\n    web: bundle exec rails s\r\n    work: bundle exec rails ...\r\n\r\nUsing *foreman*, you can execute this procfile.  Just include `gem install foreman`.\r\n\r\n	3	2015-03-31 21:14:40.868058	2015-03-31 21:14:40.868058
41	CodeSchool - Rails Testing	codeschool-rails-testing	## Level 1 - Test Unit\r\n\r\nBasic test unit file structure\r\n\r\n    # <subject>_test.rb\r\n\r\n    require "test/unit"\r\n\r\n    class <Subject>Test < Test::Unit::TestCase\r\n      def test_<what_we_are_testing>\r\n        <assertion>\r\n      end\r\n    end\r\n\r\nA basic test:\r\n\r\n    # boolean_test.rb\r\n\r\n    require "test/unit"\r\n\r\n    class BooleanTest < Test::Unit::TestCase\r\n      def test_true_is_true\r\n        assert true, "True should be truthy"\r\n      end\r\n    end\r\n\r\nIf this fails, the `True should be truthy` method will be displayed\r\n\r\n    # string_extension_test.rb\r\n\r\n    class StringExtensionTest < Test::Unit::TestCase\r\n\r\n      def test_is_number\r\n        assert "3".is_number?\r\n      end\r\n\r\n      def test_is_not_number\r\n        assert !"Blah".is_number?\r\n      end\r\n    end\r\n\r\nTo implement this so that they pass:\r\n\r\n    # string extension.rb\r\n\r\n    class String\r\n      def is_number?\r\n        if self =~ /^\\d+$/\r\n          true\r\n        else\r\n          false\r\n        end\r\n      end\r\n\r\nTo run this test, you will need to include `string_extension` at the beginning of the test\r\n\r\n    require "test/unit"\r\n    require "string_extension"\r\n\r\nWhen requiring files, you need to specify where those other files can be\r\nfound when running the test at the command line.\r\n\r\n    ruby -I. string_extension_test.rb\r\n\r\nNow that you have passing tests, you can refactor code.\r\n\r\n    def is_number?\r\n      self =~ /^\\d+$/\r\n    end\r\n\r\nWe can try this with another method\r\n\r\n    def test_humanize_function_added_to_string\r\n      assert_respond_to "blah", :humanize\r\n    end\r\n\r\nRight now, we are just testing to see if the `humanize method exists\r\n\r\n    def test_humanize_returns_something\r\n      assert_not_nil "Yo".humanize, "humanize is returning nil"\r\n    end\r\n\r\nYou can see from the error message, we want the `humanize` method\r\nto return something now. It wont do that until we tell it to.\r\n\r\n    def humanize\r\n      "Yo"\r\n    end\r\n\r\nYou may want to test to see if two values are equal\r\n\r\n    def test_humanize\r\n      assert_equal "Likes me brains!", "LIKES ME BRAINS!".humanize\r\n    end\r\n\r\n    # define the humanize method\r\n\r\n    def humanize\r\n      self.downcase.capitalize\r\n    end\r\n\r\nYou can test against a regex to see if a string is contained\r\n\r\n    def test_just_for_brains\r\n      assert_match /brains/, "LIKES ME BRAINS!".humanize\r\n    end\r\n\r\nYou can test to make sure something fails\r\n\r\n    def test_zombie_in_humanize_raises_error\r\n      assert_raise(RuntimeError) { "zombie".humanize }\r\n    end\r\n\r\n    def humanize\r\n      if self =~ /zombie/\r\n        raise RuntimeError\r\n      else\r\n        self.downcase.capitalize\r\n      end\r\n    end\r\n\r\nThere are several assertions available:\r\n\r\n* `assert <conditional>`\r\n* `assert_(not_)equal <expected>, <actual>`\r\n* `assert_respond_to <object>, :<method>`\r\n* `assert_(not_)nil <object>`\r\n* `assert_(no_)match <pattern>, <string>`\r\n* `assert_raise(<error>) { <code to raise error> }`\r\n* `assert_kind_of(<Class>, <object>)`\r\n\r\nThese can all take an optional error message.\r\n\r\n## Level 2 - Model Testing\r\n\r\nThe default generater generates a unit test and a fixture.\r\n\r\nUse `rake db:test:prepare` to check for migrations and load the schema. If using the default test framework, you can use `rake test` to run `db:test:prepare` and run all the tests. If you want to run an individual test, you can use `ruby -Itest test/unit/zombie_test.rb`. You can run a single test with `-n` and then the name of the test.\r\n\r\n    # /test/unit/zombie_test.rb\r\n\r\n    require 'test_helper'\r\n\r\n    class ZombieTest < ActiveSupport::TestCase\r\n      def test_invalid_without_a_name\r\n        z = Zombie.new\r\n        assert !z.valid?, 'Name is not being validated'\r\n      end\r\n    end\r\n\r\nThis will test if a record is valid without adding any validation. You can rephrase this with `test "invalid without a name" do` rather than defining the method. To get this test to pass, all you have to do is a simple validation\r\n\r\n    validation :name, presence: true\r\n\r\nNow we will test if all attributes are valid\r\n\r\n    test "valid with all attributes" do\r\n      z = Zombie.new\r\n      z.name = 'Ash'\r\n      z.graveyard = 'Oak Park'\r\n      assert z.valid?, 'Zombie was not valid'\r\n    end\r\n\r\nWe can prevent duplicating some of this record generation with fixtures.\r\n\r\n    # test/fixtures/zombies.yml\r\n\r\n    ash:\r\n      name: Ash\r\n      graveyard: Oak Park\r\n    \r\n    tim:\r\n      name: Tim\r\n      graveyard: Green Meadows\r\n\r\n    # in the test\r\n\r\n    z = zombies(:ash)\r\n\r\nFixtures get loaded at the beginning of your test suite. If anything changes in a particular test, that is rolled back after the test.\r\n\r\n    test "invalid name gives error message" do\r\n      z = zombies(:ash)\r\n      z.name = nil\r\n      z.valid?\r\n      assert_match /can't be blank/, z.errors[:name].join, "Presence error not found on zombie"\r\n    end\r\n\r\nThis will test whether the errors contain a can't be blank error because the zombie name has been set to nil.\r\n\r\nWe can use unit testing to test custom methods from the model\r\n\r\n    # test\r\n\r\n    test "can generate avatar_url" do\r\n      z = zombies(:ash)\r\n      assert_equal "http://zombitar.com/#{z.id}.jpg", z.avatar_url\r\n    end\r\n\r\n    # model\r\n\r\n    def avatar_url\r\n      "http://zombitar.com/#{id}.jpg"\r\n    end\r\n\r\nWe can also test assocations\r\n\r\n    test "should respond to tweets" do\r\n       z = zombies(:ash)\r\n       assert_respond_to z, :tweets\r\n    end\r\n\r\n    test "should contain tweets" do\r\n      z = zombies(:ash)\r\n      assert_equal z.tweets, [?, ?]\r\n    end\r\n\r\nYou will need to set up some tweets in the fixtures\r\n\r\n    # test/fixtures/tweets.yml\r\n\r\n    ash_1:\r\n      status: Eating Eyebrows\r\n      zombie_id: 1\r\n\r\n    ash_2:\r\n      status: Lurking 4 Brains\r\n      zombie_id: 1\r\n\r\nThese specify a `zombie_id` attribute, which we never declared in the zombies fixture, so we have to add `id: 1` to one of the zombie records in that fixture. Now, `zombies(:ash).tweets` will return the array of records.\r\n\r\nWe can test this:\r\n\r\n    test "should contain only tweets that belong to zombie" do\r\n      z = zombies(:ash)\r\n      assert z.tweets.all? {|t| t.zombie == z }\r\n    end\r\n\r\n## Level 3 - Cleaning it up\r\n\r\nYou can create a `setup` method to run before every test.\r\n\r\n    def setup\r\n      @z = zombies(:ash)\r\n    end\r\n\r\nYou can create a new assertion method\r\n\r\n    def assert_presence(model, field)\r\n      model.valid?\r\n      assert_match /can't be blank/, model.errors[field].join,\r\n        "Presence error for #{field} not found on #{model.class}"\r\n    end\r\n\r\n    test "invalid name gives error message" do\r\n      @z.name = nil\r\n      assert_presence(@z, :name)\r\n    end\r\n\r\nYou can move the `assert_presence` method into the `test/test_helper.rb` file for use within any test.\r\n\r\nAn example from the quiz:\r\n\r\n    def assert_attribute_is_validated(model, attribute)\r\n      model.assign_attributes(attribute => nil)\r\n      assert !model.valid?, "#{attribute.to_s} is not being validated"\r\n    end\r\n\r\nThere is a useful gem from thoughtbot called `shoulda`. There are some useful methods that are easy to read\r\n\r\n    should validate_presence_of(:name)\r\n    should validate_presence_of(:graveyard)\r\n    should ensure_length_of(:name).is_at_most(15)\r\n    should have_many(:tweets)\r\n\r\nOther useful methods\r\n\r\n    should validate_uniqueness_of(:name)\r\n    should_not allow_value("blah").for(:email)\r\n\r\n## Level 4 - Mocks and Stubs\r\n\r\nHere is a test based on a method developed in the rails for zombies lesson\r\n\r\n    # app/models/zombie.rb\r\n\r\n    has_one :weapon\r\n\r\n    def decapitate\r\n      weapon.slice(self, :head)\r\n      self.status = "dead again"\r\n    end\r\n\r\n    # test/unit/zombie_test.rb\r\n\r\n    test "decapitate should set status to dead again"\r\n      @zombie.decapitate\r\n      assert_equal "dead again", @zombie.status\r\n    end\r\n\r\nThis test is dependent on the `slice` method, which could be very complex. To "fake" this method we need to use a gem called `mocha` to create stubs and mocks.\r\n\r\n<dl>\r\n  <dt>Stub</dt>\r\n  <dd>For replacing a method with code thathat returns a specified result.</dd>\r\n  <dt>Mock</dt>\r\n  <dd>A stub with an assertion that the method gets called.</dd>\r\n</dl>\r\n\r\nSo we will *stub* the `slice` method this test:\r\n\r\n    test "decapitate should set status to dead again" do\r\n      @zombie.weapon.stubs(:slice)\r\n      @zombie.decapitate\r\n      assert "dead again", @zombie.status\r\n    end\r\n\r\nThe `slice` method now returns `nil`. So we can now test the status change, but we should also test that the slice method is even getting called. We can use Mocha's `expects` method for this.\r\n\r\n    @zombie.weapon.expects(:slice)\r\n\r\nThis can be put into a separate test, without an assert method because one is included in the `expects` method.\r\n\r\n    test "decapitate shoudl call slice" do\r\n      @zombie.weapon.expects(:slice)\r\n      @zombie.decapitate\r\n    end\r\n\r\nUsing mocks and stubs is a good way to test external services, such as a locater\r\n\r\n    # app/models/zombie.rb\r\n\r\n    def geolocate\r\n      Zoogle.graveyard_locater(self.graveyard)\r\n    end\r\n\r\n    # test/unit/zombie_test.rb\r\n    \r\n    test "geolocate calls the Zoogle graveyard locator" do\r\n      Zoogle.expects(:graveyard_locator).with(@zombie.graveyard)\r\n      @zombie.geolocate\r\n    end\r\n\r\nThis will make sure the the method is called and the proper parameters are being sent into the method.\r\n\r\nThis would be a little more difficult if the external service is called, but the method returns a value. Like this:\r\n\r\n    def geolocate\r\n      loc = Zoogle.graveyard_locator(self.graveyard)\r\n      "#{loc[:latitude]}, #{loc[:longitude]}"\r\n    end\r\n\r\nNow you will need to specify a return value to test that the external service is called correctly\r\n\r\n    Zoogle.expects(:graveyard_locator).with(@zombie.graveyard).returns({latitude: 2, longitude: 3})\r\n\r\nWe will also need a stub to make sure the method returns the proper value\r\n\r\n    test "geolocate returns properly formatted lat, long" do\r\n      Zoogle.stubs(:graveyard_locator).with(@zombie.graveyard).returns({latitude: 2, longitude: 3})\r\n      assert_equal "2, 3", @zombie.geolocate\r\n    end\r\n\r\nAnother example from the quiz:\r\n\r\n    test "status_image returns a properly formated HTML image element with alt and src" do\r\n      ZwitPic.stubs(:get_status_image).with(@tweet.id)\r\n          .returns({url: 'url', name: 'name'})\r\n      assert_equal "<img src='url' alt='name' />", @tweet.status_image\r\n    end\r\n\r\nThis can be made even more difficult with the use of an object.\r\n\r\n    def geolocate_with_object\r\n      loc = Zoogle.graveyard_locator(self.graveyard)\r\n      "#{loc.latitude}, #{loc.longitude}"\r\n    end\r\n\r\nWe can test this using stubs, by passing in a hash to the `stub` method\r\n\r\n    test "geolocate_with_object properly formatted lat, long" do\r\n      loc = stub(latitude: 2, longitude: 3)\r\n      Zoogle.stubs(:graveyard_locator).returns(loc)\r\n      assert_equal "2, 3", @zombie.geolocate_with_object\r\n    end\r\n\r\n## Level 5 - Integration Tests\r\n\r\nViews and controllers should not have logic, so integration tests should\r\ngo through the view, controller, and model.\r\n\r\nThe default rails testing framework gives you low level request methods\r\n\r\n    get zombies_path\r\n    post zombies_path, zombie: {name: 'Ash' }\r\n    put zombie_path(zombie), zombie: {name: 'Bill'}\r\n    delete zombie_path(zombie)\r\n\r\nYou can also check for redirects with `follow_redirect!` or other redirect helpers.\r\nThere are some custom assertions that can be associated with integration tests as well\r\n\r\n    assert_response :success\r\n    assert_response 200\r\n\r\nYou can also use several other rack responses. You can use `assert_redirected_to` for a path.\r\n\r\nYou can use `assert_tag` to test against the contents of the DOM return\r\n\r\n    assert_tag "a", attributes: {href: root_url}\r\n    assert_no_tag "div", attributes: {id: 'zombie'}\r\n\r\n    assert_select "h1", "Twitter for Zombies"\r\n\r\nYou can generate an integration test using the rails helper\r\n\r\n    rails generate integration_test zombies\r\n\r\nThis creates `test/integration/zombies_test.rb\r\n\r\n    require 'test_helper'\r\n\r\n    class Zombiestest < ActionDispatch::IntegrationTest\r\n      fixtures :all\r\n    end\r\n\r\nIn this file, we can begin our first integration test\r\n\r\n    test "Anyone can view zombie information" do\r\n      zombie = zombies(:ash)\r\n      get zombie_url(zombie)\r\n\r\n      assert_response :success\r\n      assert_select "h1", zombie.name\r\n    end\r\n\r\n### Using Capybara\r\n\r\nThis simulates a web browser more closely. Here is an example:\r\n\r\n    visit login_path\r\n\r\n    within 'div#login-form' do\r\n      fill_in 'Login', with: 'user@example.com'\r\n      fill_in 'Password', with: 'secret'\r\n      check 'Remember Me'\r\n      click_on 'Login'\r\n    end\r\n\r\nAdd Capybara to the gemfile then add some code to the `test_helper.rb` file.\r\n\r\n    require 'capybara/rails'\r\n\r\n    class ActionDispatch::IntegrationTest\r\n      include Capybara::DSL\r\n\r\n      def teardown\r\n        Capybara.reset_sessions!\r\n        Capybara.use_default_driver\r\n      end\r\n    end\r\n\r\nYou can provide either text or the id of the element for selecting. There are several\r\nmethods you can use to simulate interaction\r\n\r\n* `click_link 'Homepage'`\r\n* `click_button 'Save'`\r\n* `click_on 'Link or Button text'`\r\n* `fill_in 'First Name', with: 'Doug'`\r\n* `choose 'A Radio Button'`\r\n* `check 'A Checkbox'`\r\n* `uncheck 'A Checkbox'`\r\n* `attach_file 'Image', '/path/to/image.jpg'`\r\n* `select 'Option', from: 'Select Box'`\r\n\r\nThere are also some helpers for the `current_path` or `current_url`.\r\n\r\nTo rewrite the previous integration test with capybara:\r\n\r\n    test "Anyone can view zombie information" do\r\n      zombie = zombies(:ash)\r\n      visit zombie_url(zombie)\r\n\r\n      assert_equal zombie_path(zombie), current_path\r\n        within("h1") do\r\n          assert has_content?(zombie.name)\r\n        end\r\n      end\r\n    end\r\n\r\nLike `has_content?`, you can also use `has_selector?` for CSS selectors or\r\n`has_no_content?` as the inverse. Also available:\r\n\r\n* `has_link?`\r\n* `has_field?`\r\n* `has_css?`\r\n* `has_xpath?`\r\n\r\nHere is another example of a useful integration\r\n\r\n    test "Navigation is available to the zombie page" do\r\n      zombie = zombies(:ash)\r\n      tweet = tweets(:hello)\r\n\r\n      visit root_url\r\n      within("#tweet_#{tweet.id}") do\r\n        click_link zombie.name\r\n        assert_equal zombie_path(zombie), current_path\r\n      end\r\n    end\r\n\r\nHere is a test for a signup form:\r\n\r\n    test "should create a new zombie" do\r\n      visit root_url\r\n      click_link "Sign Up"\r\n      fill_in "Name", with: "Breins"\r\n      fill_in "Graveyard", with: 'BRREEEIIINNNSSS'\r\n      click_button 'Sign Up'\r\n      assert_equal zombie_tweets_path("Breins"), current_path\r\n    end\r\n\r\nThis is something that we might want to do in multiple tests, so it could\r\nbe extracted into its own method, something like `sign_up_as`.\r\n\r\n## Level 6 - Using Factories\r\n\r\nFixtures can be difficult to work with when there get to be a lot of associations,\r\nthere can also be a lot of duplication. Using the `factory_girl_rails` gem,\r\nyou can add factories with scaffolding and othe model generators. The default\r\nfactory will look like this:\r\n\r\n    FactoryGirl.define do\r\n      factory :zombie do\r\n        name "MyString"\r\n        graveyard "MyString"\r\n      end\r\n    end\r\n\r\nTo use the factory, you can use shorthand: `Factory(:zombie)` to create. Or the long\r\nform: `FactoryGirl.create(:zombie)`. You can also `FactoryGirl.build(:zombie)` to return a \r\nnew, unsaved Zombie. Or `FactoryGirl.attributes_for(:zombie)` to return a hash of attributes,\r\nno instance.\r\n\r\nYou can define inherited factories:\r\n\r\n    FactoryGirl.define do\r\n      factory :zombie do\r\n        name 'Ash'\r\n        graveyard 'Oak Park'\r\n\r\n        factory :zombie_bill do\r\n          name 'Bill'\r\n        end\r\n      end\r\n    end\r\n\r\nYou can also set attributes when calling the factory\r\n\r\n    zombie_2 = Factory(:zombie, name: 'Ash1')\r\n\r\nOr you can use sequences in the factory\r\n\r\n    factory :zombie do\r\n      sequence(:name) { |i| "Ash#{i}" }\r\n      graveyard "Oak Park"\r\n    end\r\n\r\nNow you can create as many new zombies as you want\r\n\r\n    1000.times {Factory(:zombie)}\r\n\r\nYou can also use factories for easy associations.\r\n\r\n    factory :weapon do\r\n      name 'Broadsword'\r\n      association :zombie\r\n    end\r\n\r\nThis creates a weapon that the zombie that the weapon belongs to.\r\n\r\nIf you need to specify a different name for a factory that is not the class name\r\n\r\n    factory :armed_zombie, class: Zombie do\r\n\r\nYou can also specify a named factory in the association\r\n\r\n    association :weapon, factory: :hatchet\r\n\r\nHere's an example test:\r\n\r\n    test "decapitate should set status to dead again" do\r\n      zombie = FactoryGirl.build(:zombie, status: 'dead')\r\n      zombie.decapitate\r\n      assert_equal "dead again", zombie.status\r\n    end\r\n\r\nAn integration test:\r\n\r\n    test "Navigation is available to the zombie page" do\r\n      tweet = Factory(:tweet)\r\n      zombie = tweet.zombie\r\n      visit root_url\r\n      within("#tweet_#{tweet.id}") do\r\n        click_link zombie.name\r\n        assert_equal zombie_path(zombie), current_path\r\n      end\r\n    end\r\n\r\n	3	2015-03-31 21:14:40.919276	2015-03-31 21:14:40.919276
42	Rails for Zombies 2	rails-for-zombies-2	### Chapter 3\r\n\r\n#### View Helpers\r\n\r\nInstead of:\r\n\r\n    <div id="tweet_<%= tweet.id %>" class="tweet">\r\n    </div>\r\n\r\nYou can do:\r\n\r\n    <%= div_for tweet do %>\r\n    <% end %>\r\n\r\nYou can also use `dom_id(@tweet)` to get the id as an integer.\r\n\r\nPluralize (this makes "2 zombies"):\r\n\r\n    <%= pluralize(Zombie.count, "zombie" %>\r\n\r\nTo form an array as a sentence:\r\n\r\n    = @role_names.to_sentence\r\n\r\nFor currency:\r\n\r\n    = number_to_currency 13.5\r\n\r\nFor human readable numbers\r\n\r\n    = number_to_human 13234355423 # 13.2 billion\r\n\r\n### Chapter 4\r\n\r\nTo generate a mailer\r\n\r\n    rails g mailer ZombieMailer decomp_change lost_brain\r\n\r\nSome parameters you might want to include in your mail:\r\n\r\n    def decomp_change(zombie)\r\n      @zombie = zombie\r\n      @last_tweet = @zombie.tweets.last\r\n\r\n      attachments['z.pdf'] = File.read("#{Rails.root/public/zombie.pdf")\r\n      mail to: @zombie.email, subject: 'Your decomp stage has changed.'\r\n    end\r\n\r\nYou can also set a number of defaults:\r\n\r\n* from\r\n* cc\r\n* bcc\r\n* reply_to\r\n\r\nYou can write rails code in your stylesheets if you add `.erb` to the end\r\n\r\n    background-image: url(<%= asset_path('button.png') %>);\r\n\r\nYou can even do this with scss files, just do `.css.scss.erb`\r\n\r\n### Chapter 5\r\n\r\n#### Controller Render Options\r\n\r\nBy default, html is rendered. If you want to respond to both HTML and JSON,\r\nuse a `respond_to` block.\r\n\r\n    respond_to do |format|\r\n      format.html\r\n      format.json { render json: @zombie }\r\n    end\r\n\r\nIf you want to render a different view file than the default\r\n\r\n    respond_to do |format|\r\n      format.html do\r\n        if @zombie.decomp == 'Dead (again)'\r\n         render :dead_again\r\n        end\r\n      end\r\n      format.json { render json: @zombie }\r\n    end\r\n\r\nIf you only need JSON, you can just us `render json: @zombie` When\r\nreturn JSON, you need the correct status code\r\n\r\n* 200 :ok\r\n* 201 :created\r\n* 422 :unprocessable_entity\r\n* 401 :unauthorized\r\n* 102 :processing\r\n* 404 :not_found\r\n\r\nSome examples of these status codes being used in the scaffolding:\r\n\r\n    render json: @zombie.errors, status: :unprocessable_entity\r\n    render json: @zombie, status: :created, location: @zombie\r\n\r\nThe `:member` route acts on a single resource. The `:collection` route acts on\r\na collection of routes.\r\n\r\n    get :decomp, on: :member # /zombies/:id/decomp\r\n    put :decay, on: :member  # /zombies/:id/decay\r\n\r\n    get :fresh, on: :collection   # /zombies/fresh\r\n    post :search, on: :collection # /zombies/search\r\n\r\nYou can use `:member` routes rather then spelling out the path:\r\n\r\n    match 'zombies/:id/decomp' => 'Zombies#decomp', as: :decomp_zombie\r\n\r\nis the same as:\r\n\r\n   resources :zombies do\r\n     resources :tweets\r\n     get :decomp, on: :member\r\n   end\r\n\r\nSo you can render this custom controller action:\r\n\r\n    def decomp\r\n      @zombie = Zombie.find(params[:id])\r\n      if @zombie.decomp == 'Dead (again)'\r\n        render json: @zombie, status: :unprocessable_entity\r\n      else\r\n        render json: @zombie, status: :ok\r\n      end\r\n    end\r\n\r\nThe JSON rendered for this will be a complete list of attributes. You can specify\r\nparticular attributes:\r\n\r\n    @zombie.to_json(only: [:name, :age])\r\n    @zombie.to_json(except: [:created_at, :updated_at])\r\n\r\nYou can set these in the zombie model if you want it to always be a certain set:\r\n\r\n    def as_json(options = nil)\r\n       super(options ||\r\n              { include: :brain, except: [:created_at, :updated_at, :id]})\r\n    end\r\n\r\nSo then you can update the controller:\r\n\r\n    if @zombie.decomp == 'Dead (again)'\r\n      render json: @zombie.to_json(only: :decomp),\r\n              status: :unprocessable_entity\r\n    else\r\n      render json: @zombie.to_json(only: :decomp)\r\n    end\r\n\r\n#### Creating AJAX links\r\n\r\nIf you want to be able to dynamically update a list using AJAX, you need\r\nto do a few things to set it up:\r\n\r\n1. Make the link a *remote call*\r\n2. Allow the controller to accept the JavaScript call\r\n3. Write the JavaScript to send back to the client.\r\n\r\n    # index.html\r\n\r\n    - @zombies.each do |zombie|\r\n      = div_for zombie do\r\n        = link_to "Zombie #{zombie.name}", zombie\r\n        .actions\r\n          = link_to 'edit', edit_zombie_path(zombie)\r\n          = link_to 'delete', zombie, method: :delete, remote: true\r\n\r\nNotice the `remote: true` attribute on the delete link.\r\n\r\n    # zombies_controller\r\n\r\n    def destroy\r\n      @zombie = Zombie.find(params[:id])\r\n      @zombie.destroy\r\n\r\n      respond_to do |format|\r\n        format.html { redirect_to zombies_url }\r\n        format.json { head :ok }\r\n        format.js\r\n      end\r\n    end\r\n\r\nNotice the `format.js` line within the `respond_to` block.\r\n\r\nThe JavaScript for this can be done in a file: `app/views/zombies/destroy.js.erb`\r\n\r\n    $('#<%= dom_id(@zombie) %>').fadeOut();\r\n\r\nTo dynamically add a record to the list, you can follow a similar procedure\r\n\r\n1. Add `format.js` to the controller\r\n2. Refactor the view\r\n3. Write the javascript for processing\r\n\r\nFor refactoring, move the div that contains the row into a partial. Then you can\r\nrender the partial automatically, as long as it follows the standard naming\r\nconventions.\r\n\r\n    #zombies\r\n      = render @zombies\r\n\r\nThen create the ajax form\r\n\r\n    = form_for(Zombie.new, remote: true) do |f|\r\n      .field\r\n        = f.label :name\r\n        = f.text_field :name\r\n      .actions\r\n        = f.submit\r\n\r\nThen a javascript file within the view directory can be used to render the partial\r\n\r\n    # app/views/create.js.erb\r\n    \r\n    <% if @zombie.new_record? # if @zombie did not save correctly %>\r\n      $('input#zombie_name').effect('highlight', { color: 'red' });\r\n    <% else %>\r\n      $('div#zombies').append("<%= escape_javascript(render @zombie) %>");\r\n      $('div#<%= dom_id(@zombie) %>').effect('highlight');\r\n    <% end %>\r\n\r\nTo cover validation, like in this case when the name is blank, the check for\r\n`@zombie.new_record?` means that the @zombie did not save correctly.\r\n\r\nNOTE: This uses the highlight function from the jquery-ui library, which\r\nwill need to be included.\r\n\r\n#### Creating a custom input field\r\n\r\n1. Create a new custom route for our action\r\n2. Define the form\r\n3. Create action in the controller\r\n4. Write the JavaScript to send back to the client\r\n\r\nIn the routes file:\r\n\r\n    resources :zombies do\r\n      resources :tweets\r\n      get :decomp, on: :member\r\n      put :custom_decomp, on: :member\r\n    end\r\n\r\nNote the `put :custom_decomp, on: :member` line, this is where we call the custom\r\naction to update the zombies resource.\r\n\r\nIn the view template\r\n\r\n    # /view/zombies/show.html.erb\r\n\r\n    %strong Decomposition Phase:\r\n    span#decomp= @zombie.decomp\r\n\r\n    #custom_phase\r\n      = form_for @zombie, url: custom_decomp_zombie_path(@zombie), remote: true do |f|\r\n        %strong Custom Phase\r\n        = f.text_field :decomp\r\n        = f.submit "Set"\r\n\r\nIn the controller\r\n\r\n    def custom_decomp\r\n      @zombie = Zombie.find(params[:id])\r\n      @zombie.decomp = params[:zombie][:decomp]\r\n      @zombie.save\r\n    end\r\n\r\nWe don not need a `responds_to` block in this case, because there is only\r\none template (javascript) for this particular action\r\n\r\n    # app/views/zombies/custom_decomp.js.erb\r\n\r\n    $('#decomp').text('<%= @zombie.decomp %>').effect('hightlight', {}, 3000);\r\n\r\n    <% if @zombie.decomp == "Dead (again)" %>\r\n      $('div#custom_phase').fadeOut();\r\n    <% end %>\r\n\r\n##### The same thing, but with only JSON\r\n\r\n1. Define the form\r\n2. Modify the custom_decomp action\r\n3. Write the clientside JavaScript\r\n\r\n1. Define the new form\r\n\r\n    # views/zombies/show.html.erb\r\n    = form_for @zombie, url: custom_decomp_zombie_path(@zombie) do |f|\r\n      %strong Custom Phase via JSON\r\n      = f.text_field :decomp\r\n      = f.submit "Set"\r\n\r\n2. Modify the custom_decomp action\r\n\r\n    respond_to do |format|\r\n      format.js\r\n      format.json { render json: @zombie.to_json(only: :decomp) }\r\n    end\r\n\r\n3. Write the clientside JavaScript (in Coffee)\r\n\r\n    # app/assets/javascripts/zombies.js.coffee\r\n\r\n    $(document).ready ->\r\n      $('div#custom_phase2 form').submit (event) ->\r\n        event.preventDefault()\r\n\r\n        url = $(this).attr('action')\r\n        custom_decomp = $('div#custom_phase2 #zombie_decomp').val()\r\n\r\n        $.ajax\r\n          type: 'put'\r\n          url: url\r\n          data: { zombie: { decomp: custom_decomp } }\r\n          dataType: 'json'\r\n          success: (json) ->\r\n            $('#decomp').text(json.decomp).effect('highlight')\r\n            $('div#custom_phase2').fadeOut() if json.decomp == "Dead (again)"\r\n	3	2015-03-31 21:14:40.980276	2015-03-31 21:14:40.980276
43	Testing with Rspec	testing-with-rspec	# Level 1 - Introduction\r\n\r\nWhen using rspec for testing ruby application, use `rspec --init`.\r\n\r\nWe will build a zombie. The zombie object will be in `lib/zombie.rb`. The\r\n`spec` directory will hold all the tests.\r\n\r\n    # spec/lib/zombie_spec.rb\r\n\r\n    require "spec_helper"\r\n\r\n    describe "A Zombie" do\r\n      it "is named Ash"\r\n    end\r\n\r\nTo run the spec:\r\n\r\n    rspec spec/lib/zombie_spec.rb\r\n\r\n\r\nA more common convention is to use the class name in the `describe` block.\r\n\r\n    # lib/zombie.rb\r\n\r\n    class Zombie\r\n    end\r\n\r\n    # spec/lib/zombie_spec.rb\r\n\r\n    require "spec_helper"\r\n    require "zombie"\r\n\r\n    describe Zombie do\r\n    end\r\n\r\nNow we can write a simple test\r\n\r\n    it "is named Ash" do\r\n      zombie = Zombie.new\r\n      zombie.name.should == 'Ash'\r\n    end\r\n\r\nTo get this test to pass\r\n\r\n    attr_accessor :name\r\n\r\n    def initialize\r\n      @name = 'Ash'\r\n    end\r\n\r\nAnother test example\r\n\r\n    it "has no brains" do\r\n      zombie = Zombie.new\r\n      zombie.brains.should < 1\r\n    end\r\n\r\nTo get this passing\r\n\r\n    attr_accessor :name, :brains\r\n\r\n    def initialize\r\n      @name = 'Ash'\r\n      @brains = 0\r\n    end\r\n\r\nSome other matchers:\r\n\r\n* `zombie.alive.should be_false`\r\n* `zombie.rotting.should == true`\r\n\r\nPredicate matchers read very well. Suppose there is a method `hungry?` on the class.\r\n\r\n    it 'is hungry' do\r\n      zombie = Zombie.new\r\n      zombie.should be_hungry\r\n    end\r\n\r\nYou can make an example pending by adding `x` to the `it` block as `xit`. Or simply\r\nput the method `pending` within the body of the `it` block.\r\n\r\n## Level 2 - Configuration and Matchers\r\n\r\nWithin a rails project, use the `rspec-rails` gem. Then `rails generate rspec:install`. This configuration file will be different than the standard rspec install. It specifies that all helper files will be within the `spec/support` directory. Here you can also specify a mocking framework if you do not want to use the default\r\n\r\n    RSpec.configure do |config|\r\n      config.mock_with :mocha\r\n    end\r\n\r\nWhen you run the `rspec` command, you can specify options like color and documentation format\r\n\r\n    rspec --color --format documentation spec/models/zombie_spec.rb\r\n\r\nThese can also be placed in the `.rspec` file. Then simply `rspec` will run all the specs in the project. You can specify a directory or file, even line number to run\r\n\r\n    rspec\r\n    rspec spec/models/\r\n    rspec spec/models/zombie_spec.rb\r\n    rspec spec/models/zombie_spec.rb:4\r\n\r\nNow we can write a simple unit test on our model\r\n\r\n    # spec/models/zombie_spec.rb\r\n\r\n    require 'spec_helper'\r\n    describe Zombie do\r\n       it 'is invalid without a name' do\r\n         zombie = Zombie.new\r\n         zombie.should_not be_valid\r\n       end\r\n    end\r\n\r\nThis uses the predicate matcher, the `be_valid`. There are several\r\nmatchers available, such as the `match` method which uses a regular expression\r\n\r\n    zombie = Zombie.new(name: "Ash Clone 1")\r\n    zombie.name.should match(/Ash Clone \\d/)\r\n\r\nYou can use `include to make sure an item is part of an array\r\n\r\n    tweet1 = Tweet.new(status: 'ugnh')\r\n    zombie.tweets.should include(tweet1)\r\n\r\nYou can use the `have` matcher to make comparisons more readable\r\n\r\n    zombie.weapons.count.should == 2\r\n\r\n    zombie.should have(2).weapons\r\n\r\nThis works for `have_at_least(most)` also.\r\n\r\nYou can use an `expect` block with a `change` method to specify\r\na more exact error message.\r\n\r\n    it 'changes the number of Zombies' do\r\n      zombie = Zombie.new(name: 'Ash')\r\n      expect { zombie.save }.to change { Zombie.count }.by(1)\r\n    end\r\n\r\nAlso available are `from` and `to`, which are chainable. You can\r\nalso check to see a specific error raised.\r\n\r\n    expect { zombie.save! }.to raise_error( ActiveRecord::RecordInvalid )\r\n\r\nSome other matchers available:\r\n\r\n* `respond_to(<method_name>)`\r\n* `be_within(<range>).of(<expected>)`\r\n* `exist`\r\n* `satisfy { <block> }`\r\n* `be_kind_of(<class>)`\r\n* `be_an_instance_of(<class>)`\r\n\r\n`satisfy` can be used to check if a block returns true.\r\n\r\n## Level 3 - Dry Specs\r\n\r\nWhen using the class name in your describe block, you can omit\r\nthe creation of an instance.\r\n\r\n    describe Zombie do\r\n      it 'responds to name' do\r\n        zombie = Zombie.new\r\n        zombie.should respond_to(:name)\r\n      end\r\n    end\r\n\r\nThe `it` block can be refactored to:\r\n\r\n    subject.should respond_to(:name)\r\n\r\nYou could even omit `subject` and use just: `should respond_to(:name)`.\r\nFor simple tests like this, you can even omit the description of\r\nthe `it` block.\r\n\r\n    describe Zombie do\r\n      it { should respond_to(:name) }\r\n    end\r\n\r\nYou can also shorten the `it` block for value checking tests\r\nwith the `its` method\r\n\r\n    its(:name) { should == 'Ash' }\r\n    its(:weapons) { should include(weapon) }\r\n    its('tweets.size') { should == 2 }\r\n\r\nYou can also create a describe blocks within other describe blocks,\r\nyou can use the method `context` or `describe`\r\n\r\n    describe Zombie do\r\n      context 'when hungry' do\r\n        it 'craves brains'\r\n        \r\n        context 'with a veggie preference' do\r\n          it 'still craves brains'\r\n          it 'prefers vegan brains'\r\n        end\r\n      end\r\n    end\r\n\r\nYou can declare a `subject` within the context block for the test\r\nto apply to\r\n\r\n    context 'with a veggie preference' do\r\n      subject { Zombie.new(vegetarian: true) }\r\n\r\n      its(:craving) { should == 'vegan brains' }\r\n    end\r\n\r\nYou can only have one subject per test, but you can include other objects\r\nwith the `let` method.\r\n\r\n    context 'with a veggie preference' do\r\n      subject { Zombie.new(vegetarian: true, weapons: [axe]) }\r\n      let(:axe) { Weapon.new(name: 'axe') }\r\n\r\n      its(:weapons) { should include(axe) }\r\n\r\n      it 'can use its axe' do\r\n        subject.swing(axe).should == true\r\n      end\r\n    end\r\n\r\nWhen you have a long list of specs, it may be unclear what the `subject`\r\nis. You can be more explicit by aliasing the subject with a `let` method\r\nin older versions of rspec\r\n\r\n    let(:zombie) { Zombie.new(vegetarian: true, weapons: [axe]) }\r\n    subject { zombie }\r\n\r\nIn newer versions of rspec:\r\n\r\n    subject(:zombie) { Zombie.new }\r\n\r\nRSpec is using *lazy evaluation*, so these objects are not being\r\ncreated in the database until they are called. So something like this\r\nwould fail:\r\n\r\n    it "creates a zombie" { Zombie.count == 1 }\r\n\r\nIf you want to make the `let` create an object, use `let!`.\r\n\r\n    let!(:zombie) { Zombie.create }\r\n\r\n## Level 4 - Hooks & Tags\r\n\r\nYou can run methods before examples in the spec by using a `before` block\r\n\r\n    describe Zombie do\r\n      let(:zombie) { Zombie.new }\r\n      before { zombie.hungry! }\r\n\r\n      it 'is hungry' do\r\n        zombie.should be_hungry\r\n      end\r\n    end\r\n\r\nThis will also run within deeply nested context blocks.\r\n\r\nYou can store code in *shared examples* to be shared across files or\r\nexamples. Shared examples should be stored in the `spec/support` directory\r\n\r\n    # spec/models/zombie_spec.rb\r\n\r\n    describe Zombie do\r\n      it_behaves_like 'the undead'\r\n    end\r\n\r\n    # spec/support/shared_examples_for_undead.rb\r\n\r\n    shared_examples_for 'the undead' do\r\n      it 'does not have a pulse' do\r\n        subject.pulse.should == false\r\n      end\r\n    end\r\n\r\nThis can be unclear when using the generic `subject` object.\r\nYou can declare an explicit subject in your `it_behaves_like` block\r\n\r\n    # zombie_spec\r\n\r\n    describe Zombie do\r\n      it_behaves_like 'the undead' do\r\n        let(:undead) { Zombie.new }\r\n      end\r\n    end\r\n\r\n    # shared_example\r\n\r\n    it 'does not have a pulse' do\r\n      undead.pulse.should == false\r\n    end\r\n\r\nAnother way to write this would be:\r\n\r\n    # zombie_spec\r\n\r\n    it_behaves_like 'the undead', Zombie.new\r\n\r\n    # shared_example\r\n\r\n    shared_examples_for 'the undead' do |undead|\r\n      it 'does not have a pulse' do\r\n        undead.pulse.should == false\r\n      end\r\n    end\r\n\r\nIf you want to run specific specs, you can add tags\r\n\r\n    # zombie_spec\r\n\r\n    context 'with a veggie preference', focus: true do\r\n      it 'prefers vegan brains', vegan: true\r\n    end\r\n\r\n    # command line\r\n\r\n    rspec --tag focus spec/lib/zombie_spec.rb\r\n\r\nYou can specify these tags to be selected every time you run rspec\r\nin the `spec_helper`\r\n\r\n    RSpec.configure do |config|\r\n      config.filter_run focus: true\r\n      config.run_all_with_everything_filtered = true\r\n    end\r\n\r\nIf you want to prevent certain tests from being run, add a `~` to the tag\r\nwhen calling it from the command line\r\n\r\n    rspec --tag ~slow spec/lib/zombie_spec.rb\r\n\r\nYou can also set these in the spec helper using `filter_run_excluding`\r\n\r\n    config.filter_run_excluding slow: true\r\n\r\n## Level 5 - Mocks & Stubs\r\n\r\nRSpec mocking and stubbing is similar to Mocha. As a reminder, a stub\r\nis a replacement for a method. A mock is a stub with an expectation\r\n\r\n    zombie.weapon.stub(:slice)\r\n\r\nThis stubs the `slice` method so it is not run.\r\n\r\nIt is common to see a context block for methods in the model using the `#`\r\n\r\n    context '#decapitate' do\r\n      it "sets status to dead again" do\r\n        zombie.weapon.stub(:slice)\r\n        zombie.decapitate\r\n        zombie.status.should == "dead again"\r\n      end\r\n    end\r\n\r\nThe `slice` method is on the `weapon` class, which is not what we are\r\ntesting. This could be a very complex method, so we want to skip it here\r\nso that our test does not fail because of a problem somewhere else.\r\nHere you can see that the `slice` method is stubbed out, because we are\r\ntesting that the `decapitate` method sets the status to "dead again".\r\nTo test that the `slice` method is run, we will need a mock.\r\nMocks are created with `should_receive`, which creates an expectation\r\nthat the method is called.\r\n\r\n    it "calls weapon.slice" do\r\n      zombie.weapon.should_receive(:slice)\r\n      zombie.decapitate\r\n    end\r\n\r\nYou can also create a mock with specific parameters\r\n\r\n    # zombie.rb\r\n\r\n    def geolocate\r\n      Zoogle.graveyard_locator(self.graveyard)\r\n    end\r\n\r\n    # zombie_spec.rb\r\n\r\n    it "calls Zoogle.graveyard_locator" do\r\n      Zoogle.should_receive(:graveyard_locator).with(zombie.graveyard)\r\n      zombie.geolocate\r\n    end\r\n\r\nIf we change this `geolocate` method to receive a hash from the `Zoogle`\r\nservice, then return a string, we need to specify a return value\r\n\r\n    # zombie.rb\r\n\r\n    loc = Zoogle.graveyard_locator(self.graveyard)\r\n    "#{loc[:latitude]}, #{loc[:longitude]}"\r\n\r\n    # zombie_spec.rb\r\n\r\n    Zoogle.should_receive(:graveyard_locator).with(zombie.graveyard)\r\n      .and_return({latitude: 2, longitude: 3})\r\n\r\nThis will test that the `geolocate` method calls the Zoogle service,\r\nbut we will now also need to check that the correct value is returned\r\nfrom the method in a separate example.\r\n\r\n    it "returns properly formatted lat, long" do\r\n      Zoogle.stub(:graveyard_locator).with(zombie.graveyard)\r\n        .and_return({latitude: 2, longitude: 3})\r\n      zombie.geolocate.should == "2, 3"\r\n    end\r\n\r\nThere may be times when the service returns an object, which requires\r\na slightly different method of testing.\r\n\r\n    def geolocate_with_object\r\n      loc = Zoogle.graveyard_locator(self.graveyard)\r\n      "#{loc.latitude}, #{loc.longitude}"\r\n    end\r\n\r\nHere you create a *stub object*.\r\n\r\n    it "returns properly formatted lat, long" do\r\n      loc = stub(latitude: 2, longitude: 3)\r\n      Zoogle.stub(:graveyard_locator).returns(loc)\r\n      zombie.geolocate_with_object.should == "2, 3"\r\n    end\r\n\r\n### Testing with mailers.\r\n\r\nHere is an example mailer\r\n\r\n    class ZombieMailer < ActionMailer::Base\r\n      def welcome(zombie)\r\n        mail(from: 'admin@codeschool.com', to: zombie.email,\r\n                  subject: 'Welcome Zombie!')\r\n      end\r\n    end\r\n\r\nThis will need have some basic method testing\r\n\r\n    # spec/mailers/zombie_mailer_spec.rb\r\n\r\n    describe ZombieMailer do\r\n      context "#welcome" do\r\n        let(:zombie) { Zombie.create(email: 'ash@zombiemail.com') }\r\n        subject { ZombieMailer.welcome(zombie) }\r\n\r\n        its(:from) { should include('admin@codeschool.com') }\r\n        its(:to) { should include(zombie.email) }\r\n        its(:subject) { should == 'Welcome Zombie!' }\r\n      end\r\n    end\r\n\r\nWe can make this faster with a *stub object*, because we do not need\r\nmore than one method from the active record object.\r\n\r\n    let(:zombie) { stub(email: 'ash@zombiemail.com') }\r\n\r\nThere are more mocking options you can use to make your tests more\r\nefficient. `target.should_receive(:function)`:\r\n\r\n* `.once`, `.twice`\r\n* `.exactly(3).times`, `.at_least(2).times`, `.at_most(3).times`\r\n* `.any_number_of_times`\r\n* `.with(no_args())`, `.with(any_args())`\r\n* `.with("B", anything())`\r\n* `.with(3, kind_of(Numeric))`\r\n* `.with(/zombie ash/)`\r\n\r\n## Level 6 - Custom Matchers\r\n\r\nAn example test on validation for errors:\r\n\r\n    it "validates presence of name" do\r\n      zombie = Zombie.new(name: nil)\r\n      zombie.valid?\r\n      zombie.errors.should have_key(:name)\r\n    end\r\n\r\nThis would be a good case to use custom matchers, because of how often\r\nthis will be used. To create a custom matcher:\r\n\r\n    # spec/support/validate_presence_of_name.rb\r\n\r\n    module ValidatePresenceOf\r\n      class Matcher\r\n        def initialize(attribute)\r\n          @attribute = attribute\r\n        end\r\n        \r\n        def matches?(model)\r\n          @model = model\r\n          @model.valid?\r\n          @model.errors.has_key?(@attribute)\r\n        end\r\n        def failure_message\r\n         "#{@model.class} failed to validate :#{@attribute} presence." \r\n        end\r\n\r\n        def negative_failure_message\r\n          "#{@model.class} validated :#{@attribute} presence."\r\n        end\r\n\r\n      end\r\n      def validate_presence_of(attribute)\r\n        Matcher.new(attribute)\r\n      end\r\n    end\r\n\r\n    RSpec.configure do |config|\r\n      config.include ValidatePresenceOfName, type: :model\r\n    end\r\n\r\nNow you can refactor the test:\r\n\r\n    it "validates presence of name" do\r\n      zombie = Zombie.new(name: nil)\r\n      zombie.should validate_presence_of(:name)\r\n    end\r\n\r\nYou may want to use a custom error message for your validation\r\n\r\n    validates :name, presence: { message: 'been eaten' }\r\n\r\nYou could test this normally with:\r\n\r\n    zombie.should validate_presence_of(:name).with_message('been eaten')\r\n\r\nBut our custom matcher does not yet accept chains.\r\n\r\n    # spec/support/validate_presence_of.rb\r\n\r\n    def initialize(attribute)\r\n      @attribute = attribute\r\n      @message = "can't be blank" # default failure message\r\n    end\r\n\r\n    def matches?(model)\r\n      @model = model\r\n      @model.valid?\r\n      errors = @model.errors[@attribute] # collect errors and find match\r\n      errors.any? { |error| error = @message }\r\n    end\r\n\r\n    def with_message(message)\r\n      @message = message # override failure message & return self\r\n      self\r\n    end\r\n\r\nThe *shoulda* gem will include a lot of these custom matchers.\r\n	2	2015-03-31 21:14:41.030876	2015-03-31 21:14:41.030876
44	RubyBits 2	rubybits-2	## Level 1 - Blocks, Procs & Lambdas\r\n\r\nIf you want to pass a block in as a variable to be used later,\r\nyou can use `Proc` object.\r\n\r\n    my_proc = Proc.new { puts "tweet" }\r\n    my_proc.call # => tweet\r\n\r\nYou can do the same thing with `lambda`\r\n\r\n    my_proc = lambda { puts "tweet" }\r\n    my_proc = -> { puts "tweet" }\r\n\r\nHere is an example that sends a tweet using a block passed into the method:\r\n\r\n    class Tweet\r\n      def post\r\n        if authenticate?(@user, @password)\r\n          # submit the tweet\r\n          yield\r\n        else\r\n          raise 'Auth Error'\r\n        end\r\n      end\r\n    end\r\n\r\n    tweet = Tweet.new("Ruby Bits!")\r\n    tweet.post { puts "Sent!" }\r\n\r\nTo rewrite this using `Proc` objects, you could do it this way:\r\n\r\n    class Tweet\r\n      def post(success)\r\n        if authenticate?(@user, @password)\r\n          # submit the tweet\r\n          success.call\r\n        else\r\n          raise 'Auth Error'\r\n        end\r\n      end\r\n    end\r\n\r\n    tweet = Tweet.new('Ruby Bits!')\r\n    success = -> { puts "Sent!" }\r\n    tweet.post(success)\r\n\r\nIn this way, you can set a custom error if the authentication fails\r\n\r\n    class Tweet\r\n      def post(success, error)\r\n        if authenticate?(@user, @password)\r\n          success.call\r\n        else\r\n          error.call\r\n        end\r\n      end\r\n    end\r\n\r\n    tweet = Tweet.new("Ruby Bits!")\r\n    success = -> { puts "Sent!" }\r\n    error = -> { raise 'Auth Error' }\r\n    tweet.post(success, error)\r\n\r\nYou sometimes may want to convert between lambdas and blocks.\r\n\r\n    tweets = ["First tweet", "Second tweet"]\r\n    tweets.each do |tweet|\r\n      puts tweet\r\n    end\r\n\r\nUsing the `&` symbol, you can convert a `Proc` into a block\r\n\r\n    tweets = ["First Tweet", "Second Tweet"]\r\n    printer = lambda { |tweet| puts tweet }\r\n    tweets.each(&printer)\r\n\r\nIf you instead want to turn a block into a `Proc`, use the `&` symbol\r\nin the parameters when defining a method\r\n\r\n    def each(&block)\r\n\r\nThis technique is often used in conjunction with the conversion from `Proc` to block\r\n\r\n    class Timeline\r\n      attr_accessor :tweets\r\n\r\n      def each(&block)\r\n        tweets.each(&block)\r\n      end\r\n    end\r\n\r\n    timeline = Timeline.new(tweets)\r\n    timeline.each do |tweet|\r\n      puts tweet\r\n    end\r\n\r\nYou can also use the `&` to convert a symbol to a block\r\n\r\n    tweets.map { |tweet| tweet.user }\r\n    # is the same as\r\n    tweets.map(&:user)\r\n\r\nYou may want the option of passing in a block or some other type of argument, so you\r\ncan use the `block_given?` method\r\n\r\n    class Timeline\r\n      attr_accessor :tweets\r\n\r\n      def print\r\n        if block_given?\r\n          tweets.each { |tweet| puts yield tweet }\r\n        else\r\n          puts tweets.join(", ")\r\n        end\r\n      end\r\n    end\r\n\r\n    timeline = Timeline.new\r\n    timeline.tweets = ["One", "Two"]\r\n\r\n    timeline.print # => One, Two\r\n\r\n    timeline.print do |tweet|\r\n      "tweet: #{tweet}"\r\n    end\r\n\r\nYou can even use this in the constructor\r\n\r\n    class Tweet\r\n      def initialize\r\n        yield self if block_given?\r\n      end\r\n    end\r\n\r\n    Tweet.new do |tweet|\r\n      tweet.status = "Set in initialize!"\r\n      tweet.created_at = Time.now\r\n    end\r\n\r\nIt is also important to note that `Proc` objects create closures, meaning the \r\nstate of the variable is preserved when the lambda is created.\r\n\r\n    def tweet_as(user)\r\n      lambda { |tweet| puts "#{user}: #{tweet}" }\r\n    end\r\n\r\n    gregg_tweet = tweet_as("greggpollack")\r\n\r\n    # remembers the user\r\n\r\n    greeg_tweet.call("Mind blowing!")\r\n    # => greggpollack: Mind blowing!\r\n\r\n## Level 2 - Dynamic Classes and Methods\r\n\r\nThe `struct` class allows you to create custom classes.\r\n\r\n    class Tweet\r\n      attr_accessor :user, :status\r\n\r\n      def initialize(user, status)\r\n        @user, @status = user, status\r\n      end\r\n    end\r\n\r\n    # is the same as\r\n\r\n    Tweet = Struct.new(:user, :status)\r\n\r\nSo struct is a much cleaner way to create classes that deal more with data than\r\nbehavior. You can add additional methods by passing in a block\r\n\r\n    Tweet = Struct.new(:user, :status) do\r\n      def to_s\r\n        "#{user}: #{status}"\r\n      end\r\n    end\r\n\r\nYou may have a class with two methods doing the same thing, in this case, you can\r\nuse the `alias` method\r\n\r\n    def tweets\r\n      @tweets\r\n    end\r\n\r\n    alias_method :contents, :tweets\r\n\r\nIn this case, you could even replace the `tweets` method with `attr_reader :tweets`.\r\n\r\nIf for some reason you're unable to change a method within a class, you can\r\nre-open the class and overwrite it, using an alias to store the old method\r\n\r\n    class Timeline\r\n      alias_method :old_print, :print\r\n\r\n      def print\r\n        authenticate!\r\n        old_print\r\n      end\r\n\r\n      def authenticate!\r\n        # code...\r\n      end\r\n    end\r\n\r\nYou can also do this using inheritence.\r\n\r\n    class AuthenticatedTimeline < Timeline\r\n      def print\r\n        authenticate!\r\n        super\r\n      end\r\n\r\n      def authenticate!\r\n        # code...\r\n      end\r\n    end\r\n\r\nSometimes you will have very similar methods in a class\r\n\r\n    class Tweet\r\n      def draft\r\n        @status = :draft\r\n      end\r\n\r\n      def posted\r\n        @status = :posted\r\n      end\r\n      \r\n      def deleted\r\n        @status = :deleted\r\n      end\r\n    end\r\n\r\nYou can generate these simple methods dynamically using `define_method`\r\n\r\n    class Tweet\r\n      states = [:draft, :posted, :deleted]\r\n      states.each do |status|\r\n        define_method status do\r\n          @status = status\r\n        end\r\n      end\r\n    end\r\n\r\nUsing the `send` method, you can pass in a string or symbol to run a method\r\n\r\n    timeline.contents\r\n    timeline.send(:contents)\r\n    timeline.send("contents")\r\n\r\nSend can also access private and protected methods. Using `public_send` will\r\nmake sure you aren't able to do this.\r\n\r\nYou can *capture* methods using the `method` method.\r\n\r\n    content_method = timeline.method(:contents)\r\n\r\nYou can then call the method like you would a `Proc`\r\n\r\n    content_method.call\r\n\r\nIf the method takes arguments, add them to the call method\r\n\r\n    show_method.call(0)\r\n\r\nYou can also use the `&` to make a method a `Proc` object.\r\n\r\n    (0..1).each(&show_method)\r\n\r\n## Level 3 - Understanding self\r\n\r\nInside of a class definition, `self` refers to the class object.\r\n\r\n    class Tweet\r\n      def self.find(keyword)\r\n        puts "Inside a class method: #{self}"\r\n      end\r\n    end\r\n\r\n    Tweet.find("rubybits") # class method: Tweet\r\n\r\nWhen created inside an instance method, `self` will refer to the instance.\r\n\r\n    class Tweet\r\n      def initialize(status)\r\n        puts "Inside a method: #{self}"\r\n        @status = status\r\n      end\r\n    end\r\n\r\n    Tweet.new("What is self, anyway?") # Tweet:0x007f8c222de488\r\n\r\n`class_eval` sets `self` for the duration of a block. You can use this to add things\r\nto the class without reopening it.\r\n\r\n    class Tweet\r\n      attr_accessor :status, :created_at\r\n\r\n      def initialize(status)\r\n        @status = status\r\n        @created_at = Time.now\r\n      end\r\n    end\r\n\r\n    Tweet.class_eval do\r\n      attr_accessor :user\r\n    end\r\n\r\n    tweet = Tweet.new("RubyBits")\r\n    tweet.user = "codeschool"\r\n\r\nWe can use all that we have learned to create a method logger. In psuedocode this will do:\r\n\r\n    log_method takes a class and method name\r\n    use class_eval to execute code in the class\r\n      use alias_method to save the original method\r\n      use define_method to redefine the method\r\n        log the method call\r\n        use send to call the original method\r\n\r\nIn code, this will look like:\r\n\r\n    class MethodLogger\r\n      def log_method(klass, method_name)\r\n        klass.class_eval do\r\n          alias_method "#{method_name_original}", method_name\r\n          define_method method_name do\r\n            puts "#{Time.now}: Called #{method_name}"\r\n            send "#{method_name}_original"\r\n          end\r\n        end\r\n      end\r\n    end\r\n\r\nThis wont take any arguments or blocks, though. To add this functionality, change\r\nthe define_method call to include `*args` and `&block` in the block.\r\n\r\n    define_method method_name do |*args, &block|\r\n      puts "#{Time.now}: Called #{method_name}"\r\n      send "#{method_name}_original", *args, &block\r\n    end\r\n\r\nAnother method, `instance_eval`, sets self to an instance of an object.\r\n\r\n    class Tweet\r\n      attr_accessor :user, :status\r\n    end\r\n\r\n    tweet = Tweet.new\r\n    tweet.instance_eval do\r\n      self.status = "Changing the tweet's status"\r\n    end\r\n\r\nWe can use this to clean up some code from the first Ruby Bits series:\r\n\r\n    class Tweet\r\n      attr_accessor :user, :status\r\n\r\n      def initialize\r\n        yield self if block_given?\r\n      end\r\n    end\r\n\r\n    Tweet.new do |tweet|\r\n      tweet.status = "I was set in the initial block!"\r\n      tweet.user = "Gregg"\r\n    end\r\n\r\nTo refactor this:\r\n\r\n    # class Tweet\r\n\r\n    def initialize(&block)\r\n      instance_eval(&block) if block_given?\r\n    end\r\n\r\n    # outside\r\n\r\n    Tweet.new do\r\n      tweet.status = "I was set in the initial block!"\r\n      tweet.user = "Gregg"\r\n    end\r\n\r\n## Level 4 - Missing Methods\r\n\r\nYou can customize the method missing response in your class\r\n\r\n    class Tweet\r\n      def method_missing(method_name, *args)\r\n        logger.warn "You tried to call #{method_name} with these arguments: #{args}"\r\n        super # The default Ruby "No Method Error"\r\n      end\r\n    end\r\n\r\nYou can use this custom method_missing method to delegate all unknown methods to another class.\r\n\r\n    class Tweet\r\n      def initialize(user)\r\n        @user = user\r\n      end\r\n\r\n      def method_missing(method_name, *args)\r\n        @user.send(method_name, *args)\r\n      end\r\n    end\r\n\r\nIf the `User` class does not have a particular method, its own method_missing method will respond.\r\nYou can do this for only specific methods by creating a constant of `DELEGATED_METHODS` to check.\r\n\r\n    # class Tweet\r\n\r\n    DELEGATED_METHODS = [:username, :avatar]\r\n\r\n    def method_missing(method_name, *args)\r\n      if DELEGATED_METHODS.include?(method_name)\r\n        @user.send(method_name, *args)\r\n      else\r\n        super\r\n      end\r\n    end\r\n\r\nThis is a useful technique, so ruby provides a special delegator class you can inherit from\r\n\r\n    require 'delegate'\r\n\r\n    class Tweet < SimpleDelegator\r\n      def initialize(user)\r\n        super(user)\r\n      end\r\n    end\r\n\r\nYou could also use the method_missing method to respond to dynamic methods.\r\n\r\n    tweet = Tweet.new("Sponsored by")\r\n    tweet.hash_ruby\r\n    tweet.hash_metaprogramming\r\n    puts tweet\r\n\r\n    class Tweet\r\n      def initialize(text)\r\n        @text = text\r\n      end\r\n\r\n      def to_s\r\n        @text\r\n      end\r\n\r\n      def method_missing(method_name, *args)\r\n        match = method_name.to_s.match(/^hash_(\\w+)/)\r\n        if match\r\n          @text << " #" + match[1]\r\n        else\r\n          super\r\n        end\r\n      end\r\n    end\r\n\r\n`respond_to?` and the `method` method will not be correct when dealing with this methods. So you will\r\nhave to create a custom `respond_to?` method\r\n\r\n    def respond_to_missing?(method_name)\r\n      method_name =~ /^hash_\\w+/ || super\r\n    end\r\n\r\nIf these dynamic methods are going to pop up a lot, you can actually create the method within the\r\nmethod_missing method\r\n\r\n    def method_missing(method_name, *args)\r\n      match = method_name.to_s.match(/^hash_(\\w+)/)\r\n      if match\r\n        self.class.class_eval do\r\n          define_method(method_name) do\r\n            @text << " #" + match[1]\r\n          end\r\n        end\r\n        send(method_name)\r\n      else\r\n        super\r\n      end\r\n    end\r\n\r\n## Level 5 - DSL Part 1\r\n\r\nWe want the code to be easy to read.\r\n\r\n    tweet_as 'markkendall' do\r\n      mention 'codeschool'\r\n      text 'I made a DSL!'\r\n      hashtag 'hooray'\r\n      hashtag 'ruby'\r\n      link 'http://codeschool.com'\r\n    end\r\n\r\n    # output\r\n\r\n    @codeschool I made a DSL! #hooray #ruby http://codeschool.com\r\n\r\nWe can make several simple methods to do this\r\n\r\n    def tweet_as(user, &block)\r\n      tweet = Tweet.new(user)\r\n      tweet.instance_eval(&block)\r\n      tweet.submit_to_twitter\r\n    end\r\n\r\n    class Tweet\r\n\r\n      def initialize(user)\r\n        @user = user\r\n        @tweet = []\r\n      end\r\n\r\n      def text(str)\r\n        @tweet << str\r\n      end\r\n\r\n      def mention(user)\r\n        @tweet << "@" + user\r\n      end\r\n\r\n      def hashtag(str)\r\n        @tweet << "#" + str\r\n      end\r\n\r\n      def link(str)\r\n        @tweet << str\r\n      end\r\n\r\n      def submit_to_twitter\r\n        tweet_text = @tweet.join(' ')\r\n        puts "#{@user}: #{tweet_text}"\r\n      end\r\n    end\r\n\r\nIf you want to implement chaining, add `self` to end of the methods.\r\n\r\n    def link(str)\r\n      @tweet << str\r\n      self\r\n    end\r\n\r\n# Level 6 - DSL Part 2\r\n\r\nRight now our tweet requires a block. But if we want to tweet something more\r\nsimple, we can have the block be optional:\r\n\r\n    def tweet_as(user, text = nil, &block)\r\n      tweet = Tweet.new(user)\r\n      tweet.text(text) if text\r\n      tweet.instance_eval(&block) if block_given?\r\n      tweet.submit_to_twitter\r\n    end\r\n\r\n    # simplified syntax\r\n\r\n    tweet_as 'markkendall', 'This is a simple tweet'\r\n\r\nUsing the `*` (splat operator) in the DSL method, we can pass in an array\r\nto each method\r\n\r\n    def mention(*users)\r\n      users.each do |user|\r\n        @tweet << "@" + user\r\n      end\r\n      self\r\n    end\r\n\r\nThe new Twitter API allows a hash of extra attributes, which we would\r\nlike to be able to pass into our DSL this way:\r\n\r\n    tweet_as 'markkendall' do\r\n      mention 'codeschool', 'envylabs'\r\n      text 'I made a DSL!'\r\n      hashtag 'hooray', 'ruby'\r\n      link 'http://codeschool.com'\r\n      lat 28.415\r\n      lng -81.298\r\n      keywords 'Ruby', 'DSL'\r\n    end\r\n\r\nWe can do this with the `method_missing` method.\r\n\r\n    class Tweet\r\n      def initialize(user)\r\n        @user = user\r\n        @tweet = []\r\n        @annotations = {} # added to store extra\r\n      end\r\n\r\n      def submit_to_twitter\r\n        tweet_text = @tweet.join(' ')\r\n        puts "#{@user}: #{tweet_text}"\r\n        puts @annoatations.inspect unless @annoations.empty?\r\n      end\r\n\r\n      def method_missing(method, *args)\r\n        @annoations[method] = args.join(", ")\r\n      end\r\n    end\r\n\r\nYou will probably want to raise custom exceptions to describe failures.\r\n\r\n    def submit_to_twitter\r\n      tweet_text = @tweet.join(' ')\r\n      if tweet_text.length <= 140\r\n        puts "#{@user}: #{tweet_text}"\r\n        puts @annotations.inspect unless @annotations.empty?\r\n      else\r\n        raise "Your tweet is too long"\r\n      end\r\n    end\r\n\r\n	2	2015-03-31 21:14:41.083229	2015-03-31 21:14:41.083229
45	CodeSchool - EmberJS	codeschool-emberjs	### 1.1\r\n\r\nTo get started, use the starter kit and ember data\r\n\r\n* http://emberjs.com\r\n* https://github.com/emberjs/data\r\n\r\nFor design\r\n\r\n* http://getbootstrap.com\r\n\r\nThe javascript stack:\r\n\r\n* jquery.js\r\n* handlebars.js\r\n* ember.js\r\n* ember-data.js\r\n* app.js\r\n\r\nThe `App` object will contain all of the custom code\r\n\r\n    var App = Ember.Application.create({ });\r\n\r\nIf you want to log an output every time a page is accessed, inside that App object put:\r\n\r\n    LOG_TRANSITIONS: true\r\n\r\nEmber will add a body class and data attribute to the body of your page.\r\n\r\nBy default, ember uses the *handlebars* template. You wrap your html in a script tag to use handlebars.\r\n\r\n    <script type="text/x-handlebars">\r\n    </script>\r\n\r\n### 1.2\r\n\r\nUsing a `data-template-name` attribute you can set html for different pages. These will be rendered where\r\nyou set up an `{{outlet}}`, this looks for the `index` template by default.\r\n\r\n### 1.3\r\n\r\nTo set routes, use the Router.map function\r\n\r\n    App.Router.map(function() {\r\n      this.route('about');\r\n    });\r\n\r\nIf you want a different path/template name, it can be specified\r\n\r\n    this.route('about', { path: '/aboutus' });\r\n	4	2015-03-31 21:14:41.138123	2015-03-31 21:14:41.138123
46	CodeSchool - JavaScript Roadtrip III	codeschool-javascript-roadtrip-iii	## Level 1\r\n\r\nDeclared functions, `function diffOfSquares(a,b) {}` are loaded and saved right away. Function expressions `var diff = function diffOfSquares(a,b) {};` are loaded only when called. To call this function, use the variable name, not the function name, `diff(9,5);`. You can actually make this an anonymous function: `var diff = function (a,b) {};`.\r\n\r\nYou can use function expressions from other functions\r\n\r\n    var greeting = function() {\r\n      alert("Thanks for visiting!");\r\n    }\r\n\r\n    closeTerminal(greeting);\r\n\r\n    function closeTerminal(message) {\r\n      message();\r\n    }\r\n\r\n### The `map` method\r\n\r\nThe `map` method must take in a function, whether it is a declared function or a function expression.\r\nMap works like a loop that applies a function to each array index.\r\n\r\n    var numbers = [12, 4, 3];\r\n\r\n    var results = numbers.map( function (arrayCell) {\r\n        return arrayCell * 2;\r\n      }\r\n    );\r\n\r\nMake sure to pass an argument into the function, so that the map method has something to apply the\r\nfunction to.\r\n\r\nYou can return functions when using function expressions:\r\n\r\n    var parkRides = [ ["Birch Bumpers", 40], ["Pines Plunge", 55] ];\r\n    var fastPassQueue = [ "Cedar Coaster", "Pines Plunge" ];\r\n\r\n    function buildTicket ( allRides, passRides, pick ) {\r\n      if(passRides[0] == pick) {\r\n        var pass = passRides.shift();\r\n        return function () { alert("Quick! You've got a Fast Pass to " + pass + "!"); };\r\n      } else {\r\n        for(var i = 0; i<allRides.length; i++) {\r\n          if(allRides[i][0] == pick) {\r\n            return function () {\r\n              alert("A ticket is printing for " + pick + "!\\n" +\r\n                    "Your wait time is about " + allRides[i][1] + " minutes.");\r\n            };\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\nNOTE: The `shift` method returns the first item from the array and remove it from the array. You can store\r\nthis in a variable or throw it away.\r\n\r\nYou have to include `()` at the end of your call to a variable to indicate that you want the function within\r\nthat variable to run.\r\n\r\n    var wantsRide = "Birch Bumpers";\r\n    var ticket = buildTicket( parkRides, fastPassQueue, wantsRide );\r\n    ticket();\r\n\r\nYou can run this without assigning the `ticket` variable, using just `();`\r\n\r\n    buildTicket( parkRides, fastPassQueue, wantsRide )();\r\n\r\n## Level 2 - Closures\r\n\r\n    function buildCoveTicketMaker( transport ) {\r\n      return function ( name ) {\r\n        alert("Here is your transportation ticket via the " + transport + ".\\n" +\r\n              "Welcome to the Cold Closures Cove, " + name + "!");\r\n      }\r\n    }\r\n\r\n    var getSubmarineTicket = buildCoveTicketMaker("Submarine");\r\n\r\nYou can modify variables from the parent function using the enclosed function.\r\n\r\n    function buildCoveTicketMaker( transport ) {\r\n      var passengerNumber = 0; //Initialize the passengers when building the function.\r\n      return function ( name) {\r\n        passengerNumber++; //Add a passenger each time the function is called.\r\n        alert("Here is your transportation ticket via the " + transport + ".\\n" +\r\n              "Welcome to the Cold Closures Cove, " + name + "!" +\r\n              " You are passenger #" + passengerNumber + ".");\r\n      }\r\n    }\r\n\r\n    var getSubmarineTicket = buildCoveTicketMaker("Submarine");\r\n    getSumarineTicket("Mario");\r\n\r\nNOTE: Closures bind values at the very last moment.\r\n\r\n    function assignTorpedo ( name, passengerArray ) {\r\n      var torpedoAssignment;\r\n      for (var i=0;i<passengerArray.length;i++) {\r\n        if (passengerArray[i] == name) {\r\n          torpedoAssignment = function() {\r\n            alert("Ahoy, " + name + ", you man torpedo #" + (i+1));\r\n          };\r\n        }\r\n      }\r\n      return torpedoAssignment;\r\n    }\r\n\r\n    var subPassengers = ['one', 'two', 'three'];\r\n    var giveAssignment = assignTorpedo("two", subPassengers);\r\n    giveAssignment();\r\n\r\nThis will closure apply the variables at the very last iteration, so `i` is not\r\nevaluated until the final loop. This means the torpedoAssignment will always return\r\nthe last value in the array.\r\n\r\nWe can rectify this be elementing the use of the `torpedoAssignment` variable and simply\r\nreturning a function. This prevents the loop from progressing to the final value. You could\r\nalso rebuild this to be more like the `ticketMaker` function.\r\n\r\n## Level 5\r\n\r\nIt can be very helpful to override some of the object methods like\r\n`toString()` and `valueOf()`.\r\n\r\n    Tornado.prototype.toString = function() {\r\n      var list = "";\r\n      for (var i = 0; i < this.affectedAreas.length; i++) {\r\n        if (i < this.affectedAreas.length - 1) {\r\n          list = list + this.affectedAreas[i][0] + ", ";\r\n        } else {\r\n          list = list + "and " + this.affectedAreas[i][0];\r\n        }\r\n      }\r\n      return "This tornado has been classified as an " + this.category +\r\n      ", with wind gusts up to " + this.windGust +\r\n      "mph. Affected areas are: " + list +\r\n      ", potentially affecting a population of " + this.valueOf() + ".";\r\n    }\r\n\r\nOne common task is to find which prototype has a particular property\r\nor method. You can create a method on the `Object.prototype` to do this.\r\n\r\n    Object.prototype.findOwnerOfProperty = function (propName) {\r\n      var currentObject = this;\r\n      while (currentObject !== null) {\r\n        if (currentObject.hasOwnProperty(propName)) {\r\n          return currentObject;\r\n        } else {\r\n          currentObject = currentObject.__proto__;\r\n        }\r\n      }\r\n      return "No property found!";\r\n    }\r\n\r\n	4	2015-03-31 21:14:41.189234	2015-03-31 21:14:41.189234
47	CodeSchool - jQuery 2	codeschool-jquery-2	## Level 1 - Ajax Basics\r\n\r\nIf you want to pull some data from the server using ajax:\r\n\r\n    # html\r\n\r\n    %li.confirmation\r\n      %h3 Hawaiian Vacation\r\n      %button Flight details\r\n      .ticket\r\n        %a.view-boarding-pass View Boarding Pass\r\n        %img{src: '/ticket-14836.png'}\r\n\r\n    # js\r\n\r\n    // show the hidden element when button is clicked\r\n    $('confirmation').on('click', 'button', function() {\r\n      $(this).find('.ticket').slideDown();\r\n    });\r\n    // show boarding pass when link is clicked\r\n    $('confirmation .view-boarding-pass').on('click', function() {\r\n      $(this).closest('.ticket').find('img').show();\r\n    });\r\n\r\n    # ajax\r\n\r\n    $('confirmation').on('click', 'button', function() {\r\n      $.ajax('confirmation.html', {\r\n        success: function(response) {\r\n          $('.ticket').html(response).slideDown();\r\n        }\r\n      });\r\n    });\r\n\r\nA simplified version of this uses the `.get()` method\r\n\r\n    $.get('confirmation.html', function(response) {\r\n      $('.ticket').html(response).slideDown();\r\n    });\r\n\r\nAjax can also take in a data object\r\n\r\n    $.ajax('confirmation.html', {\r\n      success: function(response) {\r\n        $('.ticket').html(response).slideDown();\r\n      },\r\n      data: { "confNum": 1234 }\r\n    });\r\n\r\nYou can also store the data in html\r\n\r\n    # html\r\n\r\n    <div class="ticket" data-confNum="1234">\r\n\r\n    # js\r\n\r\n    $.ajax('confirmation.html', {\r\n      success: function(response) {\r\n        $('.ticket').html(response).slideDown();\r\n      }, data: { "confNum": $(".ticket").data("confNum") }\r\n    });\r\n\r\n### Ajax options\r\n\r\nTo handle errors:\r\n\r\n    $.ajax('confirmation.html', {\r\n      success: function(response) {\r\n        $('.ticket').html(response).slideDown();\r\n      },\r\n      error: function(request, errorType, errorMessage) {\r\n        alert('Error: ' + errorType + ' with message: ' + errorMessage);\r\n      }\r\n    });\r\n\r\nYou may want to specify a timeout option to set how long you want to wait.\r\n\r\n    timeout: 3000\r\n\r\nYou may also want to set a loading spinner while the ajax function is working\r\n\r\n    beforeSend: function() {\r\n      $('.confirmation').addClass('is-loading');\r\n    }\r\n\r\nAfter success or an error, use the `complete` option.\r\n\r\n    complete: function() {\r\n      $('.confirmation').removeClass('is-loading');\r\n    }\r\n\r\nIn this case, targetting `$('.confirmation .view-boarding-pass')` will not work.\r\nYou will need to target the available element, `$('.confirmation')` and select\r\nthe desired element using event delegation.\r\n\r\n    $('.confirmation .view-boarding-pass').on('click', function() { ... });\r\n\r\n    // to\r\n\r\n    $('.confirmation').on('click', '.view-boarding-pass', function(){ ... });\r\n\r\n\r\n## Level 2 - JavaScript Objects\r\n\r\nA full ajax object can get kind of messy\r\n\r\n    $(document).ready(function() {\r\n      $('.confirmation').on('click', 'button', function() {\r\n        $.ajax('confirmation.html', {\r\n          timeout: 3000,\r\n          success: function(response) { $('.ticket').html(response).slideDown(); },\r\n          error: function(request, errorType, errorMessage) {\r\n            alert('Error: ' + errorType + ' with message: ' + errorMessage);\r\n          }, \r\n          beforeSend: function() { $('.confirmation').addClass('is-loading'); },\r\n          complete: function() { $('.confirmation').removeClass('is-loading'); }\r\n        });\r\n      });\r\n      $('.confirmation').on('click', '.view-boarding-pass', function(event) {\r\n        event.preventDefault();\r\n        $('.view-boarding-pass').hide();\r\n        $('.boarding-ass').show();\r\n      });\r\n    });\r\n\r\nWe can refactor this into an object.\r\n\r\n    var confirmation = {\r\n      init: function() {\r\n        //event handlers\r\n        $('.confirmation').on('click', 'button', this.loadConfirmation);\r\n        $('.confirmation').on('click', '.view-boarding-pass', this.showBoardingPass);\r\n      },\r\n      loadConfirmation: function() { ... },\r\n      showBoardingPass: function(event) { ... }\r\n    };\r\n\r\n    $(document).ready(function() {\r\n      confirmation.init();\r\n    });\r\n\r\nYou can make this more flexible using classes instead of objects.\r\n\r\n    function Vacation(destination) {\r\n      this.details = function() {\r\n        console.log(destination);\r\n      }\r\n    }\r\n\r\n    $(document).ready(function() {\r\n      var paris = new Vacation('Paris');\r\n      paris.details();\r\n      var london = new Vacation('London');\r\n      london.details();\r\n    });\r\n\r\nTo refactor our object into a class:\r\n\r\n    function Confirmation(el) {\r\n      this.el = el;\r\n      this.ticket = this.el.find('.ticket');\r\n\r\n      // set the value of "this" for use in the ajax callbacks.\r\n      var confirmation = this;\r\n\r\n      //helper methods\r\n      this.loadConfirmation = function() {\r\n        $.ajax('confirmation.html', {\r\n          timeout: 3000,\r\n          context: confirmation, // set the value of "this"\r\n          success: function(response) {\r\n            this.ticket.html(response).slideDown();\r\n          }\r\n        });\r\n      }\r\n      this.showBoardingPass = function(event) {\r\n        event.preventDefault();\r\n        $(this).hide();\r\n        confirmation.el.find('.boarding-pass').show();  \r\n      }\r\n\r\n      //event handlers\r\n      this.el.on('click', 'button', this.loadConfirmation);\r\n      this.el.on('click', '.view-boarding-pass', this.showBoardingPass);\r\n    }\r\n\r\n    $(document.ready(function() {\r\n      var paris = new Confirmation($('#paris'));\r\n    });\r\n\r\n## Level 3 - Ajax with Forms\r\n\r\nYou can use ajax with a post request\r\n\r\n    $('form').on('submit', function(event) {\r\n      event.preventDefault();\r\n      var form = $(this);\r\n      $.ajax('/book', {\r\n        type: 'POST',\r\n        data: form.serialize() //pull data out of form as key/value pairs,\r\n        success: function(result) {\r\n          form.remove();\r\n          $('#vacation').hide().html(result).fadeIn();\r\n        }\r\n      });\r\n    });\r\n\r\n### Ajax with JSON\r\n\r\nCommonly people will use the `attr` method to get the action from the form, rather\r\nthan hard coding the post request location into the ajax request\r\n\r\n    $.ajax($('form').attr('action'), { ... });\r\n\r\n## Level 4 - Utility functions\r\n\r\nThe `$.each()` utility takes a collection and function as parameters\r\n\r\n    $.each(collection, function(<index>, <object>) {}\r\n\r\n    $.each(result, function(index, city) {\r\n      var favorite = $('.favorite-' + index);\r\n    }\r\n\r\nThe `$.map()` utility takes the same parameters and then applies the function\r\nto each item.\r\n\r\n    $.map(collection, function(<item>, <index>){});\r\n\r\n    var newNumbers = $.map(myNumbers, function(item, index){return item + 1});\r\n\r\n    $.map(result, function(status, i) {\r\n      var listItem = $('<li></li>');\r\n      return listItem;\r\n    });\r\n\r\nYou can use this to create an array of list items, which will be converted to a\r\nstring when sent to HTML.\r\n\r\nThe `detach()` method can help you be slightly more effecient when populating\r\nthe DOM with new HTML. It removes the element while it is being updated\r\n\r\n    $('.status-list').detach().html(statusElements).appendTo('.status');\r\n\r\n## Level 5 - jQuery Plugins\r\n\r\nYou can add a namespace to an event handler\r\n\r\n    $('button').on('click.image', picture);\r\n    $('button').off('click.image');\r\n\r\nYou can also turn off everything from a namespace with `.off('.image')`\r\n\r\nIf you want to *trigger* an event for some reason, you can use the `trigger` method.\r\n\r\n    $('button').trigger('click');\r\n\r\nThis will run the event on the button.\r\n\r\nYou can create custom events, like `on('show')`. Then run this custom event using a `trigger`\r\n\r\n    $('.vacation').on('show.price', showPrice);\r\n    $('.vacation').trigger('show.price');\r\n\r\n### Defining plugins\r\n\r\nUsing `.fn` will define the plugin name usage\r\n\r\n    $.fn.priceify = function() {\r\n      console.log('Pricify Called');\r\n      console.log(this);\r\n    };\r\n\r\n    $('.vacation').priceify();\r\n\r\nThis will show you the plugin is working. Now we can make it functional\r\n\r\n    $.fn.priceify = function() {\r\n      //apply this to an array of jQuery objects\r\n      this.each(function() {\r\n        var vacation = this;\r\n        vacation.on('click.priceify', 'button', function() {\r\n          var price = vacation.data('price');\r\n          var details = $('<p>Book 3 days for $'+(3*price)+'</p>');\r\n          $(this).hide();\r\n          vacation.append(details);\r\n        });\r\n      });\r\n    };\r\n\r\n    $(document).ready(function() {\r\n      $('.vacation').priceify();\r\n    });\r\n\r\nYou can build the plugin using named parameters, then access them in dot notation.\r\n\r\n    $('.vacation').priceify({days: 5});\r\n\r\n    $.fn.priceify = function(options) {\r\n      ...\r\n      var details = $('<p>Book ' + options.days + ' days for $' + ...\r\n    }\r\n\r\nTo set defaults for these options, you can user the `$.extend()` utility\r\n\r\n    $.fn.priceify = function(options) {\r\n      this.each(function() {\r\n        var settings = $.extend({\r\n          days: 3,\r\n          vacation: this,\r\n          price: $(this).data('price')\r\n        }, options);\r\n\r\n        settings.vacation.on('click.priceify', 'button', function() {\r\n          var details = $('<p>book ' + settings.days +' days for $' + \r\n                        (settings.days * settings.price) + '</p>');\r\n          $(this).hide();\r\n          settings.vacation.append(details);\r\n        });\r\n      }\r\n    }\r\n\r\n#### From the exercises:\r\n\r\n    $.fn.photofy = function() {\r\n      this.each(function() {\r\n        var tour = $(this);\r\n        tour.on('click.photofy', '.see-photos', function(event) {\r\n          event.preventDefault();\r\n          tour.addClass('is-showing-photofy');\r\n        });\r\n      });\r\n    }\r\n\r\n    $(document).ready(function() {\r\n      $('.tour').photofy();\r\n    });\r\n\r\nFinal form:\r\n\r\n    $.fn.photofy = function(options) {\r\n      this.each(function() {\r\n        var show = function(e) {\r\n          e.preventDefault();\r\n          settings.tour\r\n                  .addClass('is-showing-photofy')\r\n                  .find('.photos')\r\n                  .find('li:gt('+(settings.count-1)+')')\r\n                  .hide();\r\n        }\r\n        var settings = $.extend({\r\n          count: 3,\r\n          tour: $(this)\r\n        }, options);\r\n        settings.tour.on('click.photofy', '.see-photos', show);\r\n        settings.tour.on('show.photofy', show);\r\n        var remove = function(e) {\r\n          e.preventDefault();\r\n          settings.tour.fadeOut().off('.photofy');\r\n        };\r\n        settings.tour.on('click.photofy', '.hide-tour', remove);\r\n      });\r\n    }\r\n\r\n    $(document).ready(function() {\r\n      $('.tour').photofy({ count: 1});\r\n      \r\n      $('.show-photos').on('click', function(e) {\r\n        e.preventDefault();\r\n        $('.tour').trigger('show.photofy');\r\n      });\r\n    });\r\n\r\n## Level 6 - Promises\r\n\r\nFinal code:\r\n\r\n    # application.js\r\n\r\n    $(document).ready(function() {\r\n      $('button').on('click', function(){\r\n        var tour = $(this).parent();\r\n        var location = tour.data('location');\r\n        var resultDiv = tour.find('.results').empty();\r\n\r\n        $.when(\r\n          Vacation.getPrice(location),\r\n          Photo.getPhoto(location)\r\n        ).then(function(priceResult, photoResult) {\r\n          $('<p>$'+priceResult+'</p>').appendTo(resultDiv);\r\n          $('<img />').attr('src', photoResult).appendTo(resultDiv);\r\n        });\r\n      });\r\n    });\r\n\r\n    # vacation.js\r\n    \r\n    var Vacation = {\r\n      getPrice: function(location){\r\n        var promise = $.Deferred();\r\n        $.ajax('/vacation/prices', {\r\n          data: {q: location},\r\n          success: function(result){\r\n            promise.resolve(result.price);\r\n          }\r\n        });\r\n        return promise;\r\n      }\r\n    }\r\n\r\n    # photo.js       \r\n    \r\n    var Photo = {\r\n      getPhoto: function(location){\r\n        var promise = $.Deferred();\r\n        $.ajax('/vacation/photos', {\r\n          data: {q: location},\r\n          success: function(result){\r\n            promise.resolve(result.url);\r\n          }\r\n        });\r\n        return promise;\r\n      }\r\n    } \r\n	4	2015-03-31 21:14:41.24218	2015-03-31 21:14:41.24218
69	Jquery UI Autocomplete	jquery-ui-autocomplete	This is a nice way to get JSON and fill in a hidden value using an autocomplete input\r\n\r\n    $('.item-complete').autocomplete\r\n      source: (request, response) ->\r\n        $.getJSON "/items.json?term=#{request.term}", (data) ->\r\n          response $.map data, (item) ->\r\n            label: item.name\r\n            id: item.id\r\n      select: (event, ui) ->\r\n        $('#auction_item_id').val(ui.item.id)\r\n	4	2015-03-31 21:14:42.356268	2015-03-31 21:14:42.356268
70	Rbenv with ActiveTcl	rbenv-with-activetcl	Install 8.5 from: [http://www.activestate.com/activetcl/downloads](http://www.activestate.com/activetcl/downloads).\r\n\r\nAdd ActiveTcl to your .bashrc:\r\n\r\n    export PATH="/opt/ActiveTcl-8.5/bin:$PATH"\r\n\r\nRun rbenv with config options:\r\n\r\n    CONFIGURE_OPTS="--with-tcl --with-tk" rbenv install 2.1.4	2	2015-03-31 21:14:42.407445	2015-03-31 21:14:42.407445
48	Useful Snippets	useful-snippets	Import and export\r\n\r\n    pg_dump dbname > outfile\r\n    psql dbname < infile\r\n\r\nCopy a table to csv\r\n\r\n    COPY wines TO '/Users/shaun/Documents/winerecorder.csv' DELIMITER ',' CSV HEADER;\r\n\r\nInsert into a table\r\n\r\n    insert into users (username, password_digest, permission) values ('stmartin', 'password', 1);\r\n\r\nRun SQL file\r\n\r\n    psql -d hdc_dev -a -f journal_query.sql\r\n\r\nExport table as SQL\r\n\r\n    pg_dump --table=glossaries --data-only --column-inserts hdc_dev > glossaries.sql\r\n\r\nDump from remote database, it will ask for a password:\r\n\r\n    pg_dump -h [db_host] -U [db_user] -W [db_name]\r\n\r\nCreate database\r\n\r\n    sudo -u postgres createdb mydb\r\n\r\nSet value for next increment\r\n\r\n    SELECT setval('tags_id_seq', 44) FROM tags;\r\n\r\nWhen setting up a new postgresql server. You have to set the postgres password from the command line:\r\n\r\n    sudo -u postgres psql postgres\r\n    \\password postgres\r\n\r\n    sudo -u postgres createuser shaun\r\n\r\nTo get the sum of a column that may not all be integers:\r\n\r\n    select SUM(mvalue::int) from mtables where msubject = 'character_level';	5	2015-03-31 21:14:41.293405	2015-03-31 21:14:41.293405
49	TutsPlus - AngularJs Authentication	tutsplus-angularjs-authentication	## **Angular** - Create view and controller for login\r\n\r\nUse the model:\r\n\r\n    ng-model="user.email"\r\n    ng-model="user.password"\r\n    button type="submit"\r\n\r\nIn the form tag:\r\n\r\n    name="LoginForm" novalidate ng-submit="login()"\r\n\r\nTo specify classes for validation\r\n\r\n    ng-class"{'has-error' : loginForm.email.$invalid && loginForm.email.$dirty, 'has-success' : loginForm.email.$valid && loginForm.email.$dirty }"\r\n\r\nYou can easily display an error message on submission, by setting the error message to display when a parameter is true.\r\n\r\n    // view\r\n    span ng-show="loginForm.submitted"\r\n\r\n    // controller\r\n\r\n    $scope.login = function() {\r\n      console.log('sending request to server');\r\n    } else {\r\n      $scope.loginForm.submitted = true\r\n    }\r\n\r\nYou could also do this with a directive, but it involves more work.\r\n\r\n## Make request to server\r\n\r\n* Create `auth` service. It will make http request, requiring the $http service. It makes an api request to `/api/login` using the model's email and password.\r\n\r\n1. Check credentials\r\n2. create token.\r\n3. Store token and include token in every request.\r\n4. Server should check token for every request that requires authentication.\r\n\r\n* Using devise in rails.\r\n* Add string field for `authentication_token` to user model.\r\n* Skip default session route. Add `api/login` route for user to point to `sessions#create`\r\n* Create `sessions_controller.rb` which inherits from `Devise::SessionsController`\r\n* You should now be able to make a request, but it will get a **422 error**.\r\n* Set `protect_from_forgery with: :null_session`.\r\n* Make a `create` action in the session controller.\r\n* Devise provides `User.find_for_database_authentication(email: params[:email])`, use this with `user && user.valid_password?(params[:password])`. If this passes, it should return true, otherwise render nothing with a status `:unauthorized`\r\n* If passes, create authentication token and render json with authentication token.\r\n* Create authentication token method should be in the model. Use `Devise.friendly_token` for creating this authentication token.\r\n* Add a user to the database. `auth_token` should be returned to you if using correct credentials.\r\n* To show an error message on false credentials, in the angular controller, set up a `promise` with the `login` method. Then use success and error methods to process the promise.\r\n* On success, set `localStorage.setItem('auth_token', response.data.auth_token)` and change `$location.path('/')`.\r\n\r\n## Include auth_token for all requests.\r\n\r\n* in the main application javascript, create a new `factory('authInterceptor', function() {})`\r\n* Return on object with a `request` containing a `config` object.\r\n* If `localStorage.auth_token`, set the `config.headers.token` to `localStorage.auth_token`.\r\n* Use the app `.config` function to add this interceptor to `$httpProvidors`.\r\n\r\n## Checking whether user authenticated or not\r\n\r\n* Create a route that would need to be authenticated, such as `admin`.\r\n* Add `before_action :authenticate_user_from_token!` to controllers that need authentication\r\n* Define `authenticate_user_from_token!` in the `ApplicationController`\r\n* Check for `request.headers["token"].presence`\r\n* Find a user by that authentication token.\r\n* If a user is found, `sign_in` the user and don't store it.\r\n* In the controller action, if `current_user` render nothing, otherwise render `:unauthorized`\r\n\r\n## Redirecting on error\r\n\r\n* Add a `requestError` function to your `authInterceptor`.\r\n* If the response status is unauthorized, redirect to login.\r\n\r\n## Showing links\r\n\r\n* Add a link with `ng-show="isLoggedIn()" ng-click="logOut()"`\r\n* Create the `isLoggedIn()` method in the `NavigationController`, which will be a reference to `auth.isLoggedIn()`.\r\n* In the `auth` service, check if the `auth_token` is set. Return true or false.\r\n* `logout()` is also defined in `auth`, send it to `api/logout`.\r\n* Reference it in `NavigationController` with a promise. This will remove the item from local storage and redirect to the login.\r\n* Add the route to the rails app for `api/logout`\r\n* In the `SessionController`, create the destroy action to set the authentication_token to nil.\r\n* Apply the authenticate filter except for the create action.	4	2015-03-31 21:14:41.341565	2015-03-31 21:14:41.341565
50	CodeSchool - AngularJS	codeschool-angularjs	## Chapter 1\r\n\r\n### Meet AngularJS\r\n\r\nAngularJS uses dependency injection to make it easy to assemble an application from smaller, testable services.\r\n\r\n* [Gallery of AngularJS Applications](https://builtwith.angularjs.org/)\r\n* [YouTube Channel](http://www.youtube.com/user/angularjs)\r\n* [Libraries and Extensions](http://ngmodules.org/)\r\n\r\n* Batarang - Chrome developer tool for inspecting AngularJS applications\r\n* [Plunker](http://plnkr.co/) - Similar to jsFiddle\r\n\r\n### AngularJS crash course\r\n\r\nA very basic use of templating:\r\n\r\n    <body ng-app ng-init="name = 'World'">\r\n      <h1>Hello, {{name}}</h1>\r\n    </body>\r\n\r\nTwo-way data binding:\r\n\r\n    <input type="text" ng-model="name">\r\n    <h1>Hello, {{name}}</h1>\r\n\r\nIt's best to break out the init definitions into a controller.\r\n\r\n    # controller:\r\n    HelloCtrl = ($scope) ->\r\n      $scope.name = 'World'\r\n\r\n    # html:\r\n    div ng-controller="HelloCtrl"\r\n\r\nScope exposes the domain model to a view. These are initialized in controllers. Controllers are regular JavaScript functions, which provide properties and methods to $scope. Each $scope is an instance of the Scope class, which has methods to control the lifecycle and propagation. Models are plain JavaScript objects, which can be defined outside of the framework.\r\n\r\nThe `ng-controller` directive actually runs a `Scope.$new()` method to create the scope. Scopes can create a tree-like relationship, rooted at $rootScope. Some directives create child scopes, for example the `ng-repeat` directive. You can visualize the scope hierarchy using the Batarang extension.You can reference the parent scope with `$parent`. Try to avoid this, however, as it strongly links your javascript with the DOM structure. Instead, you could bind the property to an object and not directly on the scope.\r\n\r\n    <body ng-app ng-init="thing = { name : 'World' }">\r\n      <h1>Hello, {{thing.name}}</h1>\r\n\r\nThe `$on` method is available on each scope to register a scope-event handler. For example, we can listen for the `$locationChangeSuccess` event, which is broadcasted from the `$rootScope` instance.\r\n\r\n    $scope.$on('$locationChangeSuccess', function(event, newUrl, oldUrl) {\r\n      // react to location change, such as update breadcrumbs based on newUrl\r\n    })\r\n\r\nIn general, we can find two-way data binding in place of event listening, but there are several events available:\r\n\r\n* emitted(from children) - $includeContentRequested, $includeContentLoaded, $viewContentLoaded\r\n* broadcasted(from parent) - $locationChangeStart, $locationChangeSuccess, $routeUpdate, $routeChangeStart, $routeChangeSuccess, $routeChangeError, $destroy\r\n\r\nScopes are usually brought to life and destroyed by directives, but you can manually create and destroy using `$new()` and `$destroy()` methods on the Scope type.\r\n\r\n#### Declarative template view\r\n\r\nA basic template for a text entry field might look something like this:\r\n\r\n    <div class="container" ng-controller="TextAreaWithLimitCtrl">\r\n      <span ng-class="{'text-warning' : shouldWarn()}">Remaining: {{remaining()}}</span>\r\n      <div class="row">\r\n        <textarea ng-model="message">{{message}}</textarea>\r\n        <div class="row">\r\n          <button ng-disabled="!hasValidLength()" ng-click="send()"></button>\r\n          <button ng-click="clear()"></button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    # JavaScript Controller\r\n      $scope.remaining = ->\r\n        return MAX_LEN - $scope.message.length\r\n      $scope.shouldWarn = ->\r\n        return $scope.remaining() < WARN_THRESHOLD\r\n\r\nYou should avoid manipulating the DOM elements directly from Angular. Also, controllers should not be applied to the global scope, instead attached to a module.\r\n\r\n    angular.module('hello', [])\r\n      .controller 'HelloCtrl', ($scope) ->\r\n        $scope.name = 'World'\r\n\r\n#### Dependency Injection\r\n\r\nAngularJS can manage objects in different ways. As a value:\r\n\r\n    var myMod = angular.module('myMod', []);\r\n    myMod.value('notificationsArchive', new NotificaationsArchive());\r\n\r\nObjects registered via this method can't depend on other objects, so this only works for very simple objects.\r\n\r\nYou can also register an object as a service.\r\n\r\n    myMod.service('notificationsService', NotificationsService);\r\n\r\n    var NotificationsService = function(notificationsArchive) {\r\n      this.notificationsArchive = notificationsArchive;\r\n    }\r\n\r\nNow this service is not concerned with dependencies instantiation and can accept any archiving service.\r\n\r\nFactories are more flexible, because they can be used to register any arbitrary object-creating function\r\n\r\n    myMod.factory('notificationsService', function(notificationsArchive) {\r\n      var MAX_LEN = 10;\r\n      var notifications = [];\r\n\r\n      return {\r\n        push: function (notification) {\r\n          var notificationToArchive;\r\n          var newLen = notifications.unshift(notification);\r\n\r\n          // push method can rely on the closure scope now\r\n          if (newLen > MAX_LEN) {\r\n            notificationToArchive = this.notifications.pop();\r\n\r\n            notificationsArchive.archive(notificationToArchive);\r\n          }\r\n        } //, other methods\r\n      }\r\n    })\r\n\r\nThis is the most common method for getting objects into the dependency injection system.\r\n\r\nConstants can also be injected\r\n\r\n    myMod.constant('MAX_LEN', 10);\r\n\r\n    myMod.factory('notificationsService', function(notificationsArchive, MAX_LEN) {});\r\n\r\nAll these methods are just special cases of the generic version, `provider`.\r\n\r\n    myMod.provider('notificationsService', function() {\r\n      var config = {\r\n        maxLen : 10\r\n      };\r\n      var notifications = [];\r\n\r\n      return {\r\n        setMaxLen : function(maxLen) {\r\n          config.maxLen = maxLen || config.maxLen;\r\n        },\r\n\r\n        $get : function(notificationsArchive) {\r\n          return {\r\n            push: function(notification) {\r\n              ...\r\n              if (newLen > config.maxLen) {\r\n                ...\r\n\r\n`provider` must return an object containing the `$get` property, which should return a `service` instance. This makes the `provider` the most versital object creation method. To support providers, the module's lifecycle is split into two phases, configuration and run. Providers are configured during configuration\r\n\r\n    myMod.config(function(notificationsServiceProvider) {\r\n      notifcationsServiceProvider.setMaxLen(5);\r\n    });\r\n\r\nThe run phase is equivalent to the `main` method in other programming languages. However, there is not a single entry point for an AngularJS module. For example, if you wanted to display the application's start time to users:\r\n\r\n    angular.module('upTimeApp', []).run(function($rootScope) {\r\n      $rootScope.appStarted = new Date();\r\n    })\r\n\r\n    # html\r\n    Application started at: {{appStarted}}\r\n\r\nA summary of object creation methods:\r\n\r\n | What gets Registered? | Configuration Phase | Run Phase\r\nConstant | Value | Yes | Yes\r\nVariable | Value | - | Yes\r\nService | New object created by constructor | - | Yes\r\nFactory | New object returned from factory | - | Yes\r\nProvider | A new object created by $get | Yes | -\r\n\r\nServices can be moved into their own modules and then referenced as dependencies on the main module.\r\n\r\n    angular.module('application', ['notifications', 'archive'])\r\n\r\nServices defined in child modules are available for injection into services in parent modules.\r\n\r\n    angular.module('app', ['engines'])\r\n      .factory('car', function ($log, dieselEngine) {})\r\n    angular.module('engines', [])\r\n      .factory('dieselEngine', function() {})\r\n\r\nServices defined on sibling modules are also visible to each other. Services defined with in a child module will over-ride the parent service. Currently, there is no support for **module-private** services.\r\n\r\n## Chapter 2. Building and Testing\r\n\r\n### Build system\r\n\r\nWe will use **grunt.js** build scripts. Tests for AngularJS were written using **Jasmine**, which AngularJS provides various mock objects for. **Karma** is used to run the tests using a browser.\r\n\r\n### Organizing files and folders\r\n\r\nThe file structure will look like this:\r\n\r\n* src\r\n  * app\r\n    * admin\r\n      * projects\r\n      * users\r\n    * dashboard\r\n    * login\r\n    * projects\r\n      * productbacklog\r\n      * sprints\r\n        * tasks\r\n    * projectsinfo\r\n  * assets\r\n    * img\r\n  * common\r\n    * directives\r\n    * resources\r\n    * services\r\n      * authentication\r\n  * less\r\n  * index.html\r\n* test\r\n  * config\r\n  * e2e\r\n    * app\r\n      * admin\r\n  * unit\r\n    * app\r\n      * admin\r\n      * dashboard\r\n    * common\r\n* vendor\r\n* build\r\n* dist\r\n* .gitignore\r\n* LICENSE\r\n* Gruntfile.js\r\n* package.json\r\n\r\nWe will group files together based on resource, so templates and controllers will be grouped together.\r\n\r\n### AngularJS modules and Files\r\n\r\nWe will keep one module per file and chain services to modules.\r\n\r\n    angular.module('admin-projects', [])\r\n      .controller('ProjectsListCtrl', function($scope) {})\r\n      .controller('ProjectsEditCtrl', function($scope) {})\r\n\r\nConfiguration could be done in the module initialization block, but instead we will use `config` chains.\r\n\r\n    angular.module('admin-projects', [])\r\n      .config(function() {})\r\n      .config(function() {})\r\n\r\n### Automated testing\r\n\r\n#### Unit tests\r\n\r\nAn example of a simple unit test:\r\n\r\n    describe 'hello world test', ->\r\n      greeter\r\n      beforeEach ->\r\n        greeter = new Greeter()\r\n\r\n      it 'should say hello to the world', ->\r\n        expect(greeter.say('world')).toEqual 'hello world'\r\n\r\nDescribe is a container for the blocks, whereas it contains the actual test. In addition to `expect` and `toEqual`, Jasmine also provides `toBeTruthy`, `toBeDefined`, and `toContain`, along with several other useful testing examples.\r\n\r\nTest-related extensions and mock objects are available in the `angular-mocks` script. This script is not supposed to be deployed, however. As an example, the `notificationArchive` built in the first chapter could be tested:\r\n\r\n    angular.module 'archive', []\r\n      factory 'notificationsArchive', ->\r\n        archivedNotifications = []\r\n        return\r\n          archive: (notifications) ->\r\n            archivedNotifications.push notification\r\n          , getArchived: ->\r\n            return archivedNotifications\r\n\r\n    # test\r\n    describe 'notifications archive tests', ->\r\n      notificationsArchive = null\r\n      beforeEach module('archive')\r\n      beforeEach inject (_notificationsArchive_) ->\r\n        notificationsArchive = _notificationsArchive_\r\n\r\n      it 'should give access to the archived items', ->\r\n        notification = { msg: 'Old message.' }\r\n        notificationsArchive.archive notification\r\n\r\n        expect notificationsArchive.getArchived\r\n          .toContain notification\r\n\r\nIn this example, the `module` function indicates that the services from a given module should be prepared for the test. The `inject` function injects the service into our test. The use of underscores in `_notificationsArchive_` tells the $injector to retrieve dependencies.\r\n\r\nTesting controllers follows a similar pattern. This controller is responsible for adding and removing the project's team members\r\n\r\n    angular.module 'admin-projects', []\r\n      .controller 'ProjectsEditCtrl', ($scope, project) ->\r\n        $scope.project = project\r\n\r\n        $scope.removeTeamMember = (teamMember) ->\r\n          idx = $scope.project.teamMembers.indexOf teamMember\r\n          if idx >= 0\r\n            $scope.project.teamMembers.splice(idx, 1)\r\n\r\n    # test\r\n    describe 'ProjectsEditCtrl tests', ->\r\n\r\n      $scope = null\r\n      beforeEach module('admin-projects')\r\n      beforeEach inject ($rootScope) ->\r\n        $scope = $rootScope.$new()\r\n\r\n      it 'should remove an existing team member', inject ($controller) ->\r\n        teamMember = {}\r\n        $controller 'ProjectsEditCtrl',\r\n          $scope: $scope,\r\n          project:\r\n            teamMembers: [teamMember]\r\n\r\n        # verify the initial setup\r\n        expect $scope.project.teamMembers\r\n          .toEqual [teamMember]\r\n\r\n        # execute and verify results\r\n        $scope.removeTeamMember teamMember\r\n        expect $scope.project.teamMembers\r\n          .toEqual []\r\n\r\nThe `removeTeamMember` method that we want to test will be defined on a `$scope`, so to test it we need to create a new scope and a new instance of `ProjectsEditCtrl` and link the two. We do this by injecting the `$rootScope` to create a new `$scope` instance, then `$controller` to inject the controller service. Notice how `inject` can be used in the `beforeEach` block as well as in the `it` block.\r\n\r\nThe AngularJS team provides mock objects that make testing asynchronous code easier. For example, testing the `$timeout` service (which is a replacement of the `setTimeout` function):\r\n\r\n    angular.module 'async', []\r\n      .factory 'asyncGreeter', ($timeout, $log) ->\r\n        say: (name, timeout) ->\r\n          $timeout ->\r\n            $log.info "Hello, #{name}!"\r\n\r\n    # test\r\n    describe 'Async Greeter test', ->\r\n      asyncGreeter = null\r\n      $timeout = null\r\n      $log = null\r\n\r\n      beforeEach module 'async'\r\n      beforeEach inject (_asyncGreeter_, _$timeout_, _$log) ->\r\n        asyncGreeter = _asyncGreeter_\r\n        $timeout = _$timeout_\r\n        $log = _$log_\r\n\r\n      it 'should greet the async world', ->\r\n        asyncGreeter.say 'World', 99999999999999\r\n        $timeout.flush()\r\n        expect $log.info.logs\r\n          .toContain ['Hello, World!']\r\n\r\n`$timeout.flush()` simulates an asynchronous event being triggered. Because we aren't depending on JavaScripts `setTimeout`, we don't have to wait for the specified time period to expire.\r\n\r\nThe mock for `$log` simulates a logging statement and stores it for further assertions.\r\n\r\n#### End-to-end Tests\r\n\r\nProtractor is the standard for angularJS end-to-end testing.\r\n\r\n#### Workflow\r\n\r\nTest as often as practicably possible. Karma runner is very quick, and you can specify tests to skip using `xit` or `xdescribe`. You can run a particular suite with `ddescribe` or a test with `iit`.\r\n\r\nDebugging tests with karma run is as simple as adding the `debugger` statement to our tests. You can also print values to the console with `angular.mock.dump(object)`(or simply `dump(object)`).\r\n\r\n## Chapter 3. Communicating with a Backend server.\r\n\r\n### Making XHR and JSONP requests with $http\r\n\r\nThe `$http` service is the basic, all-purpose API for making XHR and JSONP requests. There are dedicated methods for the type of requests available.\r\n\r\n* $http.get(url, config)\r\n* $http.post(url, data, config)\r\n* $http.put(url, data, config)\r\n* $http.delete(url, config)\r\n* $http.head\r\n\r\nThe object returned from `$http` allows for success and error callbacks. `$http` can also be used generically as simply `$http(configObject);`, and parameters can be passed in:\r\n\r\n* method\r\n* url\r\n* params\r\n* headers\r\n* timeout\r\n* cache\r\n* transformRequest, transformResponse (pre/post-process data exchanged)\r\n\r\nAn example of a post request\r\n\r\n    userToAdd =\r\n      name: 'AngularJS Superhero'\r\n      email: 'superhero@angularjs.org'\r\n\r\n    $http.post 'https://api.mongolab.com/api/1/databases/ascrum/collections/user', usersToAdd,\r\n      params:\r\n        apiKey: '43kjh56oiu234456091'\r\n\r\nOutcomes of the request are determined 'success' or 'error' based on the status code. 200 to 299 are considered successful. 3xx codes are redirected, others are errors.\r\n\r\nBrowsers enforce the same-origin security policy, preventing XHR interactions with resources from another protocol, host, or port. JSONP gets around this by setting the foreign server as the source of a `<script>` tag. To do this in angular:\r\n\r\n    $http\r\n      .jsonp 'http://angularjs.org/greet.php?callback=JSON_CALLBACK',\r\n        params:\r\n          name: 'World'\r\n      \r\n      .success (data) ->\r\n        $scope.greeting = data\r\n\r\nAngularJs will generate the callback dynamically. The script tag will look something like this:\r\n\r\n    <script type="text/javascript" src="http://angularjs.org/greet.php?callback=angular.callbacks._k&name=World"></script>\r\n\r\n    # response, upon arrival\r\n    angular.callbacks._k ({"name":"World", "salutation":"Hello", "greeting": "Hello World!"});\r\n\r\nThis trick only works for GET requests. Also, this leaves the application open to several security threats, such as XSS.\r\n\r\n**Cross-origin resource sharing (CORS)** is an attempt to solve these limitations. The server must be configured to accept these CORS requests properly. ( [http://www.html5rocks.com/en/tutorials/cors/](http://www.html5rocks.com/en/tutorials/cors/) )\r\n\r\nCORS is not supported for simple requests in IE8 and 9. The browser sends an `OPTION` request prior to any non-simple request, this is like a handshake mechanism.\r\n\r\nIf neither of these options will work for you, you can use a proxy server.\r\n\r\n### The promise API with $q\r\n\r\nThe Promise API system is intended to make asynchronous programming easier. It is intended to ease function call chaining and error handling, in the way a synchronous environment would.\r\n\r\nIn AngularJS, the `$q` service is a simple way to utalize the Promise API.\r\n\r\n`$q.defer()` returns a **deferred** object, which represents a task that will be completed or fail in the future. It holds a **promise** object and exposes methods to trigger future task completion or failure.\r\n\r\n    it 'should illustrate basic usage of $q', ->\r\n      pizzaOrderFulfillment = $q.defer()\r\n      pizzaDelivered = pizzaOrderFulfillment.promise\r\n\r\n      pizzaDelivered.then pawel.eat, pawel.beHungry\r\n      pizzaOrderFulfillment.resolve 'Margherita'\r\n      $rootScope.$digest()\r\n\r\n      expect $log.info.logs\r\n        .toContain ['Pawel is eating delicious Margherita']\r\n\r\nThe Promise API is composed of two actors, one that controls future task execution and the other depends on the results of the future task execution.\r\n\r\nTo register a callback, the `then(successCallback, errorCallback)` method is used. To signal the future task completion, use `resolve`, or `reject` on an error.\r\n\r\nThe results of promise resolution are propagated as part of the `$digest` cycle, which will be explained in more detail later.\r\n\r\nAn example restaurant service might look like:\r\n\r\n    Restaurant = ($q, $rootScope) ->\r\n      currentOrder = null\r\n\r\n      @takeOrder = (orderedItems) ->\r\n        currentOrder =\r\n          deferred: $q.defer()\r\n          items: orderedItems\r\n        return currentOrder.deferred.promise\r\n\r\n      @deliverOrder = ->\r\n        currentOrder.deferred.resolve currentOrder.items\r\n\r\n      @problemWithOrder = (reason) ->\r\n        currentOrder.deferred.reject reason\r\n        $rootScope.$digest()\r\n\r\nHere's how the API would work in a test:\r\n\r\n    it 'should illustrate promise rejection', ->\r\n      pizzaPit = new Restaurant $q, $rootScope\r\n      pizzaDelivered = pizzaPit.takeOrder 'Capricciosa'\r\n      pizzaDelivered.then pawel.eat, pawel.beHungry\r\n\r\n      pizzaPit.problemWithOrder 'no Capricciosa, only Margherita left'\r\n      expect $log.warn.logs\r\n        .toContain ['Pawel is hungry because: no Capricciosa, only Margherita left']\r\n\r\nMultiple success callbacks are registered and all of them are invoked upon a promise resolution.\r\n\r\n    pizzaDelivered = pizzaPit.takeOrder 'Margherita'\r\n    pizzaDelivered.then pawel.eat, pawel.beHungry\r\n    pizzaDelivered.then pete.eat, pete.beHungry\r\n\r\n    pizzaPit.deliverOrder()\r\n\r\nActions can also be chained.\r\n\r\n    pizzaPit.takeOrder 'Margherita'\r\n      .then(slice).then(pawel.eat)\r\n\r\nIf there is an error at any point, the first catch block will run\r\n\r\n    pizzaPit.takeOrder 'Capricciosa'\r\n      .then(slice).then(pawel.eat, pawel.beHungry)\r\n\r\nHere, `pawel.beHungry` is the first possible error, so if there is an error anywhere in the chain, it will run. This is how the Promise API simulates a recovery in catch block.\r\n\r\n    retry = (reason) ->\r\n      return pizzaPit.takeOrder 'Margherita'\r\n        .then slice\r\n\r\n    pizzaPit.takeOrder 'Capricciosa'\r\n      .then(slice, retry).then(pawel.eat, pawel.beHungry)\r\n\r\nIf recovery is not possible, use the `$q.reject` method.\r\n\r\n    explain = (reason) ->\r\n      return $q.reject 'ordered pizza not available'\r\n\r\n    pizzaPit.takeOrder 'Capricciosa'\r\n      .then(slice, explain).then(pawel.eat, pawel.beHungry)\r\n\r\n`$q.all` makes it possible to start multiple asynchronous task and be notified only when all the tasks complete.\r\n\r\n    ordersDelivered = $q.all [\r\n      pizzaPit.takeOrder 'Pepperoni'\r\n      saladBar.takeOrder 'Fresh Salad'\r\n    ]\r\n\r\nThis accepts an array of promises as the argument, and if one action fails the whole thing will be rejected with the same reason as the individual promise that failed.\r\n\r\n`$q.when` will wrap any JavaScript object as a promise. This is good for a time when asynchronous and synchronous actions are working together, and you want to treat them all as asynchronous.\r\n\r\n    ordersDelivered = $q.all [\r\n      pizzaPit.takeOrder 'Pepperoni'\r\n      $q.when 'home made salad'\r\n    ]\r\n\r\nThis returns a promise that is resolved with the value supplied as an argument.\r\n\r\nPromises can also be applied directly to the scope, but this is not recommended.\r\n\r\n    $scope.name = $timeout ->\r\n      return "World"\r\n    , 2000\r\n\r\nThis will return 'World' to the view after 2 seconds. However if you wrap this property in a function it will not run as expected.\r\n\r\n### The promise API with $http\r\n\r\n`$http` services are resolved just like promises, with success and error callbacks available.\r\n\r\n    responsePromise = $http.get 'data.json'\r\n    responsePromise.then (response) ->\r\n      $scope.data = response.data\r\n    , (response) ->\r\n      throw new Error 'Something went wrong...'\r\n\r\n### Communicating with RESTful endpoints\r\n\r\nThe `$resource` service is useful for interacting with RESTful endpoints\r\n\r\n    angular.module 'resource', ['ngResource']\r\n      .factory 'Users', ($resource) ->\r\n        return $resource 'https://api.mongolab.com/api/1/databases/ascrum/collections/users/:id',\r\n          apiKey: 'someKey'\r\n          id: '@_id.$oid'\r\n\r\nHere, we register a `factory` for the `User` consturctor function. The `$resource` service prepares it's CRUD implementation. We can then write `Users.query()` to receive a list of data, as well as other constructor methods like `get`, `save`, and `delete`.\r\n\r\nThe `$resource`'s first argument contains a URL pattern, which can have placeholders for dynamic values. Only one URL pattern can be specified, so the URLs should be similar. The second argument can be parameters for the query. Dynamic parameters can be taken from the resource objects, specified by a `@` character.\r\n\r\nThe constructor methods can also be used at the instance level.\r\n\r\n    Users.delete {}, user\r\n    # equivalent to\r\n    user.$delete()\r\n\r\n    Users.save user\r\n    # equivalent to\r\n    user.$save()\r\n\r\nYou can define custom methods for REST APIs that support others, such as `PUT` or `PATCH`\r\n\r\n    .factory 'Users', ($resource) ->\r\n      return $resource 'url',\r\n        apiKey: 'someKey'\r\n        id: '@_id.$oid'\r\n      ,\r\n        update:\r\n          method: 'PUT'\r\n\r\nThe third parameter is defining a new action, `update`. This can receive an object in this format:\r\n\r\n    action: { method: ?, params: ?, isArray: ?, headers: ? }\r\n\r\nWe can add new behavior to the resource objects be extending the prototype\r\n\r\n    .factory 'Users', (resource) ->\r\n      # ...\r\n\r\n      Users::getFullName = ->\r\n        return "#{@firstName} #{@lastName}"\r\n\r\n      Users\r\n\r\n*NOTE:* CoffeeScript symbol `::` is equivalent to `.prototype.\r\n\r\nThe call to resource constructor methods is asynchronous, so something like this wont work:\r\n\r\n    $scope.users = Users.query()\r\n    console.log $scope.users.length\r\n\r\nHowever, using callbacks you can get this to work as expected\r\n\r\n    User.query (users) ->\r\n      $scope.users = users\r\n      console.log $scope.users.length\r\n\r\nYou can create a fully customized `$resource` service using `$http` services.\r\n\r\n    angular.module 'mongolabResource', []\r\n      .factory 'mongolabResource', ($http, MONGOLAB_CONFIG) ->\r\n        return (collectionName) ->\r\n          # basic configuration\r\n          collectionUrl = "url#{MONGOLAB_CONFIG.DB_NAME}/collections/#{collectionName}"\r\n          defaultParams =\r\n            apiKey: MONGOLAB_CONFIG.API_KEY\r\n\r\n          # utility methods\r\n          getId = (data) ->\r\n            return data._id.$oid\r\n\r\n          # constructor for new resources\r\n          Resource = (data) ->\r\n            angular.extend this, data\r\n\r\n          Resource.query = (params) ->\r\n            return $http.get collectionUrl,\r\n              params: angular.extend\r\n                q: JSON.stringify {} || params\r\n              , defaultParams\r\n                .then (response) ->\r\n                  result = []\r\n                  angular.forEach response.data, (value, key) ->\r\n                    result[key] = new Resource value\r\n                  return result\r\n\r\n          Resource.save = (data) ->\r\n            return $http.post collectionUrl, data, {params: defaultParams}\r\n              .then (response) ->\r\n                return new Resource data\r\n\r\n          Resource::$save = (data) ->\r\n            return Resource.save this\r\n\r\n          Resource.remove = (data) ->\r\n            return $http.delete collectionUrl + '', defaultParams\r\n              .then (response) ->\r\n                return new Resource data\r\n\r\n          Resource::$remove = (data) ->\r\n            return Resource.remove this\r\n\r\n          # other CRUD methods\r\n\r\n          # convenience methods\r\n          Resource::$id = ->\r\n            return getId this\r\n\r\n          Resource\r\n\r\nPromise chaining is used heavily in this example. To use this example:\r\n\r\n    angular.module 'customResourceDemo', ['mongolabResource']\r\n      .constant 'MONGOLAB_CONFIG',\r\n        DB_NAME : 'ascrum'\r\n        API_KEY : 'someKey'\r\n\r\n      .factory 'Users', (mongolabResource) ->\r\n        return mongolabResource('users')\r\n\r\n      .controller 'CustomResourceCtrl', ($scope, Users, Projects) ->\r\n        Users.query().then (users) ->\r\n          $scope.users = users\r\n\r\n### Using advanced features of $http\r\n\r\nThe `$http` service allows us to register interceptors that will be executed around each request. For example, retrying a failed request would look like this:\r\n\r\n    angular.module 'httpInterceptors', []\r\n      .config ($httpProvider) ->\r\n        $httpProvider.responseInterceptors.push 'retryInterceptor'\r\n\r\n      .factory 'retryInterceptor', ($injector, $q) ->\r\n        return (responsePromise) ->\r\n          return responsePromise.then null, (errResponse) ->\r\n            if errResponse.status == 503\r\n              return $injector.get('$http')(errResponse.config)\r\n            else\r\n              return $q.reject(errResponse)\r\n\r\nAn interceptor accepts a promise and should return a promise resolving the intercepted result. Here, we check for `errResponse.status` then run a new `$http` call with the same configuration. If we can't handle the error, it propogates to the reject method.\r\n\r\n### Testing code that interacts with $http\r\n\r\nFor testing, we swap the `$http` dependency called `$httpBackend` with a mock service.\r\n\r\n    describe '$http basic', ->\r\n\r\n      $http = null\r\n      $httpBackend = null\r\n      $scope = null\r\n      ctrl = null\r\n      \r\n      beforeEach module 'test-with-http-backend'\r\n      beforeEach inject (_$http_, _$httpBackend_) ->\r\n        $http = _$http_\r\n        $httpBackend = _$httpBackend_\r\n\r\n      beforeEach inject (_$rootScope_, _$controller_) ->\r\n        $scope = _$rootScope_.$new()\r\n        ctrl = _$controller_('UsersCtrl'),\r\n          $scope : $scope\r\n\r\n      it 'should return all users', ->\r\n        # setup expected requests and responses\r\n        $httpBackend.whenGET 'http://localhost:3000/databases/ascrum/collections/users'\r\n          .respond [ {name: 'Pawel'}, {name: 'Peter'} ]\r\n\r\n        # invoke code under test\r\n        $scope.queryUsers()\r\n\r\n        # simulate response\r\n        $httpBackend.flush()\r\n\r\n        # verify results\r\n        expect $scope.users.length\r\n          .toEqual 2\r\n\r\n      afterEach ->\r\n        $httpBackend.verifyNoOutstandingExpectation()\r\n        $httpBackend.verifyNoOutstandingRequest()\r\n\r\nUsing `whenGET` we can prepare fake responses with `respond`. By using `flush()`, we can simulate HTTP response arriving from a back-end at a chosen moment.\r\n\r\n## Chapter 4 - Displaying and Formatting Data\r\n\r\n	4	2015-03-31 21:14:41.389865	2015-03-31 21:14:41.389865
51	Server Setup	server-setup	## Some Wordpress configuration:\r\n\r\nCreate database and privileges. Get the latest wordpress:\r\n\r\n    wget http://wordpress.org/latest.tar.gz\r\n    tar xzvf latest.tar.gz\r\n\r\nAdd a couple PHP modules\r\n\r\n    sudo apt-get update\r\n    sudo apt-get install php5-gd libssh2-php\r\n\r\nSet up `wp-config.php` with database credentials\r\n\r\nCopy files to desired location\r\n\r\n    sudo rsync -avP ~/wordpress/ /var/www/html/\r\n    cd /var/www/html\r\n    sudo chown -R stm104:www-data *\r\n\r\nMake uploads directory and set permissions\r\n\r\n    mkdir /var/www/html/wp-content/uploads\r\n    sudo chown -R :www-data /var/www/html/wp-content/uploads\r\n\r\nContinue configuration through browser. Make sure apache config includes `AllowOverride All`. Enable the rewrite module with `sudo a2enmod rewrite`, then restart apache. Create .htaccess file and set permissions\r\n\r\n    touch /var/www/html/.htaccess\r\n    sudo chown :www-data /var/www/html/.htaccess\r\n    chmod 664 /var/www/html/.htaccess\r\n\r\n\r\n\r\n## Nginx\r\n\r\n### Wordpress\r\n\r\n### Rails\r\n\r\nDeploying to virtual host's root:\r\n\r\n    http {\r\n      server {\r\n        listen 80;\r\n        server_name www.mycook.com;\r\n        root /webapps/mycook/public;\r\n        passenger_enabled on;\r\n      }\r\n    }\r\n\r\nDeploying to a sub URI\r\n\r\n    http {\r\n      server {\r\n        listen 80;\r\n        server_name www.phusion.nl;\r\n        root /websites/phusion;\r\n\r\n        location ~ ^/subapp(/.*|$) {\r\n          alias /websites/rack/public$1;\r\n          passenger_base_uri /subapp;\r\n          passenger_app_root /websites/rack;\r\n          passenger_document_root /websites/rack/public;\r\n          passenger_enabled on;\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n\r\n\r\n## Apache\r\n\r\n### Wordpress\r\n\r\nDeploy to virtual host's root:\r\n\r\n    <VirtualHost *:80>\r\n      DocumentRoot /var/www/html\r\n      <Directory /var/www/html/>\r\n        AllowOverride All\r\n      </Directory>\r\n    </VirtualHost>\r\n\r\nDeploy to sub URI\r\n\r\n    <VirtualHost *:80>\r\n      DocumentRoot /var/www/html\r\n      <Directory /var/www/html/>\r\n        AllowOverride All\r\n      </Directory>\r\n\r\n      Alias /gamma /home/stm104/Documents/gamma\r\n      <Directory /home/stm104/Documents/gamma>\r\n        AllowOverride All\r\n        Require all granted\r\n      </Directory>\r\n    </VirtualHost>\r\n\r\n### Rails\r\n\r\nDeploying to virtual host's root:\r\n\r\n    <VirtualHost *:80>\r\n      ServerName www.rackapp.com\r\n      DocumentRoot /webapps/rackapp/public\r\n      <Directory /webapps/rackapp/public>\r\n        Allow from all\r\n        Options -MultiViews\r\n        Require all granted #Apache 2.4\r\n      </Directory>\r\n    </VirtualHost>\r\n\r\nDeploying to a sub URI:\r\n\r\n    <VirtualHost *:80>\r\n      ServerName www.rackapp.com\r\n      DocumentRoot /webapps/rackapp/public\r\n      <Directory /webapps/rackapp/public>\r\n        Allow from all\r\n        Options -MultiViews\r\n        Require all granted #Apache 2.4\r\n      </Directory>\r\n\r\n      Alias /subapp /websites/rack/public\r\n      <Location /subapp>\r\n        PassengerBaseURI /subapp\r\n        PassengerAppRoot /websites/rack\r\n      </Location>\r\n      <Directory /websites/rack/public>\r\n        Allow from all\r\n        Options -MultiViews\r\n        Require all granted\r\n      </Directory>\r\n    </VirtualHost>\r\n	1	2015-03-31 21:14:41.444828	2015-03-31 21:14:41.444828
52	Safari Books	safari-books	Unity\r\n\r\n* [Unity for Absolute Beginners](http://ezproxy.madisoncollege.edu:2097/book/programming/game-programming/9781430267782)\r\n* [Pro Unity Game Development with C#](http://ezproxy.madisoncollege.edu:2097/book/programming/game-programming/9781430267461)\r\n* [Creating E-Learning Games with Unity](http://ezproxy.madisoncollege.edu:2097/book/programming/game-programming/9781849693424)\r\n* [Unity 4 Game Development HOTSHOT](http://ezproxy.madisoncollege.edu:2097/book/programming/game-programming/9781849695589)\r\n* [Intro to Game Design...Unity and C#](http://ezproxy.madisoncollege.edu:2097/book/programming/game-programming/9780133439571)\r\n* [Learn C++ for Game Development](http://ezproxy.madisoncollege.edu:2097/book/programming/game-programming/9781430264583)\r\n\r\nJavaScript and HTML\r\n\r\n* [HTML5 Game Development with ImpactJS](http://ezproxy.madisoncollege.edu:2097/book/programming/javascript/9781849694568)\r\n* [Beginning HTML5 Games with CreateJS](http://ezproxy.madisoncollege.edu:2097/book/programming/game-programming/9781430263401)\r\n	6	2015-03-31 21:14:41.495162	2015-03-31 21:14:41.495162
53	PowerShell	powershell	# Powershell\r\n\r\nRename all items in a directory:\r\n\r\n    Dir | Rename-Item -NewName ( $_.name -replace " ", "_" )\r\n\r\n## Getting Started\r\n\r\nTo switch powershell versions\r\n\r\n    powershell -version 2.0\r\n    $PSVersionTable\r\n\r\nTo download PowerShell 4.0, go to the [Microsoft Download Center](http://www.microsoft.com/en-us/download/details.aspx?id=40855)\r\n\r\nTo switch to the Admin User:\r\n\r\n    Start-Process Powershell -verb runas\r\n\r\nUpdate PowerShell help (as admin)\r\n\r\n    Update-Help\r\n\r\nEnable Powershell scripts\r\n\r\n    Set-ExecutionPolicy RemoteSigned\r\n\r\nOn computers that you want remote commands run on, you need to enable it:\r\n\r\n    Enable-PSRemoting\r\n\r\nIn the PowerShell preferences, you can turn on *QuickEdit Mode* and *Insert Mode* to allow copy and paste.\r\n\r\nTo get a list of running processes:\r\n\r\n    Get-Process\r\n\r\nTo display help files:\r\n\r\n    Get-Help\r\n    Get-Help <cmd>\r\n    <cmd> -?\r\n    Get-Help <cmd> -examples\r\n    Get-Help <cmd> -detailed\r\n    Get-Help <cmd> -full\r\n    Get-Help <cmd> -ShowWindow\r\n    Get-Help <cmd> -online\r\n\r\n\r\nTo get informataion about .NET objects:\r\n\r\n    Get-Member\r\n    $m = "Hello there!"\r\n    $m | Get-Member\r\n    $m | Get-Member -membertype methods\r\n\r\nEverything in PowerShell is a .NET object:\r\n\r\n    $m.Length\r\n    $m.ToUpper()\r\n\r\nTo use a custom class, developed in C#/.NET, load the DLL into the PowerShell\r\n\r\n    [Reflection.Assembly]::LoadFile("C:\\MLClass.dll")\r\n\r\nThen you can create objects based on this custom class\r\n\r\n    $ml = new-object MLClass.Messages\r\n    $ml.SendMgs()\r\n    $ml | Get-Member\r\n\r\n`Get-ChildItem` will give you information about a location. This is aliased as `ls`, `dir`, and `gci`.\r\n\r\n    # Recursivly\r\n    Get-ChildItem -recurse\r\n\r\n    # Get a certain type of items\r\n    gci C:\\*.* -include *.txt\r\n\r\n    Get-ChildItem | Sort-Object\r\n\r\nUsing the pipe\r\n\r\n    # Match display name of services\r\n    Get-Service | Where-Object {$_.DisplayName - Match "MS"}\r\n\r\nYou can access options for a process with just `-` and the **Tab** key.\r\n\r\n    Get-Process -[tab]\r\n\r\nYou can also use this with wildcards:\r\n\r\n    *-Service\r\n\r\n## Profiles\r\n\r\nYou can create profiles to save customizations. There are different types, depending on the user and shell environment you want to target:\r\n\r\n* AllUsersAllHosts - %windir%\\System32\\WindowsPowerShell\\v1.0\\profile.ps1\r\n* AllUsersCurrentHost - %windir%\\System32\\WindowsPowerShell\\v1.0\\Microsoft.PowerShell_profile.ps1\r\n* CurrentUserAllHosts - %UserProfile%\\My Documents\\WindowsPowerShell\\profile.ps1\r\n* CurrentUserCurrentHost - %UserProfile%\\My Documents\\WindowsPowerShell\\Microsoft.PowerShell_profile.ps1\r\n\r\n`$profile` will display the profile location. You can use the `Test-Path` command to check if there is a profile\r\n\r\n    Test-Path $profile\r\n\r\nTo create a new profile\r\n\r\n    New-Item -path $profile -type file -force\r\n\r\n## Formatting\r\n\r\nTo get just one screen at a time, use `| more`\r\n\r\n    Get-Command | more\r\n\r\nThen use **space** to go to the next page, **return** to go to t he next line. **Ctrl+C** to exit.\r\n\r\nTo display output in different formats, there are several format commands.\r\n\r\n* Format-Wide\r\n* Format-List\r\n* Format-Table\r\n* Format-Custom\r\n\r\nTo use these, and them with a pipe:\r\n\r\n    Get-Process | Format-Wide -column 4\r\n    Get-Process -Name powershell | Format-List -Property ProcessName,FileVersion,StartTime,Id\r\n    Get-Process -Name powershell | Format-List -Property *\r\n    Get-Process -Name powershell | Format-Table -Property Path,Name,Id,Company -Autosize\r\n    Get-Process -Name powershell | Format-Table -Wrap -AutoSize -Property Name,Id,Path -GroupBy Company\r\n\r\n## Scripting\r\n\r\nExtension is `ps1`. If using Windows Server 2012, add the feature as one of the Roles and Features menu items. To execute a script, you have to make sure you include the directory.\r\n\r\n    .\\Untitled1.ps1\r\n\r\nAn example script:\r\n\r\n    Get-ChildItem\r\n    Start-Sleep 2\r\n    cls\r\n    Start-Sleep 1\r\n    Get-Process\r\n    $PSVersionTable\r\n\r\nIf you want to run a shortcut, you need to add some things to the target field:\r\n\r\n    %SystemRoot%\\system32\\WindowsPowerShell\\v1.0\\powershell.exe -ExecutionPolicy Bypass -File "C:\\FirstScript.ps1"\r\n	1	2015-03-31 21:14:41.542926	2015-03-31 21:14:41.542926
54	Deploy with Mina	deploy-with-mina	Script used for ginblades, with staging and production environments\r\n\r\n    require 'mina/bundler'\r\n    require 'mina/rails'\r\n    require 'mina/git'\r\n    require 'mina/rbenv'\r\n\r\n    set :domain, 'aws'\r\n    set :repository, '/home/ubuntu/git/ginblades.git'\r\n\r\n    case ENV['to']\r\n    when 'production'\r\n      set :deploy_to, '/home/ubuntu/sites/production/ginblades'\r\n      set :branch, 'master'\r\n      set :rails_env, 'production'  \r\n    else\r\n      set :deploy_to, '/home/ubuntu/sites/staging/ginblades'\r\n      set :branch, 'master'\r\n      set :rails_env, 'staging'  \r\n    end\r\n    set :shared_paths, ['config/database.yml', 'config/secrets.yml', 'log']\r\n\r\n    set :bundle_path, '~/bundle/2.1.5'\r\n    task :environment do\r\n      invoke :'rbenv:load'\r\n    end\r\n\r\n    task :setup => :environment do\r\n      queue! %[mkdir -p "#{deploy_to}/#{shared_path}/log"]\r\n      queue! %[chmod g+rx,u+rwx "#{deploy_to}/#{shared_path}/log"]\r\n\r\n      queue! %[mkdir -p "#{deploy_to}/#{shared_path}/config"]\r\n      queue! %[chmod g+rx,u+rwx "#{deploy_to}/#{shared_path}/config"]\r\n\r\n      queue! %[touch "#{deploy_to}/#{shared_path}/config/database.yml"]\r\n      queue  %[echo "-----> Be sure to edit '#{deploy_to}/#{shared_path}/config/database.yml'."]\r\n\r\n      queue! %[touch "#{deploy_to}/#{shared_path}/config/secrets.yml"]\r\n      queue  %[echo "-----> Be sure to edit '#{deploy_to}/#{shared_path}/config/secrets.yml'."]\r\n    end\r\n\r\n    desc "Deploys the current version to the server."\r\n    task :deploy => :environment do\r\n      deploy do\r\n        # Put things that will set up an empty directory into a fully set-up\r\n        # instance of your project.\r\n        invoke :'git:clone'\r\n        invoke :'deploy:link_shared_paths'\r\n        invoke :'bundle:install'\r\n        invoke :'rails:db_migrate'\r\n        invoke :'rails:assets_precompile'\r\n        invoke :'deploy:cleanup'\r\n\r\n        to :launch do\r\n          queue "mkdir -p #{deploy_to}/#{current_path}/tmp/"\r\n          queue "touch #{deploy_to}/#{current_path}/tmp/restart.txt"\r\n        end\r\n      end\r\n    end\r\n\r\n	3	2015-03-31 21:14:41.594389	2015-03-31 21:14:41.594389
55	Metaprogramming in Ruby 2	metaprogramming-in-ruby-2	## Chapter 2 - The Object Model\r\n\r\n### Open Classes\r\n\r\nClasses can be re-opend and have new methods added.\r\n\r\n### Inside the Object Model\r\n\r\nInstance variables will not be available until they are required.\r\n\r\nObjects of the same class share the same methods, so they're stored on the class instead of the object.\r\n\r\nYou can refer to a constant by it's path\r\n\r\n    module M\r\n      class C\r\n        X = 'a constant'\r\n      end\r\n      C::X # 'a constant'\r\n    end\r\n\r\n    M::C::X # 'a constant'\r\n\r\nYou can access root-level constants by prefixing it with `::`\r\n\r\n    Y = 'a root-level constant'\r\n\r\n    module M\r\n      ::Y\r\n    end\r\n\r\n### Quiz: Missing Lines\r\n\r\nThe superclass of `Module` is `Object`. `Object`'s class is `Class`.\r\n\r\n### What Happens When You Call a Method?\r\n\r\nWhen you call a method, ruby finds a method using *method lookup*, then executes it.\r\n\r\nTo find a method, Ruby will look through the ancestor chain of the receiver. This ancestor chain may also include modules, which would be right above the class they're applied to. In Ruby 2.0, you can also use `prepend`, instead of `include`, to apply the module below the class.\r\n\r\nThe Kernal module is included in all objects, which is where the `print` method comes from.\r\n\r\n*NOTE:* Check out the **awesome_print** gem for better formating in the console.\r\n\r\nTo execute the method, Ruby needs to know who the receiver is. The current object is called `self`. When you call a method, the receiver becomes `self`. Then any methods or instance variables without explicit receivers are called on `self`.\r\n\r\nWith Ruby 2.0, you can use the `refine` method.\r\n\r\n    module StringExtensions\r\n      refine String do\r\n        def to_alphanumeric\r\n          gsub(/[^\\w\\s]/, '')\r\n        end\r\n      end\r\n    end\r\n\r\nThis method will not be available until you explicitly declare a `using` statement\r\n\r\n    using StringExtensions\r\n\r\nYou can declare this within a module, where it would only be available in that module.\r\n\r\n### Quiz: Tangle of Modules\r\n\r\nIf you have a clash of method names, even if within a separate module, the ancestor stack order is still observed.\r\n\r\nmodule Printable\r\n  \r\n  def print\r\n\r\n  def prepare_cover\r\n\r\nend\r\n\r\nmodule Document\r\n\r\n  def print_to_screen\r\n    prepare_cover\r\n    format_for_screen\r\n    print\r\n  end\r\n\r\n  def format_for_screen\r\n\r\n  def print\r\n\r\nend\r\n\r\nclass Book\r\n  include Document\r\n  include Printable\r\nend\r\n\r\nIn the module `Document`, a method called `print` is used. Because `Document` is included before `Printable`, it's higher up in the ancestor chain. So `print` will get it's definition from `Printable`. To fix this, you could reverse the order of includes in the class.\r\n\r\n## Chapter 3 - Methods\r\n\r\n### A Duplication Problem\r\n\r\n\r\n\r\n### Dynamic Methods\r\n\r\n\r\n\r\n### method_missing\r\n\r\n\r\n\r\n### Quiz: Bug Hunt\r\n\r\n\r\n\r\n### Blank Slates\r\n\r\n\r\n\r\n	2	2015-03-31 21:14:41.645588	2015-03-31 21:14:41.645588
56	Lynda - D3 Data Visualization	lynda-d3-data-visualization	## 2 Learning the Basics\r\n\r\nSimple CSS selectors\r\n\r\n    // single select\r\n    d3.select('.chart').text('select');\r\n    d3.select('.item:nth-child(2)').text('select');\r\n    // multiple select\r\n    d3.selectAll('.chart').text('select');\r\n\r\nChaining\r\n\r\n    d3.selectAll('.item:nth-child(3n)')\r\n      .html('<strong>selection</strong>');\r\n\r\nAppending elements:\r\n\r\n    // Appends a div to item, then inserts html into div.\r\n    d3.select('.item')\r\n      .append('span')\r\n      .html('<strong>selection</strong>');\r\n\r\nYou can insert at a particular point.\r\n\r\n    // Appends a div to item, then inserts html into div.\r\n    d3.select('.item')\r\n      .insert('span', ':nth-child(3)') // must specify where to insert\r\n      .html('<strong>selection</strong>');\r\n\r\nLike insert, you can `.remove()` a targetted item.\r\n\r\nYou can add attributes to selection\r\n\r\n    d3.selectAll('.item')\r\n      .attr('class', 'highlight');\r\n\r\nThis will replace the class. There's a special method for class to add a class instead.\r\n\r\n    d3.selectAll('.item')\r\n      .classed('highlight', true)\r\n\r\n`true` specifies whether the class is turned on or off. You can also pass in an object.\r\n\r\n    .classed({\r\n      'highlight': true,\r\n      'item': false,\r\n      'bigger': true\r\n    })\r\n\r\nFor some casses you could just add styles directly.\r\n\r\n    d3.selectAll('.item:nth-child(3)')\r\n      .style({\r\n        'background': '#268BD2',\r\n        'padding': '10px'\r\n      });\r\n\r\n### Adding data\r\n\r\nUsing the `.data()` method will apply the changes to selected items.\r\n\r\n    d3.selectAll('.item')\r\n      .data([true])\r\n      .style('background', '#268BD2')\r\n\r\nIn this simple case, `[true]` simply selects the first element. If you did `[true, true]`, it selects first 2 elements.\r\n\r\nYou can pass information from the `.data()` method to callbacks in the methods that follow it.\r\n\r\n    var myStyles = [\r\n      'red',\r\n      'green',\r\n      'blue'\r\n    ]\r\n    d3.selectAll('.item')\r\n      .data(myStyles)\r\n      .style('background', function(d) {\r\n        return d;\r\n      });\r\n\r\nYou can also pass along more complex arrays.\r\n\r\n    var myStyles = [\r\n      { width: 200, color: 'red' }\r\n      { width: 220, color: 'blue' }\r\n      { width: 120, color: 'green' }\r\n    ]\r\n\r\n    d3.selectAll('.item')\r\n      .data(myStyles)\r\n      .style({\r\n        'color' : 'white',\r\n        'background' : function(d) {\r\n          return d.color;\r\n        },\r\n        'width' : function(d) {\r\n          return d.width + 'px';\r\n        }\r\n      });\r\n\r\nInserting data programmatically.\r\n\r\n    var myData = [\r\n      { width: 200,\r\n        name: 'Joe Johnson',\r\n        color: '#A57706' },\r\n      { width: 100,\r\n        name: 'Sandy Summers',\r\n        color: '#595AB7' },\r\n      { width: 200,\r\n        name: 'Dick Draper',\r\n        color: '#A57706' }\r\n    ]\r\n\r\n    d3.selectAll('#chart').selectAll('div')\r\n      .data(myData)\r\n      .enter().append('div')\r\n      .classed('item', true)\r\n      .text(function(d) {\r\n        return d.name;\r\n      })\r\n      .style({\r\n        'color' : 'white',\r\n        'background' : function(d) {\r\n          return d.color;\r\n        },\r\n        'width' : function(d) {\r\n          return d.width + 'px';\r\n        }\r\n      });\r\n\r\nHere, the `enter()` method has created a subselection. You apply the `selectAll('div')` method **before** this `.enter()` method, even though the divs haven't been created yet. If we were going to continue chaining, we would then want to use the `.exit()` method.\r\n\r\n## 3 - Working with SVG Graphics\r\n\r\nSVG is XML based, but it can be styled through CSS.\r\n\r\nTo create some simple graphics in SVG:\r\n\r\n    <svg width="600" height="400"\r\n      style="background: red;">\r\n      <rect x="250" y="150" width="100" height="100" style="fill: blue;" />\r\n      <circle cx="200" cy="200" r="50" style="fill: green;" />\r\n      <text x="10" y="390" font-family="sans-serif" font-size="25" fill="white">\r\n        SVG Graphics\r\n      <g id="triangle">\r\n        <polyline points="10 35, 30 10, 50 35" style="fill: black;" />\r\n        <polyline points="10 25, 15 10, 50 35" style="fill: black;" />\r\n      </g>\r\n      </text>\r\n\r\n      <!-- Create a reference to another item -->\r\n      <use xlink:href="#triangle" x="30" y="0" />\r\n    </svg>\r\n\r\nWith D3, you can create this graphics in JavaScript\r\n\r\n    d3.select('#chart')\r\n      .append('svg')\r\n        .attr('width', 600)\r\n        .attr('height', 400)\r\n        .style('background', 'red')\r\n      .append('rect')\r\n        .attr('x', 200)\r\n        .attr('y', 100)\r\n        .attr('height', 200)\r\n        .attr('width',  200)\r\n        .style('fill', 'blue')\r\n    d3.select('svg')\r\n      .append('circle')\r\n        .attr('cx', '300')\r\n        .attr('cy', '200')\r\n        .attr('r', '50')\r\n        .style('fill', 'white')\r\n\r\nTo create a simple bar chart.\r\n\r\n    var bardata = [20, 30, 45, 15];\r\n\r\n    var height = 400,\r\n        width = 600,\r\n        barWidth = 50,\r\n        barOffset = 5;\r\n\r\n    d3.select('#chart').append('svg')\r\n      .attr('width', width)\r\n      .attr('height', height)\r\n      .style('background', 'red')\r\n      .selectAll('rect').data(bardata)\r\n      .enter().append('rect')\r\n        .style('fill', 'green')\r\n        .attr('width', barwdith)\r\n        .attr('height', function(d) {\r\n          return d;\r\n        })\r\n        .attr('x', function(d, i) {\r\n          // i gives you an index to work with\r\n          return i * (barWidth + barOffset);\r\n        })\r\n        .attr('y', function(d) {\r\n          // position to the bottom of the svg canvas\r\n          return height - d;\r\n        })\r\n\r\n## Chapter 4 - Using D3 MEthods\r\n\r\nSo far:\r\n\r\n    bardata = [20, 30, 105, 15, 85]\r\n\r\n    height = 400\r\n    width = 600\r\n    barWidth = 50\r\n    barOffset = 5\r\n\r\n    d3.select '#chart'\r\n      .append 'svg'\r\n      .attr 'width', width\r\n      .attr 'height', height\r\n      .style 'background', '#C9D7D6'\r\n      .selectAll 'rect'\r\n      .data bardata\r\n      .enter()\r\n      .append 'rect'\r\n        .style 'fill', '#C61C6F'\r\n        .attr 'width', barWidth\r\n        .attr 'height', (d) ->\r\n          d\r\n        .attr 'x', (d, i) ->\r\n          i * (barWidth + barOffset)\r\n        .attr 'y', (d) ->\r\n          height - d\r\n\r\nTo set the data to fit a range within the chart, you can set a scale.\r\n\r\n    yScale = d3.scale.linear()\r\n      .domain [0, d3.max(bardata)]\r\n      .range [0, height]\r\n\r\nThen apply it to your query\r\n\r\n    # ...\r\n    .attr 'height', (d) ->\r\n      yScale d\r\n    # ...\r\n    .attr 'y', (d) ->\r\n      height - yScale(d)\r\n\r\nTo space out the x scale, you will need to use ordinal scaling\r\n\r\n    xScale = d3.scale.ordinal()\r\n      .domain d3.range(0, bardata.length)\r\n      .rangeBands [0, width]\r\n\r\nThe apply to your query\r\n\r\n    # ...\r\n    .attr 'width', xScale.rangeBand()\r\n    # ...\r\n    .attr 'x', (d, i) ->\r\n      return xScale(i)\r\n\r\nYou can also change color based on values\r\n\r\n    colors = d3.scale.linear()\r\n      .domain [0, d3.max(bardata)]\r\n      .range ['#FFB832', '#C61C6F']\r\n\r\nApply this to your query\r\n\r\n    #...\r\n    .style 'fill', colors\r\n\r\nIf you want to change color by x-position, change the colors definition\r\n\r\n    colors = d3.scale.linear()\r\n      .domain [0, bardata.length]\r\n      .range ['#FFB832', '#C61C6F']\r\n\r\nThen use a function with the query\r\n\r\n    #...\r\n    .style 'fill', (d, i) ->\r\n      colors i\r\n\r\nIf you add more colors, you'll need to add more elements to your domain as well.\r\n\r\n    .domain [0, bardata.length*.33, bardata.length*.66, bardata.length]\r\n    .range ['#B58929', '#C61C6F', '#268BD2', '#85992C']\r\n\r\nTo play around with more sample data, you can create a function to populate *bardata*\r\n\r\n    for i in [0...100] by 1\r\n      bardata.push Math.random()*30\r\n\r\n### Adding Events\r\n\r\nYou can use events like with jQuery\r\n\r\n    `var tempColor`\r\n\r\n    .on 'mouseover', (d) ->\r\n      tempColor = this.style.fill\r\n      d3.select this\r\n        .style 'opacity', .5\r\n        .style 'fill', 'yellow'\r\n    .on 'mouseout', (d) ->\r\n      d3.select this\r\n        .style 'opacity', 1\r\n        .style 'fill', tempColor\r\n\r\n### Adding Animations\r\n\r\nAdd animation to your event, just add `.transition()`\r\n\r\n    # .on ...\r\n      d3.select this\r\n        .transition()\r\n        .delay 500\r\n        .duration 800\r\n        .style 'opacity', .5\r\n        #...\r\n\r\nYou can create a transition on the whole graph\r\n\r\n    myChart = d3.select '#chart'\r\n    # ...\r\n      .attr 'height', 0\r\n      .attr 'y', height\r\n\r\n    myChart.transition()\r\n      .attr 'height', (d) ->\r\n        yScale d\r\n      .attr 'y', (d) ->\r\n        height - yScale(d)\r\n      .delay (d, i) ->\r\n        i * 20\r\n\r\nYou can change the easing\r\n\r\n    .delay()\r\n    .ease 'elastic'\r\n\r\n### Adding a tooltip\r\n\r\nTo make a tooltip, before the chart:\r\n\r\n    tooltip = d3.select 'body'\r\n      .append 'div'\r\n      .style 'position', 'absolute'\r\n      .style 'padding', '0 10px'\r\n      .style 'background', 'white'\r\n      .style 'opacity', 0\r\n\r\nThen add to the event\r\n\r\n    .on 'mouseover', (d) ->\r\n      tooltip.transition()\r\n        .style 'opacity', .9\r\n      tooltip.html d\r\n        .style 'left', (d3.event.pageX) + 'px'\r\n        .style 'top', (d3.event.pageY) + 'px'\r\n\r\n## 5 - Using Data\r\n\r\nSorting:\r\n\r\n    bardata.sort compareNumbers = (a,b) ->\r\n      a - b\r\n\r\nThis sorts by ascending order. To group all the information in your chart, append a group.\r\n\r\n    #...\r\n    .append 'svg'\r\n    .append 'g'\r\n\r\nThen create the vertical axis axis\r\n\r\n    vGuideScale = d3.scale.linear\r\n      .domain [0, d3.max(bardata)]\r\n      .range [height, 0]\r\n\r\n    vAxis = d3.svg.axis()\r\n      .scale vGuideScale\r\n      .orient 'left'\r\n      .tick 10\r\n\r\n    vGuide = d3.select 'svg'\r\n      .append 'g'\r\n\r\n    vAxis vGuide\r\n\r\n    vGuide.attr 'transform', 'translate(35,0)'\r\n    vGuide.selectAll 'path'\r\n      .style\r\n        fill: 'none'\r\n        stroke: '#000'\r\n    vGuide.selectAll 'line'\r\n      .style\r\n        stroke: '#000'\r\n\r\nThen create a horizontal axis\r\n\r\n    hAxis = d3.svg.axis()\r\n      .scale xScale\r\n      orient 'bottom'\r\n      .tickValues xScale.domain().filter (d, i) ->\r\n        !(i % (bardata.length/5)\r\n\r\nThe function in `tickvalues` allows you to get a tick every 5 items.\r\n\r\n    hGuide = d3.select 'svg'\r\n      .append 'g'\r\n\r\n    hAxis hGuide\r\n\r\n    hGuide.attr 'transform', 'translate(0, ' + (height-30) + ')'\r\n    hGuide.selectAll 'path'\r\n      .style\r\n        fill: 'none'\r\n        stroke: '#000'\r\n    hGuide.selectAll 'line'\r\n      .style\r\n        stroke: '#00'\r\n\r\n\r\nYou'll want to adjust the margins, so that the guides fit in the graphic.\r\n\r\n    margin =\r\n      top: 30\r\n      right: 30\r\n      bottom: 40\r\n      left: 50\r\n\r\n    height = 400 - margin.top - margin.bottom\r\n    width = 600 - margin.left - margin-right\r\n\r\n    # ...\r\n\r\n    myChart = d3.select '#chart'\r\n      .append 'svg'\r\n      .style 'background', '#E7E0CB'\r\n      .attr 'width', width + margin.left + margin.right\r\n      .attr 'height', height + margin.top + margin.bottom\r\n      .append 'g'\r\n      .attr 'transform', "translate(#{margin.left}, #{margin.top})"\r\n\r\n    vGuide.attr 'transform', "translate(#{margin.left}, #{margin.top})"\r\n\r\n\r\n    hGuide.attr 'transform', "translate(#{margin.left},  #{(height + margin.top)})"\r\n\r\nYou might also want to put margins between each item in the graph, add a third value to the `rangeBands`\r\n\r\n    xScale = #...\r\n      .rangeBands [0,  width], 0.2\r\n\r\n### Working with external sources\r\n\r\nTsv files (tab separated values) can be imported:\r\n\r\n    bardata = []\r\n    d3.tsv 'data.tsv', (data) ->\r\n      for key in data\r\n        bardata.push data[key].value\r\n\r\n      # all of script\r\n\r\n## Chapter 6 - Working with Layout\r\n\r\n### Create a pie chart\r\n\r\n    width = 400\r\n    height = 400\r\n    radius = 200\r\n    colors = d3.scale.category20c()\r\n\r\n    piedata = [\r\n      {label: 'Barot', value: 50}\r\n      {label: 'Gerard', value: 50}\r\n      {label: 'Jennifer', value: 50}\r\n      {label: 'Jonathan', value: 50}\r\n      {label: 'Lorenzo', value: 50}\r\n      {label: 'Hillary', value: 50}\r\n    ]\r\n\r\n    pie = d3.layout.pie()\r\n      .value (d) ->\r\n        d.value\r\n    arc = d3.svg.arc()\r\n      .outerRadius radius\r\n\r\n    myChart = d3.select '#chart'\r\n      .append 'svg'\r\n      .attr 'width', width\r\n      .attr 'height', height\r\n      .append 'g'\r\n        .attr 'transform', "translate(#{width - radius}, #{height - radius})"\r\n        .selectAll 'path'\r\n        .data pie(piedata)\r\n        .enter()\r\n        .append 'path'\r\n          .attr 'fill', (d, i) ->\r\n            colors i\r\n          .attr 'd',  arc\r\n\r\nThere are other color groups you can use, provided by d3. To put text in your chart:\r\n\r\n    myChart = d3.select '#chart'\r\n      .append 'svg'\r\n      .attr 'width', width\r\n      .attr 'height', height\r\n      .append 'g'\r\n        .attr 'transform', "translate(#{width - radius}, #{height - radius})"\r\n        .selectAll 'path'\r\n        .data pie(piedata)\r\n        .enter()\r\n        .append 'g'\r\n        .attr 'class', 'slice'\r\n\r\n    slices = d3.selectAll 'g.slice'\r\n      .append 'path'\r\n        .attr 'fill', (d, i) ->\r\n          colors i\r\n          .attr 'd',  arc\r\n\r\n    text = d3.selectAll 'g.slice'\r\n      .append 'text'\r\n      .text (d, i) ->\r\n        d.data.label\r\n      .attr 'text-anchor', 'middle'\r\n      .attr 'fill', 'white'\r\n      .attr 'transform', (d) ->\r\n        d.innerRadius = 0\r\n        d.outRadius = radius\r\n        return "translate(#{arc.centroid(d)})"\r\n\r\n### Force layout\r\n\r\nA quick way to work with custom colors is to create a palette. Here's some setup for your data:\r\n\r\n    palette = {\r\n      'lightgray': '#819090',\r\n      'darkblue': '#0A2933'\r\n    }\r\n\r\n    w = 900\r\n    h = 400\r\n    circleWidth = 5\r\n\r\n    nodes = [\r\n      { name: "Parent" }\r\n      { name: 'Child1'}\r\n      { name: 'Child2', target[0]}\r\n      { name: 'Child3', target[0]}\r\n      { name: 'Child4', target[1]}\r\n      { name: 'Child5', target[0, 1, 2, 3]}\r\n    ]\r\n\r\n    links = []\r\n\r\n    for i in [0..nodes.length] by 1\r\n      if nodes[i].target != undefined\r\n        for x in [0..nodes[i].target.length] by 1\r\n          links.push\r\n            source: nodes[i]\r\n            target: nodes[nodes[i].target[x]]\r\n\r\nTo draw the graph:\r\n\r\n    myChart = d3.select '#chart'\r\n      .append 'svg'\r\n      .attr 'width', w\r\n      .attr 'height', h\r\n\r\n    force = d3.layout.force()\r\n      .nodes nodes\r\n      .links []\r\n      .gravity 0.1\r\n      .charge -1000\r\n      .size [w, h]\r\n\r\n    link = myChart.selectAll 'line'\r\n      .data links\r\n      .enter()\r\n      .append 'line'\r\n      .attr 'stroke', palette.lightgray\r\n\r\n    node = myChart.selectAll 'circle'\r\n      .data nodes\r\n      .enter()\r\n      .append 'g'\r\n      .call force.drag # allows animation\r\n\r\n    node.append 'circle'\r\n      .attr 'cx', (d) ->\r\n        d.x\r\n      .attr 'cy', (d) ->\r\n        d.y\r\n      .attr 'r', circleWidth\r\n      .attr 'fill', palette.pink\r\n\r\n    node.append 'text'\r\n      .text (d) ->\r\n      .attr 'font-family', 'Roboto Slab'\r\n      .attr 'fill', (d, i) ->\r\n        if i > 0\r\n          palette.mediumgray\r\n        else\r\n          palette.yellowgreen\r\n      .attr 'text-anchor', 'end'\r\n      .attr 'font-size', (d, i) ->\r\n        if i > 0\r\n          '1em'\r\n        else\r\n          '1.8em'\r\n\r\n    force.on 'tick', (e) ->\r\n      node.attr 'transform', (d, i) ->\r\n        "translate(#{d.x}, #{d.y})"\r\n\r\n      link.attr 'x1', (d) ->\r\n        d.source.x\r\n      link.attr 'y1', (d) ->\r\n        d.source.y\r\n      link.attr 'x1', (d) ->\r\n        d.target.x\r\n      link.attr 'y1', (d) ->\r\n        d.target.y\r\n\r\n    force.start()\r\n	4	2015-03-31 21:14:41.693551	2015-03-31 21:14:41.693551
57	Real Time Web Apps with AngularJS and Firebase	real-time-web-apps-with-angularjs-and-firebase	### 1.2 - Your Own Firebase\r\nYou can connect to Firebase with curl.\r\n\r\n    curl -X POST -d '{"user": "Dan", "text": "Hey there"}' https://brilliant-fire-2753.firebaseio.com/messages.json\r\n    curl -X DELETE -d https://brilliant-fire-2753.firebaseio.com/messages/[node].json\r\n\r\n### 1.3 - Scaffolding With Yeoman\r\n\r\nSet up application with Yeoman and Angular\r\n\r\n    npm install -g generator-angular\r\n    yo angular\r\n\r\nRoutes are in `app.js`. To install firebase, you have to add the script to the CDN.\r\n\r\n*NOTE:* The bower dependency library seems to fail\r\n\r\n### 1.4 - Structuring Data\r\n\r\nTo start playing around with firebase:\r\n\r\n    angular.module('firebaseApp')\r\n      .controller 'MainCtrl', ($scope) ->\r\n        rootRef = new Firebase 'https://brilliant-fire-2753.firebaseio.com/'\r\n\r\nYou can then access your firebase. You could also go to a specific collection:\r\n\r\n    rootRef = new Firebase 'https://brilliant-fire-2753.firebaseio.com/messages'\r\n\r\nOr create a second reference.\r\n\r\n    rootRef = new Firebase 'https://brilliant-fire-2753.firebaseio.com/'\r\n    childRef = rootRef.child 'message'\r\n    parentRef = childRef.parent() # same as root reference\r\n\r\nThen you can manage your firebase\r\n\r\n    $scope.setMessage = ->\r\n      childRef.set\r\n        user: 'Bob'\r\n        text: 'Hi'\r\n\r\nThis will be submitted via a button in ther markup. The `set` method creates a new object or overwrites an old one. \r\n\r\n    button.btn.btn-success[type="button" ng-click="setMessage()"] Set Message\r\n\r\nYou can also update an object.\r\n\r\n    $scope.updateMessage = ->\r\n      childRef.update\r\n        text: 'Bye'\r\n\r\nIf you had used `set` in this case, the `user` property will be erased.\r\n\r\nDelete is done in a similar way\r\n\r\n    $scope.deleteMessage = ->\r\n      childRef.remove()\r\n\r\nWe'll need a couple buttons to handle Update and Delete\r\n\r\n    button.btn.btn-warning[type="button" ng-click="updateMessage()"] Update Message \r\n    button.btn.btn-danger[type="button" ng-click="deleteMessage()"] Delete Message\r\n\r\n## 2 Querying\r\n\r\n### 2.1 - On Value\r\n\r\nTo read from Firebase, you can use the `on` method.\r\n\r\n    childRef.on 'value', (snapshot) ->\r\n      console.log snapshot.val()\r\n      $scope.message = snapshot.val()\r\n\r\nThen we can create a text box to bind to\r\n\r\n    input.form-control[type="text" ng-model="message.text"]\r\n\r\nIn order to update Firebase, we need to watch for changes.\r\n\r\n    $scope.$watch 'message.text', (newVal) ->\r\n      console.log newVal\r\n\r\nThis wont load the value from Firebase into the text box initially. This is because Angular does not update based on external resources. In order to make sure Angular checks the Firebase values, we can use a `$timeout`. Inject the service into the controller and then move the contents of `on` into a `$timeout`.\r\n\r\n    .controller 'MainCtrl', ($scope, $timeout) ->\r\n      # ...\r\n      childRef.on 'value', (snapshot) ->\r\n        $timeout ->\r\n          snapshotVal = snapshot.val()\r\n          console.log snapshotVal\r\n          $scope.message = snapshotVal\r\n\r\nNow that we can see everything working, set the `$watch` function to update your firebase.\r\n\r\n    $scope.$watch 'message.text', (newVal) ->\r\n      if !newVal\r\n        return\r\n      childRef.update\r\n        text: newVal\r\n\r\n### 2.2 - Data Snapshots\r\n\r\nYou can get more information about the snapshot besides just the value.\r\n\r\n    snapshot.hasChildren() # true or false\r\n    snapshot.hasChild('text') # true or false\r\n    snapshot.name() # return name of node\r\n    snapshot.numChildren() # integer, number of children\r\n\r\nYou can interate over your snapshots\r\n\r\n    snapshot.forEach (item) ->\r\n      console.log "#{item.name()}-#{item.val()}"\r\n      console.log item.ref() # returns URL of the reference.\r\n\r\n### 2.3 - Managing Lists\r\n\r\nInstead of dealing with a single message, lets work with a list of messages.\r\n\r\n    messagesRef = rootRef.child 'messages'\r\n\r\n    messagesRef.on 'value' (snapshot) ->\r\n      $timeout ->\r\n        snapshotVal = snapshot.val()\r\n        $scope.messages = snapshotVal\r\n\r\nTo display these messages in the markup\r\n\r\n    div[ng-repeat="message in messages"]\r\n      | {{message.user}} - {{message.text}}\r\n\r\nTo input items to this list:\r\n\r\n    input.form-control[type="text" ng-model="currentUser"]\r\n    .input-group\r\n      input.form-control[type="text" ng-model="currentText"]\r\n      span.input-group-btn\r\n        button.btn.btn-default[type="button" ng-click="sendMessage()"] Send\r\n\r\nTo set up the input to work, we can go to the controller:\r\n\r\n    $scope.currentUser = null\r\n    $scope.currentText = null\r\n\r\n    $scope.sendMessage = ->\r\n      newMessage =\r\n        user: $scope.currentUser\r\n        text: $scope.currentText\r\n\r\n      messagesRef.push newMessage # creates a unique key and adds it to the list\r\n\r\nThese messages will update in real time, thanks to the `on` function. This will reload the whole list, which is not great for performance.\r\n\r\n### 2.4 - On Child Added\r\n\r\nInstead of `on` value, we can look for `child_added`\r\n\r\n    messageRef.on 'child_added', (snapshot) ->\r\n\r\nThis will just get the updated item, not the whole list. This listener, `child_added` will not return an array object, so we need to push each item onto an array\r\n\r\n    $scope.messages = []\r\n\r\n    # ...\r\n\r\n    messagesRef.on 'child_added', (snapshot) ->\r\n      # ...\r\n      $scope.messages.push snapshotVal\r\n\r\n### 2.5 - On Child Changed\r\n\r\n`child_added` only works for new objects, if something get's updated, you'll ned `child_changed`\r\n\r\n    messagesRef.on 'child_changed', (snapshot) ->\r\n      $timeout ->\r\n\r\nIn order to update an item, you need to get it's name. We can get this from the `child_added` listener if we change the `push` method.\r\n\r\n    $scope.messages.push\r\n      text: snapshotVal.text\r\n      user: snapshotVal.user\r\n      name: snapshot.name()\r\n\r\n    findMessageByName = (name) ->\r\n      messageFound = null\r\n      for i in [0...$scope.messages.length] by 1\r\n        currentMessage = $scope.messages[i]\r\n        if currentMessage.name == name\r\n          messageFound = currentMessage\r\n          break\r\n\r\n      messageFound\r\n\r\n    messagesRef.on 'child_changed', (snapshot) ->\r\n      $timeout ->\r\n        snapshotVal = snapshot.val()\r\n        message = findMessageByName snapshot.name()\r\n        message.text = snapshotVal.text\r\n\r\nThis works on changed items, but not deleted. Do monitor deletions:\r\n\r\n    deleteMessageByName = (name) ->\r\n      for i in [0...$scope.messages.length] by 1\r\n        currentMessage = $scope.messages[i]\r\n        if currentMessage.name == name\r\n          $scope.messages.splice i, 1\r\n          break\r\n\r\n    messagesRef.on 'child_removed', (snapshot) ->\r\n      $timeout ->\r\n        message = deleteMessageByName snapshot.name()\r\n\r\n### 2.6 - Off & Once\r\n\r\nYou can give the user a button to turn the feed off, that will pause updates\r\n\r\n    button.btn.btn-danger[type="button" ng-click="turnFeedOff()"] Turn feed off\r\n\r\nIn the controller:\r\n\r\n    $scope.turnFeedOff = ->\r\n      messagesRef.off()\r\n\r\nIf you only want to pull data one time.\r\n\r\n    titleRef = rootRef.child 'title'\r\n    $scope.title = null\r\n\r\n    titleRef.on 'value', (snapshot) ->\r\n      $scope.title = snapshot.val()\r\n      titleRef.off()\r\n\r\n    # or\r\n\r\n    titleref.once 'value', (snapshot) ->\r\n      $scope.title = snapshot.val()\r\n\r\n## 3 Restricting Queries\r\n\r\n### 3.1 - Cleaning Up\r\n\r\nIt would be better for the conventions to extract this data from firebase into a service.\r\n\r\n    # app.js - create a constant\r\n    angular.module('firebaseApp', [...])\r\n      .config ($routeProvider) ->\r\n        ...\r\n      .constant 'FBURL', 'https://...'\r\n\r\n    # services/MessageService.js\r\n\r\n    angular.module 'firebaseApp'\r\n      .service 'MessageService', (FBURL) ->\r\n        messageRef = new Firebase(FBURL).child 'messages'\r\n        return {\r\n          childAdded : childAdded = (cb) ->\r\n            messageRef.on 'child_added', (snapshot) ->\r\n              val = snapshot.val()\r\n              cb.call this, {\r\n                user: val.user\r\n                text: val.text\r\n                name: snapshot.name()\r\n              }\r\n          add : addMessage = (message) ->\r\n            messageRef.push message\r\n          off : turnMessagesOff = ->\r\n            messageRef.off()\r\n        }\r\n\r\n    # Inject into the controller\r\n    .controller 'MainCtrl', ($scope, $timeout, MessageService) ->\r\n      #...\r\n\r\n      MessageService.childAdded (addedChild) ->\r\n        $timeout ->\r\n          $scope.messages.push addedChild\r\n\r\n      $scope.sendMessage = ->\r\n        newMessage =\r\n          user: $scope.currentUser\r\n          text: $scope.currentText\r\n\r\n        MessageService.add newMessage\r\n\r\n      $scope.turnFeedOff = ->\r\n        messageService.off()\r\n\r\nThen you can get rid of the references in the controller.\r\n\r\n### 3.2 - Limiting\r\n\r\nIn the message service, set a limit on the message reference.\r\n\r\n    angular.module 'firebaseApp'\r\n      .service 'MessageService', (FBURL) ->\r\n        messageRef = new Firebase(FBURL).child 'messages'\r\n\r\n      return {\r\n        childAdded : childAdded = (limitNumber, cb) ->\r\n          messageRef.limit(limitNumber).on 'child_added', (snapshot) ->\r\n            #...\r\n      }\r\n\r\n    # in the controller:\r\n\r\n    MessageService.childAdded 10, (addedChild) ->\r\n      # ...\r\n\r\n### 3.3 - startAt() and endAt()\r\n\r\nYou can get the first items by adding the `startAt()` function.\r\n\r\n    childAdded: childAdded = (limitNumber, cb) ->\r\n      messageRef.startAt().limit(limitNumber).on 'child_added', (snapshot) ->\r\n\r\nIf you want to start at a particular item, include a name.\r\n\r\n    startAt null, '-JIQq4AoQ...'\r\n\r\nYou can also `endAt`, instead of limit\r\n\r\n    messageRef.startAt().endAt(null, '-JIQq4AoQ...').on...\r\n\r\n### 3.4 - Paging\r\n\r\nTo begin implementing pagination, add two functions to the Message service.\r\n\r\n    .service 'MessageService', (FBURL, $q) ->\r\n      return {\r\n        #...\r\n        pageNext: pageNext = (name, numberOfItems) ->\r\n          deferred = $q.defer()\r\n          messages = []\r\n\r\n          messageRef.startAt null, name\r\n            .limit numberOfItems\r\n            .once 'value', (snapshot) ->\r\n              snapshot.forEach (snapItem) ->\r\n                itemVal = snapItem.val()\r\n                itemVal.name = snapItem.name()\r\n                messages.push itemVal\r\n              deferred.resolve messages\r\n\r\n            deferred.promise\r\n\r\n        pageBack: pageBack = (name, numberOfItems) ->\r\n      }\r\n\r\n    # In controller\r\n\r\n    $scope.pageNext = ->\r\n      lastItem = $scope.messages[$scope.messages.length - 1]\r\n      MessageService.pageNext lastItem.name, 10\r\n        .then (messages) ->\r\n          $scope.messages = messages\r\n\r\n    # In the html\r\n\r\n    button.btn.btn-success[type="button" ng-click="pageNext()"] Next\r\n\r\nThen for the previous button.\r\n\r\n    # html\r\n\r\n    button.btn.btn-success[type="button" ng-click="pageBack()"] Previous\r\n\r\n    # service\r\n\r\n    .service 'MessageService', (FBURL, $q) ->\r\n      return {\r\n        #...\r\n        pageBack: pageBack = (name, numberOfItems) ->\r\n          deffered = $q.defer()\r\n          messages = []\r\n\r\n          messageRef.endAt null, name\r\n            .limit numberOfItems\r\n            .once 'value', (snapshot) ->\r\n              snapshot.forEach (snapItem) ->\r\n                itemVal = snapItem.val()\r\n                itemVal.name = snapItem.name()\r\n                messages.push itemVal\r\n              deferred.resolve messages\r\n\r\n            deferred.promise\r\n\r\n        pageBack: pageBack = (name, numberOfItems) ->\r\n      }\r\n\r\n    # In controller\r\n\r\n    $scope.pageBack = ->\r\n      firstItem = $scope.messages[0]\r\n      MessageService.pageBack lastItem.name, 10\r\n        .then (messages) ->\r\n          $scope.messages = messages\r\n\r\n## 4 AngularFire\r\n\r\n### 4.1 - Setting up the Module\r\n\r\nAngularFire is a module you can inject into your project easily. You can load it from bower or with the CDN. Then include it as a dependency in your module. Then create a new reference\r\n\r\n    .service 'MessageService', (FBURL, $q, $firebase) ->\r\n      messageRef = new Firebase(FBURL).child 'messages'\r\n      fireMessage = $firebase messageRef\r\n\r\n### 4.2 - Refactoring\r\n\r\nYou can update the methods in your service to use the AngularFire API\r\n\r\n    add: addMessage = (message)\r\n      return fireMessage.$add message\r\n\r\nThis `$add` service will push the message and return a promise containing the unique key of the object. So in the controller we can store that:\r\n\r\n    $scope.sendMessage = ->\r\n      # ...\r\n\r\n      promise = Messageservice.add newMessage\r\n      promise.then (data) ->\r\n        console.log data.name()\r\n\r\nIn the message service, remove the `startAt().limit()` restrictions.\r\n\r\nThen refactor the `childAdded` method to use the `$on` service. This will return a data object that contains a snapshot, instead of a snapshot.\r\n\r\n    return {\r\n      childAdded: childAdded = (cb) ->\r\n        fireMessage.$on 'child_added', (data) ->\r\n          val = data.snapshot.value\r\n          cb.call this,\r\n            user: val.user\r\n            text: val.text\r\n            name: data.snapshot.name\r\n    }\r\n\r\n    # controller (remove $timeout)\r\n\r\n    MessageService.childAdded (addedChild) ->\r\n      $scope.messages.push(addedChild)\r\n\r\nYou can replace the `off` method in the service as well:\r\n\r\n    off: turnMessagesOff = ->\r\n      fireMessage.$off()\r\n\r\nThe pagination will not want to reference the original object, because it needs to add limiters. For cleaner code, we can create a new constant that reference the messages URL\r\n\r\n    # app.js\r\n\r\n    .constant 'MSGURL', 'https://...com/messages'\r\n\r\n    # service\r\n\r\n    angular.module 'firebaseApp'\r\n      service 'MessageService', (MSGURL, $q, $firebase) ->\r\n      return {\r\n        #...\r\n        pageNext: pageNext = (name, numberOfItems) ->\r\n          deferred = $q.defer()\r\n          messages = []\r\n          pageMessageRef = new Firebase(MSGURL)\r\n            .startAt(null, name).limit numberOfItems)\r\n\r\n          $firebase pageMessageRef\r\n            .$on 'loaded', (data) ->\r\n              keys = Object.keys data\r\n            angular.forEach keys, (key) ->\r\n              item = data[key]\r\n              item.name = key\r\n              messages.push item\r\n            deferred.resolve messages\r\n\r\n          return deferred.promise\r\n\r\n        pageBack: pageBack = (name, numberOfItems) ->\r\n          deferred = $q.defer()\r\n          messages = []\r\n          pageMessageRef = new Firebase(MSGURL)\r\n            .endAt(null, name).limit(numberOfItems)\r\n\r\n          $firebase pageMessageRef\r\n            .$on 'loaded', (data) ->\r\n              keys = Object.keys data\r\n            angular.forEach keys, (key) ->\r\n              item = data[key]\r\n              item.name = key\r\n              messages.push item\r\n            deferred.resolve messages\r\n\r\n          return deferred.promise\r\n\r\n      }\r\n\r\n## 5 Firebase Simple Login\r\n\r\n### 5.1 - Login Prep\r\n\r\nSet up the views\r\n\r\n    .config ($routeProvider) ->\r\n      $routeProvider\r\n        #...\r\n        .when '/chat',\r\n          templateUrl: 'views/chat.html'\r\n          controller: 'ChatCtrl'\r\n        .when '/login',\r\n          templateUrl: 'views/login.html'\r\n          controller: 'LoginCtrl'\r\n        .when '/register',\r\n          templateUrl: 'views/register.html'\r\n          controller: 'RegisterCtrl'\r\n\r\n    # controllers - chat\r\n\r\n    angular.module 'firebaseApp'\r\n      .controller 'ChatCtrl', ($scope, $timeout, MessageService) ->\r\n        # everything from main.\r\n\r\n    # html - chat\r\n\r\n    everything from main.html\r\n\r\n    # html - login\r\n\r\n    .jumbotron\r\n      .form-group\r\n        label Email address\r\n        input.form-control[type="email" placeholder="Enter email"]\r\n      .form-group\r\n        label Password\r\n        input.form-control[type="password" placeholder="Password"]\r\n      button.btn.btn-success[type="text"] Sign in\r\n      a.btn.btn-success[type="text" ng-href="#/register"] Sign up\r\n\r\n    # html - register\r\n\r\n    .jumbotron\r\n      .form-group\r\n        label Email address\r\n        input.form-control[type="email" placeholder="Enter email"]\r\n      .form-group\r\n        label Password\r\n        input.form-control[type="password" placeholder="Password"]\r\n      .form-group\r\n        label Password Confirmation\r\n        input.form-control[type="password" placeholder="Password"]\r\n      button.btn.btn-success[type="text"] Sign up\r\n\r\n    # controller - login\r\n\r\n    angular.module 'firebaseApp'\r\n      .controller 'LoginCtrl', ($scope) ->\r\n\r\n    # controller - register\r\n\r\n    angular.module 'firebaseApp'\r\n      .controller 'LoginCtrl', ($scope) ->\r\n\r\n### 5.2 - Register\r\n\r\nIn the register controller, set up firebase simple login\r\n\r\n    .controller 'RegisterCtrl', ($scope, $firebaseSimpleLogin, FBURL) ->\r\n      fbref = new Firebase FBURL\r\n      $scope.errors = []\r\n      $scope.simpleLogin = $firebaseSimpleLogin fbRef\r\n      $scope.registerUser =\r\n        email: ''\r\n        password: ''\r\n        confirmPassword: ''\r\n\r\n\r\n      $scope.register = ->\r\n        errors = []\r\n        user = $scope.registerUser\r\n        if user.email == ''\r\n          errors.push 'Please enter an email'\r\n        if user.password == ''\r\n          errors.push 'Password must not be blank'\r\n        else if user.password != user.confirmPassword\r\n          errors.push 'Passwords must match'\r\n\r\n        if errors.length > 0\r\n          $scope.errors = errors\r\n          return\r\n\r\n        promise = $scope.simpleLogin\r\n          .$createUser user.email, user.password\r\n\r\n        promise.then (user) ->\r\n          console.log user\r\n          $window.location.href = '#/home'\r\n        , (error) ->\r\n          console.log error\r\n\r\nBind these model objects to the markup:\r\n\r\n    .alert.alert-danger[ng-repeat="error in errors"]\r\n      | {{error}}\r\n    .form-group\r\n      label Email address\r\n      input.form-control[type='email' placeholder='Enter email' ng-model='registerUser.email']\r\n    .form-group\r\n      label Password\r\n      input.form-control[type='password' placeholder='Enter password' ng-model='registerUser.password']\r\n    .form-group\r\n      label Password\r\n      input.form-control[type='password' placeholder='Enter password' ng-model='registerUser.confirmPassword']\r\n    button.btn.btn-success[type="text" ng-click="register()"] Sign up\r\n\r\nThis creates a registered user in Firebase, which has a hashed password, session key and token.\r\n\r\n### 5.3 - Logout\r\n\r\nCreate the logout in navigation, then setup the logout controller. We don't need a template, so just redirect to the home.\r\n\r\n    # index.html\r\n\r\n    li\r\n      a[ng-href='#/logout'] Logout\r\n\r\n    # controller\r\n\r\n    .controller 'LogoutCtrl', ($scope, $firebaseSimpleLogin, FBURL, $window) ->\r\n      fbRef = new Firebase FBURL\r\n      $scope.simpleLogin = $firebaseSimpleLogin fbRef\r\n      $scope.simpleLogin.$logout()\r\n      $window.location.href = '/#/'\r\n\r\n    # route\r\n\r\n    .when '/logout',\r\n      template: 'Logging out...'\r\n      controller: 'LogoutCtrl'\r\n\r\n### 5.4 - Login\r\n\r\nManagement for firebase simple login is in the **Simple Login** section of the dashboard. Select **Email and Password**\r\n\r\nThen create the Login Control\r\n\r\n    .controller 'LoginCtrl', ($scope, $firebaseSimpleLogin, FBURL, $window, $rootScope) ->\r\n      fbRef = new Firebase FBURL\r\n      $scope.simpleLogin = $firebaseSimpleLogin fbRef\r\n      $scope.errors = []\r\n      $scope.user =\r\n        email: ''\r\n        password: ''\r\n\r\n      $scope.login = ->\r\n        $scope.errors = []\r\n        user = $scope.user\r\n\r\n        if user.email == ''\r\n          $scope.errors.push 'Please enter your email'\r\n\r\n        if user.password == ''\r\n          $scope.errors.push 'Please enter your passowrd'\r\n\r\n        if $scope.errors.length > 0\r\n          return\r\n\r\n        promise = $scope.simpleLogin.$login 'password'\r\n          email: user.email\r\n          password: user.password\r\n\r\n        promise.then (user) ->\r\n          console.log user\r\n          $rootScope.user = user\r\n          $window.location.href = '/#/main'\r\n        , (error) ->\r\n          console.error error\r\n          if error.code == 'INVALID_EMAIL'\r\n            $scope.errors.push 'The email was invalid'\r\n          if error.code == 'INVALID_PASSWORD'\r\n            $scope.errors.push 'The password was invalid'\r\n\r\n    # markup\r\n\r\n    input.form-control[type=email placeholder="Enter email" ng-model="user.email"]\r\n    input.form-control[type=password placeholder="Password" ng-model="user.password"]\r\n    button.btn.btn-primary[type="text" ng-click="login()"]\r\n\r\n### 5.5 - User Chat\r\n\r\nWe have applied the user to the root scope in our login, so we can access it from the other controllers. For the chat controller, set the user:\r\n\r\n    $scope.sendMessage = ->\r\n      newMessage =\r\n        text: $scope.currentText\r\n        email: $scope.user.email\r\n\r\nSo you can remove the place where a user can enter their username.\r\n\r\n\r\n## 6 Security\r\n### 6.1 - Route Security\r\n### 6.2 - Security Rules\r\n## 7 Conclusion\r\n### 7.1 - Conclusion\r\n	4	2015-03-31 21:14:41.74479	2015-03-31 21:14:41.74479
66	Faker	faker	    Faker::Internet.email('Nancy')\r\n    Faker::Internet.safe_email('Nancy')\r\n    Faker::Internet.user_name('Nancy')\r\n    Faker::Internet.password(8)\r\n    Faker::Internet.domain_name\r\n\r\n    Faker::Date.between(2.days.ago, Date.today)\r\n    Faker::Date.backward(14)\r\n    Faker::Date.forward(23)\r\n\r\n    Faker::Company.name\r\n    Faker::Company.bs\r\n    Faker::Company.logo\r\n\r\n    Faker::Commerce.price\r\n    Faker::Commerce.product_name\r\n\r\n    Faker::Address.city\r\n    Faker::Address.street_address\r\n    Faker::Address.secondary_address\r\n    Faker::Address.zip\r\n    Faker::Address.state_abbr\r\n    Faker::Address.country\r\n    Faker::Address.latitude\r\n    Faker::Address.longitude\r\n\r\n    Faker::Lorem.words(4)\r\n    Faker::Lorem.characters(10)\r\n    Faker::Lorem.sentence(3)\r\n    Faker::Lorem.paragraph(2)\r\n    Faker::Lorem.paragraphs(1)\r\n\r\n    Faker::Name.name\r\n    Faker::Name.first_name\r\n    Faker::Name.last_name\r\n    Faker::Name.title\r\n\r\n    Faker::PhoneNumber.phone_number\r\n    Faker::PhoneNumber.cell_phone\r\n    Faker::PhoneNumber.area_code\r\n\r\n    Faker::Hacker.say_something_smart\r\n    Faker::App.name\r\n	3	2015-03-31 21:14:42.203421	2015-03-31 21:14:42.203421
58	Local Apache (with CORS?)	local-apache-with-cors	Install apache\r\n\r\n    sudo apt-get install apache2\r\n\r\nInstall passenger\r\n\r\n    sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 561F9B9CAC40B2F7\r\n    sudo echo 'deb https://oss-binaries.phusionpassenger.com/apt/passenger trusty main' > /etc/apt/sources.list.d/passenger.list    \r\n    sudo chown root: /etc/apt/sources.list.d/passenger.list\r\n    sudo chmod 600 /etc/apt/sources.list.d/passenger.list\r\n    sudo apt-get update\r\n    sudo apt-get install libapache2-mod-passenger\r\n\r\nEnable passenger mod:\r\n\r\n    sudo a2enmod passenger\r\n    sudo service apache2 restart\r\n\r\n    sudo vim sudo vim mods-available/passenger.conf\r\n    [Set ruby version as] /home/stm104/.rbenv/shims/ruby\r\n\r\nEnable headers mod:\r\n\r\n    sudo a2enmod headers\r\n\r\nCopy `000-default.conf` in sites-available and add Rails config:\r\n\r\n    <VirtualHost *:80>\r\n      ServerName alpha.dev\r\n      ServerAlias www.alpha.dev\r\n      ServerAdmin webmaster@localhost\r\n      DocumentRoot /home/stm104/Sites/alpha/public\r\n      RailsEnv development\r\n      Header set Access-Control-Allow-Origin "%{HTTP_ORIGIN}e" env=HTTP_ORIGIN\r\n\r\n      ErrorLog ${APACHE_LOG_DIR}/error.log\r\n      CustomLog ${APACHE_LOG_DIR}/access.log combined\r\n\r\n      <Directory "/home/stm104/Sites/alpha/public">\r\n        Options FollowSymLinks\r\n        Require all granted\r\n      </Directory>\r\n    </VirtualHost>\r\n\r\nEnable site:\r\n\r\n    sudo a2ensite example.com.conf\r\n    sudo service apache2 restart\r\n\r\nEdit host file:\r\n\r\n    sudo nano /etc/hosts	1	2015-03-31 21:14:41.795872	2015-03-31 21:14:41.795872
59	Samba	samba	Install samba:\r\n\r\n    apt-get install samba samba-common python-glade2 system-config-samba\r\n\r\nSet hostname:\r\n\r\n    # /etc/hostname\r\n    new_name\r\n\r\n    # /etc/hosts\r\n    127.0.1.1     new_name\r\n\r\nSetup share:\r\n\r\n    sudo gedit /etc/samba/smb.conf\r\n\r\n    ####### Authentication #######\r\n\r\n    # “security = user” is always a good idea. This will require a Unix account\r\n    # in this server for every user accessing the server. See\r\n    # /usr/share/doc/samba-doc/htmldocs/Samba-HOWTO-Collection/ServerType.html\r\n    # in the samba-doc package for details.\r\n    security = user\r\n    username map = /etc/samba/smbusers\r\n\r\n    sudo smbpasswd -a <username>\r\n\r\n    sudo gedit /etc/samba/smbusers\r\n\r\n    <username> = “<username>”\r\n\r\n    sudo gedit /etc/samba/smb.conf\r\n\r\n    #======================= Share Definitions =======================\r\n\r\n    # Un-comment the following (and tweak the other settings below to suit)\r\n    # to enable the default home directory shares. This will share each\r\n    # user’s home directory as \\\\server\\username\r\n    [homes]\r\n    comment = Home Directories\r\n    browseable = yes\r\n\r\n    # By default, \\\\server\\username shares can be connected to by anyone\r\n    # with access to the samba server. Un-comment the following parameter\r\n    # to make sure that only “username” can connect to \\\\server\\username\r\n    valid users = %S\r\n\r\n    # By default, the home directories are exported read-only. Change next\r\n    # parameter to ‘yes’ if you want to be able to write to them.\r\n    writable = yes\r\n\r\nFrom windows\r\n\r\n    \\\\ubuntumachine\\username\r\n\r\n## To mount a samba share on ubuntu\r\n\r\n    sudo apt-get install cifs-utils\r\n\r\n    sudo mkdir /media/windowsshare\r\n\r\nIn `/etc/fstab`\r\n\r\n    //servername/sharename  /media/windowsshare  cifs  username=msusername,password=mspassword,iocharset=utf8,sec=ntlm  0  0\r\n\r\nMore securely, create a file: `~/.smbcredentials`\r\n\r\n    username=msusername\r\n    password=mspassword\r\n\r\n    chmod 600 ~/.smbcredentials\r\n\r\nIn `/etc/fstab`\r\n\r\n    //servername/sharename /media/windowsshare cifs credentials=/home/ubuntuusername/.smbcredentials,iocharset=utf8,sec=ntlm 0 0 \r\n\r\n    sudo mount -a	1	2015-03-31 21:14:41.847244	2015-03-31 21:14:41.847244
60	Bash Scripting	bash-scripting	Simple function with if statement.\r\n\r\n    function newSite() {\r\n    if [ ! -d /Users/js/Sites/$1 ]\r\n      then\r\n        cp -r /Users/js/Sites/boilerplate/ /Users/js/Sites/$1\r\n        open /Users/js/Sites/$1\r\n        open http://localhost/$1\r\n      else\r\n        echo "Please choose a name that is not $1"\r\n    fi\r\n    }\r\n\r\nIf you break this out into another `.sh` file, add this line:\r\n\r\n    #!/bin/bash\r\n\r\nAnd change permissions for the file:\r\n\r\n    chmod +x newSite.sh\r\n\r\nYou can run this:\r\n\r\n    ./newSite.sh someexample\r\n\r\nIf you move this to `/usr/local/bin`, you can run it from anywhere using\r\n\r\n    newSite.sh someexample\r\n\r\nSet an alias with:\r\n\r\n    alias ll='ls -l'\r\n\r\nDirectory Size\r\n\r\n    du -hs assets/	1	2015-03-31 21:14:41.898181	2015-03-31 21:14:41.898181
61	RefineryCMS	refinerycms	Problems with bootstrap, failed to load from gem, loading manually.\r\n\r\nOverride layout files:\r\n\r\n    rake refinery:override view=refinery/_footer\r\n    rake refinery:override view=refinery/_header\r\n\r\nFound in:\r\n\r\n    /home/shaun/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/bundler/gems/refinerycms-1aa57bdb2795/core/\r\n    \r\n[List of all files you can override](https://gist.github.com/ryandeussing/2502881)\r\n\r\nAdd the ability to make new tabs:\r\n\r\n    # config/initializers/refinery\r\n    config.new_page_parts = true\r\n    \r\n## Refinery Edge Bugs\r\n\r\nSide Body not full width.\r\n\r\nJavaScript from bootstrap-sass gem not loaded, need to add directly to vendor assets.	3	2015-03-31 21:14:41.949386	2015-03-31 21:14:41.949386
62	Terminalrc - Work	terminalrc-work	    [Configuration]\r\n    ColorForeground=#b3b3b3b3b3b3\r\n    ColorBackground=#133319992666\r\n    ColorCursor=#0f0f49499999\r\n    ColorSelection=#16163b3b5959\r\n    ColorSelectionUseDefault=FALSE\r\n    FontName=Source Code Pro Medium 12\r\n    MiscAlwaysShowTabs=FALSE\r\n    MiscBell=FALSE\r\n    MiscBordersDefault=TRUE\r\n    MiscCursorBlinks=FALSE\r\n    MiscCursorShape=TERMINAL_CURSOR_SHAPE_BLOCK\r\n    MiscDefaultGeometry=80x24\r\n    MiscInheritGeometry=FALSE\r\n    MiscMenubarDefault=TRUE\r\n    MiscMouseAutohide=FALSE\r\n    MiscToolbarDefault=FALSE\r\n    MiscConfirmClose=TRUE\r\n    MiscCycleTabs=TRUE\r\n    MiscTabCloseButtons=TRUE\r\n    MiscTabCloseMiddleClick=TRUE\r\n    MiscTabPosition=GTK_POS_TOP\r\n    MiscHighlightUrls=TRUE\r\n    MiscScrollAlternateScreen=TRUE\r\n    TabActivityColor=#262656568080\r\n    ColorPalette=#000000000000;#aaaa00000000;#0000aaaa0000;#aaaa55550000;#00000000aaaa;#aaaa0000aaaa;#0000aaaaaaaa;#aaaaaaaaaaaa;#555555555555;#ffff55555555;#5555ffff5555;#da12da1264c7;#55555555ffff;#cd264bdacd26;#73a6e30ee30e;#ffffffffffff\r\n	1	2015-03-31 21:14:41.99746	2015-03-31 21:14:41.99746
63	Calendar table	calendar-table	    module ApplicationHelper\r\n      def calendar_table\r\n        thead = content_tag :thead do\r\n          content_tag :tr do\r\n            # iteration of content_tags requires `concat`\r\n            days.collect do |day, i|\r\n              concat content_tag(:th, day)\r\n            end\r\n          end\r\n        end\r\n\r\n        tbody = content_tag :tbody do\r\n          6.times do |i|\r\n            concat calendar_row(i)\r\n          end\r\n        end\r\n        content_tag :table, thead.concat(tbody), class: 'table table-bordered'\r\n      end\r\n\r\n      def days\r\n        days = {}\r\n        Date::DAYNAMES.each_with_index { |x, i| days[x] = i   }\r\n        days\r\n      end\r\n\r\n      def calendar_matrix\r\n        start = Time.now.beginning_of_month\r\n        start_day = start.strftime('%A')\r\n        finish = Time.now.end_of_month\r\n        number_of_days = finish.strftime('%d').to_i\r\n\r\n        counter = 0\r\n        dates = []\r\n        6.times do |i|\r\n          dates << []\r\n          7.times do |j|\r\n            if i == 0 && j < days[start_day]\r\n              dates[i] << 0\r\n            elsif counter >= number_of_days\r\n              dates[i] << 0\r\n            else\r\n              counter += 1\r\n              dates[i] << counter\r\n            end\r\n          end\r\n        end\r\n        dates\r\n      end\r\n\r\n      def calendar_row(row)\r\n        content_tag :tr do\r\n          days.length.times do |i|\r\n            concat calendar_column(row, i)\r\n          end\r\n        end\r\n      end\r\n\r\n      def calendar_column(row, column)\r\n        day = if calendar_matrix[row].nil?\r\n                0\r\n              else\r\n                calendar_matrix[row][column]\r\n              end\r\n        if day > 0\r\n          content_tag :td, day\r\n        else\r\n          content_tag :td\r\n        end\r\n      end\r\n    end\r\n	3	2015-03-31 21:14:42.048423	2015-03-31 21:14:42.048423
64	Vim	vim	# Getting started\r\n\r\nTo refresh your vimrc\r\n\r\n    :source ~/.vimrc\r\n\r\nSearch with regex:\r\n\r\n    # vowels\r\n    /.[aeiou]\r\n    # blank lines\r\n    /\\n\\n\r\n    # search for paranthesis without space in front\r\n    /[^ ](\r\n    # Replace using last search\r\n    s//replacement/\r\n\r\nSearch whole file and replace globally\r\n\r\n    :%s/Ember/Amber/g\r\n\r\nSearch with confirm\r\n\r\n    :%s/Ember/Amber/gc\r\n\r\nFlags available for confirm:\r\n\r\n* y - yes, replace\r\n* l - replace and quit\r\n* n - no, skip\r\n* a - all\r\n* q - quit\r\n\r\n## command line\r\n\r\nTo paste content from shell into vim:\r\n\r\n    :read !date\r\n    Sun Dec 14 10:00:02 CST 2014\r\n    :r !curl --silent [url]\r\n    # downloads a file from somewhere and paste it into the file.\r\n    :!coffee -c -s -p\r\n    # this will generate javascript from coffeescript\r\n    # the parameters set it to print instead of save a file\r\n\r\nSet file type:\r\n\r\n    :set ft=javascript\r\n\r\nView whitespace\r\n\r\n    :set list\r\n    :set nolist\r\n\r\n## vimrc options\r\n\r\noption | result\r\n--- | ---\r\nset incsearch | set incremental search, start searching after each keypress\r\nset ignorecase | turn of case sensitivity for a search\r\nset hlsearch | highlight search (turn off with `:noh`)\r\nset expandtab | Convert tabs to spaces\r\nset shiftwidth=2 | Set number of spaces for indentation\r\nset smartindent | Put cursor on correct indentation with o, also predicts blocks\r\nset softtabs=2 | Set the correct indentation in insert mode\r\n\r\n\r\n\r\n## buffers\r\n\r\n* `ls` - Show the buffers\r\n* `bn` - Navigate to the next buffer\r\n* `bp` - Navigate to the previous buffer\r\n* `b#` - Go to the last opened buffer\r\n* `bd` - Delete current file from buffer (closes file)\r\n* `bd12` - Delete numbered file buffer\r\n\r\n## windows\r\n\r\n* `vs [path]` - Vertical split\r\n* `Ctrl+w` - Navigate windows\r\n* `sp [path]` - horizontal split\r\n* `Ctrl+w+[Captial Movement, HJKL]` - Move window\r\n* `Ctrl+w+[+-<>]` - Increase/descrease height/width\r\n* `Ctrl+w+=` - Equalize windows\r\n* `:sb` - Split with buffer\r\n* `:vert sb` - Split vertically with buffer\r\n* `:tabe` - Open file in a tab (`:tabedit`)\r\n* `gt` - Go forward a tab\r\n* `gT` - Go back a tab\r\n\r\n## indents and folding\r\n\r\nIndents used with repeaters act on multiple lines\r\n\r\n`>>` - Indent\r\n`<<` - Un-indent\r\n`=` - Auto idnent lines, using visual mode or navigation\r\n`Ctrl+t` - Indent in insert mode\r\n`Ctrl+d` - Indent back\r\n`zf` - Used with a motion, creates a fold. `zf5j`\r\n`zo` - Open a fold\r\n`zc` - Close a fold\r\n`zd` - Delete fold\r\n`zf%` - Fold based on brackets\r\n`zi` - Invert folding\r\n\r\nTo use marker folding\r\n\r\n    :set fdm=marker\r\n    :set foldmarker={{{,}}}\r\n\r\nThen `zc` and `zo` will act on lines between the triple-curlybrackets\r\n\r\n## Keyboard Shortcuts\r\n\r\nkey | command\r\n--- | ---\r\ni | insert mode\r\n<esc> | leave mode\r\nw | jump by word\r\nW | jump to word after space\r\nw | back word\r\nW | back to word before space\r\n^ | First non-space of the line\r\n0 | Beginning of the line\r\n$ | End of the line\r\n{ | beginning of paragraph\r\n} | end of paragraph\r\ngg | beginning of file\r\nG | end of file\r\nf | jump forward to character specified\r\nF | jump back to character\r\nt | find occurance and go right before it\r\nT | find occurance and go right after\r\nx | delete one letter, can be used with repeaters\r\nd | delete as specified\r\nc | delete and put in insert mode\r\ni | act on something inside closing marks (parens, quotes, brackets, etc)\r\na | used with `c` or `d`, you can delete something inside closing marks plus the marks\r\n/ | start searching\r\n? | search backward\r\nn | find next search result\r\nN | find last search result\r\nv | Enter visual mode\r\nV | Visual Line mode\r\nq | Start macro\r\n\r\n## Navigation\r\n\r\nkey | command\r\n--- | ---\r\nCtrl+d | Jump down half a screen\r\nCtrl+u | Jump up half a screen\r\nCtrl+f | One screen forward\r\nCtrl+b | One screen back\r\nM | Go to the middle of the window\r\nH | Go to the top of the window (Home)\r\nL | Go to last line of the window\r\nzt | Modify the current window so that current line is on top\r\nzb | Modify the current window so that the current line is on bottom\r\nzz | Modify the current window so that the current line is in the middle\r\nm | Record a marker, the position of the cursor, using a register\r\n' | Go to the line marked in the register (')\r\n\r\n## Things I did not know\r\n\r\nkey | command\r\n--- | ---\r\nca" | Delete everything inside ", plus the quotes.\r\nd/fire | Delete everything until the word fire\r\n/\\n | Search for new line characters.\r\nv% | Finds matching bracket to highlight in visual mode (does not work with quotes?)\r\ns///c | Ask to confirm for a search and replace.\r\ns//r | Replace with the last search, leave the first parameter out\r\n/[^ ]\\zs( | Limit the scope of the replacement to only the things after `\\zs`. (regex or vim?) also `\\ze`\r\nCtrl+g | Show some status about the file\r\ngv | Select previous visual selection\r\ndj | delete the current line and the one below it.\r\n:reg | Show all the registers\r\n@@ | Run the last register\r\nCtrl+f | One screen forward\r\nCtrl+b | One screen back\r\nM | Go to the middle of the window\r\nH | Go to the top of the window (Home)\r\nL | Go to last line of the window\r\nzt | Modify the current window so that current line is on top\r\nzb | Modify the current window so that the current line is on bottom\r\nzz | Modify the current window so that the current line is in the middle\r\nm | Record a marker, the position of the cursor, using a register\r\n' | Go to the line marked in the register (')\r\no | When in visual mode, `o` will go to the beginning of the selection so that you can act on previous lines\r\n\r\nTo paste content from shell into vim:\r\n\r\n    :read !date\r\n    Sun Dec 14 10:00:02 CST 2014\r\n\r\nIf you highlight text first, any command line output will replace the selected text\r\n\r\nSet file type:\r\n\r\n    :set ft=javascript\r\n	1	2015-03-31 21:14:42.097555	2015-03-31 21:14:42.097555
65	Rails 4.2 Upgrade Notes	rails-4-2-upgrade-notes	## Major Features\r\n\r\n* Active Job - New interface for working with Resque, Delayed Job, and Sidekiq\r\n* Asynchronous Mails - Sends mail via the queue with `deliver_later` method. Sending emails right away should be done with `deliver_now`\r\n* Adequate Record - Caching several scenarios\r\n* Web Console - Include the `console` helper to load a console in the view with the current context.\r\n* Foreign Key Support - Follows foreigner syntax\r\n\r\n## Incompatibilities\r\n\r\n* Render with a String argument - Previously, `render "foo/bar"` would be equivalent to `render file: "foo/bar"`. Now it is interpreted as `render template: "foo/bar"`. You can still explicitly render a file.\r\n* respond_with / Class-Level respond_to - These have been moved to the **responders** gem. Does not affect `respond_to` instance method. \r\n* Default Host for rails server - Server now listens on localhost instead of 0.0.0.0. This will cause problems working remotely, but you can start the server with `rails server -b 0.0.0.0` to use the old behavior.\r\n* HTML Sanitizer - There may be some chages for pathological inputs, keep an eye on it.\r\n* assert_select - Now based on Nokogiri, may have to change some selectors in test unit.\r\n\r\n## Railties\r\n\r\n### Removals\r\n\r\n* `--skip-action-view` option removed from generator\r\n* `rails application` command removed\r\n\r\n### Deprecations\r\n\r\n* Missing `config.log_level` for production environments, must be set\r\n* `rake test:all` is now `rake test`\r\n* `rake test:all:db` is now `rake test:db`\r\n* `Rails::Rack::LogTailer` deprecated\r\n\r\n### Notable Changes\r\n\r\n* `web-console` included by default\r\n* `required` option for model generator associations\r\n* `x` namespace for custom configuration options.\r\n\r\n        # config/environments/production.rb\r\n        config.x.payment_processing.schedule = :daily\r\n        \r\n        # from somewhere else\r\n        Rails.configuration.x.payment_processing.schedule # :daily\r\n\r\n* `Rails::Application.config_for` to load environment.\r\n\r\n        # config/exception_notification.yml\r\n        production:\r\n          url: whatever\r\n          namespace: whatever\r\n        development:\r\n          url: whatever\r\n          namespace: whatever\r\n\r\n        # config/production.rb\r\n        Rails.application.configure do\r\n          config.middleware.use ExceptionNotifier, config_for(:exception_notification)\r\n        end\r\n\r\n* `--skip-turbolinks` option for generator\r\n* `bin/setup` script for setup code when bootstrapping. ([Pull Request])[https://github.com/rails/rails/pull/15189]\r\n* `config.assets.digest` set to true by default in development\r\n* API for `rake notes`.\r\n* `after_bundle` callback for Rails templates\r\n* `Rails.gem_version` returns rails version\r\n\r\n## Action Pack\r\n\r\n### Removals\r\n\r\n* `AbstractController:Helpers::MissingHelperError` replace other helper error.\r\n\r\n### Deprecations\r\n\r\n* `only_path` option deprecated\r\n* `assert_select` replace other assertions\r\n* `:to` can't be used if you don't specify both action and controller with `#`.\r\n* No string keys in URL helpers, (`'controller' => 'posts'` won't work)\r\n\r\n### Notable Changes\r\n\r\n* Don't call them `_filter`s.\r\n* render blank body doesn't include single space padding\r\n* ETags automatically included\r\n* Segments passed into URL helpers are escaped\r\n* `always_permitted_parameters` option configure global parameters, default value is `['controller', 'action']`.\r\n* Add HTTP method to MKCALENDAR\r\n* fragment notification include some names\r\n* Routing Error page fuzzy matches route search\r\n* Option to disable CSRF fail log\r\n* serve static assets will serve gzip assets if supported.\r\n\r\n## Action View\r\n\r\n### Deprecations\r\n\r\n* Don't use `AbstractController::Base.parent_prefixes\r\n* `ActionView::Digestor#digest` should have arguments passed as a hash\r\n\r\n### Notable Changes\r\n\r\n* No `<div>` around hidden fields\r\n* `#{partial_name}_iteration` local variable shows current state of partial used in iteration. `index`, `size`, `first?`, `last?` available.\r\n* Placeholder I18n same as label I18n\r\n* process helpers in integration test need to have leading slash.\r\n\r\n## Action Mailer\r\n\r\n### Deprecations\r\n\r\n* `_path` in mailers must be `_url`.\r\n* `dilver` is now `deliver_now`\r\n\r\n### Notable changes\r\n\r\n* `link_to` and `url_for` generate absolute URLs by default\r\n* `show_previews` option enable mailer previews outside development\r\n\r\n## Active Record\r\n\r\n### Removals\r\n\r\n* Removed `cache_attributes`, all are cached.\r\n* Removed `ActiveRecord::Base.quoted_locking_column\r\n* Remove `ActiveRecord::Migrator.proper_table_name`, use instance method `proper_table_name` instead\r\n* Remove `timestamp` type.\r\n\r\n### Deprecations\r\n\r\n* Deprecated swallowing errors inside `after_commit` and `after_rollback`.\r\n* Deprecated caching `has_many :through`. Should manually specify\r\n* Deprecated `.find` with an object, need id.\r\n* Deprecated support for PostgreSQL range values.\r\n* Use `DatabaseTasks.load_schema_current` instead of `load_schema`\r\n* Deprecated `sanitize_sql_hash_for_conditions`\r\n* Deprecated `Reflection#source_macro`\r\n* Deprecated `serialized_attributes`\r\n* `column_for_attribute` returns null object if no object exists.\r\n* Deprecated `.joins`, `.preload`, and `.eager_load` on associations that depend on instance state (the scope block takes an argument).\r\n\r\n### Notable changes\r\n\r\n* `required` options on singular association defines a presence validation\r\n* Detect in-place changes, serialized attribute no longer saved when unchanged.\r\n* `db:purge` to empty database\r\n* `ActiveRecord::Base#validate!` introduced\r\n* `validate` as alias for `valid?`\r\n* `touch` accepts multiple attributes\r\n* Postgres adapter supports `jsonb` datatype in PG9.4+\r\n* No longer 255 character limit on strings\r\n* `citext` column support in PSQL\r\n* user-created range types in PSQL\r\n* `sqlite3:///some/path` absolute system path\r\n* Fractional seconds in MySQL\r\n* `ActiveRecord::Base#pretty_print` for models. (`pp topic`)\r\n* `ActiveRecord::Base#reload` works like `m = Model.find(m.id)`. No longer retains extra attributes\r\n* `ActiveRecord::Base#reflections` returns hash with string keys instead of symbols\r\n* `references` used in migrations supports foreign key\r\n\r\n## Active Model\r\n\r\n### Removals\r\n\r\n* Remove `Validator#setup`\r\n\r\n### Deprecations\r\n\r\n* `reset_#{attribute}` now `restore_#{attribute}`\r\n* `ActiveModel::Dirty#reset_changes` now `clear_changes_information`\r\n\r\n### Notable Changes\r\n\r\n* `restore_attributes` restore changed attributes to their previous values\r\n* `has_secure_password` allows blank passwords\r\n* `has_secure_password` verifies password is less than 72 characters\r\n\r\n## Active Support\r\n\r\n### Removals\r\n\r\n* Removed `Numeric` `ago`, `until`, `since`, `from_now` methods (requires `seconds`, `months`, etc.)\r\n* Remove deprecated string based terminators in callbacks\r\n\r\n### Deprecations\r\n\r\n* Deprecated `Kernel` `silence_stderr`, `capture`, `quietly`\r\n* Use `Class#class_attribute` instead of `Class#superclass_delegating_accessor`\r\n* `ActiveSupport::SafeBuffer#prepend!` removed, now just `prepend`\r\n\r\n### Notable changes\r\n\r\n* `active_support.test_order` will specify test order\r\n* `travel_to` test helper truncates `usec` component to 0\r\n* `Object#itself` as identity function\r\n* `Object#try`, `Object#with_options` can be used without receiver in block\r\n* `String#truncate_words` to truncate by words\r\n* `Hash#transform_values` to simplify hashes where values change but not keys\r\n* `humanize` now strips leading underscores\r\n* `Concern#class_methods` as alternative to `module ClassMethods`\r\n* `Kernal#concern` to avoid `module Foo; extend ActiveSupport::Concern` boilerplate.	3	2015-03-31 21:14:42.151882	2015-03-31 21:14:42.151882
67	Checkbox - Jquery and Rails	checkbox-jquery-and-rails	Because a rails checkbox is always 1, you have to check the `:checked` attribute\r\n\r\n    $('#payroll_request_require_appointment_change').on 'click', ->\r\n      if $(this).is(':checked')\r\n        changeType.prop 'disabled', false\r\n      else\r\n        changeType.prop 'disabled', true\r\n	4	2015-03-31 21:14:42.253793	2015-03-31 21:14:42.253793
71	Encryption	encryption	    module Utilities\r\n      module Encryption\r\n        def self.encrypt(secret)\r\n          encrypter = OpenSSL::Cipher::Cipher.new 'AES-256-CBC'\r\n          encrypter.encrypt\r\n          encrypter.pkcs5_keyivgen configatron.hr.encryption_passcode, configatron.hr.salt\r\n          encrypted = encrypter.update secret\r\n          encrypted << encrypter.final\r\n\r\n          encoded = Base64.encode64(encrypted).encode('utf-8')\r\n          encoded\r\n        end\r\n\r\n        def self.decrypt(secret)\r\n          decoded = Base64.decode64(secret).encode('ascii-8bit')\r\n\r\n          decrypter = OpenSSL::Cipher::Cipher.new 'AES-256-CBC'\r\n          decrypter.decrypt\r\n          decrypter.pkcs5_keyivgen configatron.hr.encryption_passcode, configatron.hr.salt \r\n          plain = decrypter.update decoded\r\n          plain << decrypter.final\r\n          plain\r\n        end\r\n      end\r\n    end\r\n	2	2015-03-31 21:14:42.458517	2015-03-31 21:14:42.458517
72	Ubuntu VM with Sound	ubuntu-vm-with-sound	At work:\r\n\r\n1. Install New Realtek Driver\r\n2. Make sure output device set to speakers\r\n3. Open Ubuntu VMs Volume Control\r\n4. Go to Configuration and set Profile to "Analog Stereo Output"\r\n	7	2015-03-31 21:14:42.509713	2015-03-31 21:14:42.509713
73	241 - Simple Omniauth	241-simple-omniauth	# 241 - Simple Omniauth\r\n\r\nOmniauth is built on rack. Omniauth works with different gems based on the provider.\r\n\r\n    gem 'omniauth-twitter'\r\n\r\nThere will be an `omniauth.rb` initializer that you can configure to set up the environment.\r\n\r\n    Rails.application.config.middleware.use OmniAuth::Builder do\r\n      provider :developer unless Rails.env.production?\r\n      provider :twitter, ENV['TWITTER'], ENV['TWITTER_SECRET']\r\n    end\r\n\r\nGet the key from the developer console of twitter, it will be called the consumer key.\r\n\r\nSend the app to `/auth/twitter`, which will redirect to twitter for authorization. Once authorized, it will redirect to `/auth/twitter/callback`. So set up a route for this\r\n\r\n    get 'auth/:provider/callback', to: 'sessions#create'\r\n\r\n`env["omniauth.auth"]` will give you a list of information available to the authorized user. You can display this information by setting your create action to display it as yaml.\r\n\r\n    def create\r\n      raise env["omniauth.auth"].to_yaml\r\n    end\r\n\r\nCreate a user model to store the information\r\n\r\n    rails g model user provider uid name\r\n    rake db:migrate\r\n\r\nThen modify the create action\r\n\r\n    #controller\r\n\r\n    def create\r\n      user = User.from_omniauth(env["omniauth.auth"])\r\n    end\r\n\r\n    # model\r\n\r\n    def self.from_omniauth(auth)\r\n      # slice will create a hash\r\n      where(auth.slice("provider", "uid")).first || create_from_omniauth(auth)\r\n      session[:user_id] = user.id\r\n      redirect_to root_url, notice: 'Signed in'\r\n    end\r\n\r\n    def self.create_from_omniauth(auth)\r\n      create! do |user|\r\n        user.provider = auth["provider"]\r\n        user.uid = auth["uid"]\r\n        user.name = auth["info"]["nickname"]\r\n      end\r\n    end\r\n\r\n    # application_controller.rb\r\n\r\n    private\r\n\r\n      def current_user\r\n        @current_user ||= User.find(session[:user_id]) if session[:user_id]\r\n      end\r\n\r\n      helper_method :current_user\r\n\r\nThen you can access the `current_user` variable from the view. To sign out:\r\n\r\n    # route\r\n\r\n    delete 'signout', to: 'sessions#destroy', as: :logout\r\n\r\n    # sessions_controller\r\n\r\n    def destroy\r\n      session[:user_id] = nil\r\n      redirect_to root_url, notice: 'Signed out!'\r\n    end\r\n\r\nAlso prepare a route to handle auth failure\r\n\r\n    get 'auth/failure', to: redirect('/')\r\n\r\nAdd a line in the initializer to log output\r\n\r\n    OmniAuth.config.logger = Rails.logger\r\n\r\n    Rails.application...\r\n	3	2015-03-31 21:14:42.560871	2015-03-31 21:14:42.560871
74	Install with Tk	install-with-tk	Add required packages:\r\n\r\n    sudo apt-get install tk-dev python-tk\r\n\r\nThen [install pyenv](https://github.com/yyuu/pyenv#installation)\r\n\r\n	8	2015-03-31 21:14:42.611839	2015-03-31 21:14:42.611839
75	Naming	naming	alpha\r\nbeta\r\ndelta\r\nepsilon\r\niota\r\nkappa\r\nlambda\r\nmu\r\nomicron\r\npi\r\nrho\r\nsigma\r\ntau\r\n	1	2015-03-31 21:14:42.659827	2015-03-31 21:14:42.659827
76	SSL with Nginx	ssl-with-nginx	From: (How To Set Up Apache with a Free Signed SSL Certificate on a VPS)[https://www.digitalocean.com/community/tutorials/how-to-set-up-apache-with-a-free-signed-ssl-certificate-on-a-vps] and (Using StartSSL with the latest Nginx on Debian 7)[https://www.linode.com/docs/websites/nginx/startssl-wth-latest-nginx-debian-7]\r\n\r\nFollow instructions for StartSSL.com\r\n\r\n1. Click `Control Panel` from StartSSL Free menu.\r\n2. Choose **Express Signup**\r\n3. Enter personal information\r\n4. Verify with code from email\r\n5. Generate private key using "High" setting\r\n6. Click install\r\n7. Chrome will show a popdown of the installed certificate.\r\n8. Export the certificate by going to Chrome Settings > Advanced Settings > Manage certificates > Your Certificates\r\n\r\n1. Click the `Validations Wizard`.\r\n2. Choose `Web Server SSL`\r\n3. Save the Private Key as ssl.key\r\n4. Add domain and `www` subdomain\r\n5. Save ssl.crt\r\n6. Save `StartCom Root CA (PEM Encoded)` and `Class 1 Intermediate Server CA` from the `Toolbox` pane.\r\n7. Decrypt the private key using `openssl rsa -in ssl.key -out private.key`, the password will be the one you created during the process at startssl.com\r\n8. Upload to your server using `scp {ca.pem,private.key,sub.class1.server.ca.pem,ssl.crt} YOURSERVER:~\r\n9. Create a unified CA certificate file with `cat sub.class1.server.ca.pem >> ca.pem`\r\n10. Create a single file with signed certificate and CA certificates for Nginx with `ssl.crt ca.pem > nginx.crt`\r\n\r\nInstall the certificate in your server config\r\n\r\n    server {\r\n      listen 443 ssl;\r\n      server_name domain.com www.domain.com;\r\n      passenger_enabled on; \r\n      rails_env    production;\r\n      root         /home/ubuntu/sites/app/public;\r\n\r\n      ssl on; \r\n      ssl_certificate /home/username/nginx.crt;\r\n      ssl_certificate_key /home/username/private.key;\r\n\r\n      ssl_session_timeout 5m; \r\n\r\n      ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;\r\n      ssl_ciphers "HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES";\r\n      ssl_prefer_server_ciphers on; \r\n\r\n    # redirect server error pages to the static page /50x.html\r\n      error_page   500 502 503 504  /50x.html;\r\n      location = /50x.html {\r\n        root   html;\r\n      }\r\n    }\r\n\r\nRestart your server and visit it at https://\r\n	7	2015-03-31 21:14:42.708032	2015-03-31 21:14:42.708032
77	String interpolation	string-interpolation	    class Car(object):\r\n        condition = "new"\r\n        def __init__(self, model, color, mpg):\r\n            self.model = model\r\n            self.color = color\r\n            self.mpg   = mpg\r\n        \r\n        def display_car(self):\r\n            return "This is a {} {} with {} MPG.".format(self.color, self.model, str(self.mpg))\r\n    \r\n    my_car = Car("DeLorean", "silver", 88)\r\n    print my_car.display_car()\r\n\r\nAlternatives from [StackOverflow Answer](http://stackoverflow.com/questions/11788472/does-python-has-a-similar-variable-interpolation-like-string-var-in-ruby):\r\n\r\n    # You would do this:\r\n    print "foo is {}".format(bar)\r\n\r\n    # Or this:\r\n    print "foo is {bar}".format(bar=bar)\r\n\r\n    # Or this:\r\n    print "foo is %s" % (bar, )\r\n\r\n    # Or even this:\r\n    print "foo is %(bar)s" % {"bar": bar}	8	2015-03-31 21:14:42.759084	2015-03-31 21:14:42.759084
78	Unique value loop	unique-value-loop	When you need to create a unique value, checking against other values to make sure it isn't already in use:\r\n\r\n    def generate_token\r\n      self.token = loop do\r\n        random_token = SecureRandom.urlsafe_base64(nil, false)\r\n        break random_token unless ModelName.exists?(token: random_token)\r\n      end\r\n    end	2	2015-03-31 21:14:42.81679	2015-03-31 21:14:42.81679
79	Carrier Wave	carrier-wave	*NOTE:* Requires imagemagick (brew install imagemagick)\r\nsudo apt-get install imagemagick libmagickwand-dev\r\n\r\n## Gemfile\r\n\r\n    gem "carrierwave"\r\n    gem "rmagick"\r\n\r\n## Generators\r\n\r\n    rails g uploader image\r\n\r\n    rails g migration add_image_to_paintings image:string\r\n\r\n    rake db:migrate\r\n\r\n## Model\r\n\r\n    class Painting < ActiveRecord::Base\r\n      attr_accessible :gallery_id, :name, :image\r\n      mount_uploader :image, ImageUploader\r\n    end\r\n\r\n## View\r\n\r\nIn the form\r\n\r\n    = form_for @painting, html: { multipart: true } do |f|\r\n    %p\r\n      = f.file_field :image\r\n\r\nIn the "show" template\r\n  \r\n    = image_tag painting.image_url.to_s\r\n\r\n## Inside Image Uploader\r\n\r\nTo resize the image as a thumbnail\r\n\r\n    include CarrierWave::RMagick\r\n\r\n    version :thumb do\r\n      process resize_to_limit: [200, 200]\r\n    end\r\n\r\n### In the view\r\n\r\n    = image_tag painting.image_url(:thumb).to_s\r\n\r\nOR?\r\n\r\n    = image_tag painting.image_url.thumb\r\n\r\n\r\n## To add remote image:\r\n\r\n    = f.label :remote_image_url, "or image URL"\r\n    = f.text_field :remote_image_url\r\n\r\nAlso add `:remote_image_url` to the strong parameters.\r\n\r\n## RSpec\r\n\r\nAdd a `carrierwave.rb` initializer:\r\n\r\n    if Rails.env.test? || Rails.env.cucumber?\r\n      #use different dirs when testing\r\n      CarrierWave::Uploader::Base.descendants.each do |klass|\r\n        next if klass.anonymous?\r\n        klass.class_eval do\r\n\r\n          storage :file\r\n\r\n          def cache_dir\r\n            "#{Rails.root}/spec/support/uploads/tmp"\r\n          end\r\n\r\n          def store_dir\r\n            "#{Rails.root}/spec/support/uploads/#{model.class.to_s.underscore}/#{mounted_as}/#{model.id}"\r\n          end\r\n        end\r\n      end\r\n    end\r\n\r\nClean up after each test in `rails_helper.rb`:\r\n\r\n    config.after(:each) do\r\n      FileUtils.rm_rf(Dir["#{Rails.root}/spec/support/uploads"])\r\n    end\r\n\r\nUse `Rack::Test` to upload test file:\r\n\r\n    file { Rack::Test::UploadedFile.new(File.open("#{Rails.root}/spec/support/test.png")) }\r\n\r\nMake sure test file is in `/spec/support/` directory.	3	2015-03-31 21:14:42.864567	2015-03-31 21:14:42.864567
80	Find Replace Files	find-replace-files	Search multiple files and replace line\r\n\r\n    Dir.glob("**/_form.html.haml") do |filename|\r\n      f = File.read(filename)\r\n      f = f.gsub(/datepicker/,'datetimepicker')\r\n      File.open(filename, "w") { |file| file.puts f }\r\n    end\r\n	2	2015-03-31 21:14:42.91583	2015-03-31 21:14:42.91583
81	Mastering Web Application Development with AngularJS	mastering-web-application-development-with-angularjs	## Chapter 1\r\n\r\n### Meet AngularJS\r\n\r\nAngularJS uses dependency injection to make it easy to assemble an application from smaller, testable services.\r\n\r\n* [Gallery of AngularJS Applications](https://builtwith.angularjs.org/)\r\n* [YouTube Channel](http://www.youtube.com/user/angularjs)\r\n* [Libraries and Extensions](http://ngmodules.org/)\r\n\r\n* Batarang - Chrome developer tool for inspecting AngularJS applications\r\n* [Plunker](http://plnkr.co/) - Similar to jsFiddle\r\n\r\n### AngularJS crash course\r\n\r\nA very basic use of templating:\r\n\r\n    <body ng-app ng-init="name = 'World'">\r\n      <h1>Hello, {{name}}</h1>\r\n    </body>\r\n\r\nTwo-way data binding:\r\n\r\n    <input type="text" ng-model="name">\r\n    <h1>Hello, {{name}}</h1>\r\n\r\nIt's best to break out the init definitions into a controller.\r\n\r\n    # controller:\r\n    HelloCtrl = ($scope) ->\r\n      $scope.name = 'World'\r\n\r\n    # html:\r\n    div ng-controller="HelloCtrl"\r\n\r\nScope exposes the domain model to a view. These are initialized in controllers. Controllers are regular JavaScript functions, which provide properties and methods to $scope. Each $scope is an instance of the Scope class, which has methods to control the lifecycle and propagation. Models are plain JavaScript objects, which can be defined outside of the framework.\r\n\r\nThe `ng-controller` directive actually runs a `Scope.$new()` method to create the scope. Scopes can create a tree-like relationship, rooted at $rootScope. Some directives create child scopes, for example the `ng-repeat` directive. You can visualize the scope hierarchy using the Batarang extension.You can reference the parent scope with `$parent`. Try to avoid this, however, as it strongly links your javascript with the DOM structure. Instead, you could bind the property to an object and not directly on the scope.\r\n\r\n    <body ng-app ng-init="thing = { name : 'World' }">\r\n      <h1>Hello, {{thing.name}}</h1>\r\n\r\nThe `$on` method is available on each scope to register a scope-event handler. For example, we can listen for the `$locationChangeSuccess` event, which is broadcasted from the `$rootScope` instance.\r\n\r\n    $scope.$on('$locationChangeSuccess', function(event, newUrl, oldUrl) {\r\n      // react to location change, such as update breadcrumbs based on newUrl\r\n    })\r\n\r\nIn general, we can find two-way data binding in place of event listening, but there are several events available:\r\n\r\n* emitted(from children) - $includeContentRequested, $includeContentLoaded, $viewContentLoaded\r\n* broadcasted(from parent) - $locationChangeStart, $locationChangeSuccess, $routeUpdate, $routeChangeStart, $routeChangeSuccess, $routeChangeError, $destroy\r\n\r\nScopes are usually brought to life and destroyed by directives, but you can manually create and destroy using `$new()` and `$destroy()` methods on the Scope type.\r\n\r\n#### Declarative template view\r\n\r\nA basic template for a text entry field might look something like this:\r\n\r\n    <div class="container" ng-controller="TextAreaWithLimitCtrl">\r\n      <span ng-class="{'text-warning' : shouldWarn()}">Remaining: {{remaining()}}</span>\r\n      <div class="row">\r\n        <textarea ng-model="message">{{message}}</textarea>\r\n        <div class="row">\r\n          <button ng-disabled="!hasValidLength()" ng-click="send()"></button>\r\n          <button ng-click="clear()"></button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    # JavaScript Controller\r\n      $scope.remaining = ->\r\n        return MAX_LEN - $scope.message.length\r\n      $scope.shouldWarn = ->\r\n        return $scope.remaining() < WARN_THRESHOLD\r\n\r\nYou should avoid manipulating the DOM elements directly from Angular. Also, controllers should not be applied to the global scope, instead attached to a module.\r\n\r\n    angular.module('hello', [])\r\n      .controller 'HelloCtrl', ($scope) ->\r\n        $scope.name = 'World'\r\n\r\n#### Dependency Injection\r\n\r\nAngularJS can manage objects in different ways. As a value:\r\n\r\n    var myMod = angular.module('myMod', []);\r\n    myMod.value('notificationsArchive', new NotificationsArchive());\r\n\r\nObjects registered via this method can't depend on other objects, so this only works for very simple objects.\r\n\r\nYou can also register an object as a service.\r\n\r\n    myMod.service('notificationsService', NotificationsService);\r\n\r\n    var NotificationsService = function(notificationsArchive) {\r\n      this.notificationsArchive = notificationsArchive;\r\n    }\r\n\r\nNow this service is not concerned with dependencies instantiation and can accept any archiving service.\r\n\r\nFactories are more flexible, because they can be used to register any arbitrary object-creating function\r\n\r\n    myMod.factory('notificationsService', function(notificationsArchive) {\r\n      var MAX_LEN = 10;\r\n      var notifications = [];\r\n\r\n      return {\r\n        push: function (notification) {\r\n          var notificationToArchive;\r\n          var newLen = notifications.unshift(notification);\r\n\r\n          // push method can rely on the closure scope now\r\n          if (newLen > MAX_LEN) {\r\n            notificationToArchive = this.notifications.pop();\r\n\r\n            notificationsArchive.archive(notificationToArchive);\r\n          }\r\n        } //, other methods\r\n      }\r\n    })\r\n\r\nThis is the most common method for getting objects into the dependency injection system.\r\n\r\nConstants can also be injected\r\n\r\n    myMod.constant('MAX_LEN', 10);\r\n\r\n    myMod.factory('notificationsService', function(notificationsArchive, MAX_LEN) {});\r\n\r\nAll these methods are just special cases of the generic version, `provider`.\r\n\r\n    myMod.provider('notificationsService', function() {\r\n      var config = {\r\n        maxLen : 10\r\n      };\r\n      var notifications = [];\r\n\r\n      return {\r\n        setMaxLen : function(maxLen) {\r\n          config.maxLen = maxLen || config.maxLen;\r\n        },\r\n\r\n        $get : function(notificationsArchive) {\r\n          return {\r\n            push: function(notification) {\r\n              ...\r\n              if (newLen > config.maxLen) {\r\n                ...\r\n\r\n`provider` must return an object containing the `$get` property, which should return a `service` instance. This makes the `provider` the most versital object creation method. To support providers, the module's lifecycle is split into two phases, configuration and run. Providers are configured during configuration\r\n\r\n    myMod.config(function(notificationsServiceProvider) {\r\n      notifcationsServiceProvider.setMaxLen(5);\r\n    });\r\n\r\nThe run phase is equivalent to the `main` method in other programming languages. However, there is not a single entry point for an AngularJS module. For example, if you wanted to display the application's start time to users:\r\n\r\n    angular.module('upTimeApp', []).run(function($rootScope) {\r\n      $rootScope.appStarted = new Date();\r\n    })\r\n\r\n    # html\r\n    Application started at: {{appStarted}}\r\n\r\nA summary of object creation methods:\r\n\r\n | What gets Registered? | Configuration Phase | Run Phase\r\nConstant | Value | Yes | Yes\r\nVariable | Value | - | Yes\r\nService | New object created by constructor | - | Yes\r\nFactory | New object returned from factory | - | Yes\r\nProvider | A new object created by $get | Yes | -\r\n\r\nServices can be moved into their own modules and then referenced as dependencies on the main module.\r\n\r\n    angular.module('application', ['notifications', 'archive'])\r\n\r\nServices defined in child modules are available for injection into services in parent modules.\r\n\r\n    angular.module('app', ['engines'])\r\n      .factory('car', function ($log, dieselEngine) {})\r\n    angular.module('engines', [])\r\n      .factory('dieselEngine', function() {})\r\n\r\nServices defined on sibling modules are also visible to each other. Services defined with in a child module will over-ride the parent service. Currently, there is no support for **module-private** services.\r\n\r\n## Chapter 2. Building and Testing\r\n\r\n### Build system\r\n\r\nWe will use **grunt.js** build scripts. Tests for AngularJS were written using **Jasmine**, which AngularJS provides various mock objects for. **Karma** is used to run the tests using a browser.\r\n\r\n### Organizing files and folders\r\n\r\nThe file structure will look like this:\r\n\r\n* src\r\n  * app\r\n    * admin\r\n      * projects\r\n      * users\r\n    * dashboard\r\n    * login\r\n    * projects\r\n      * productbacklog\r\n      * sprints\r\n        * tasks\r\n    * projectsinfo\r\n  * assets\r\n    * img\r\n  * common\r\n    * directives\r\n    * resources\r\n    * services\r\n      * authentication\r\n  * less\r\n  * index.html\r\n* test\r\n  * config\r\n  * e2e\r\n    * app\r\n      * admin\r\n  * unit\r\n    * app\r\n      * admin\r\n      * dashboard\r\n    * common\r\n* vendor\r\n* build\r\n* dist\r\n* .gitignore\r\n* LICENSE\r\n* Gruntfile.js\r\n* package.json\r\n\r\nWe will group files together based on resource, so templates and controllers will be grouped together.\r\n\r\n### AngularJS modules and Files\r\n\r\nWe will keep one module per file and chain services to modules.\r\n\r\n    angular.module('admin-projects', [])\r\n      .controller('ProjectsListCtrl', function($scope) {})\r\n      .controller('ProjectsEditCtrl', function($scope) {})\r\n\r\nConfiguration could be done in the module initialization block, but instead we will use `config` chains.\r\n\r\n    angular.module('admin-projects', [])\r\n      .config(function() {})\r\n      .config(function() {})\r\n\r\n### Automated testing\r\n\r\n#### Unit tests\r\n\r\nAn example of a simple unit test:\r\n\r\n    describe 'hello world test', ->\r\n      greeter\r\n      beforeEach ->\r\n        greeter = new Greeter()\r\n\r\n      it 'should say hello to the world', ->\r\n        expect(greeter.say('world')).toEqual 'hello world'\r\n\r\nDescribe is a container for the blocks, whereas it contains the actual test. In addition to `expect` and `toEqual`, Jasmine also provides `toBeTruthy`, `toBeDefined`, and `toContain`, along with several other useful testing examples.\r\n\r\nTest-related extensions and mock objects are available in the `angular-mocks` script. This script is not supposed to be deployed, however. As an example, the `notificationArchive` built in the first chapter could be tested:\r\n\r\n    angular.module 'archive', []\r\n      factory 'notificationsArchive', ->\r\n        archivedNotifications = []\r\n        return\r\n          archive: (notifications) ->\r\n            archivedNotifications.push notification\r\n          , getArchived: ->\r\n            return archivedNotifications\r\n\r\n    # test\r\n    describe 'notifications archive tests', ->\r\n      notificationsArchive = null\r\n      beforeEach module('archive')\r\n      beforeEach inject (_notificationsArchive_) ->\r\n        notificationsArchive = _notificationsArchive_\r\n\r\n      it 'should give access to the archived items', ->\r\n        notification = { msg: 'Old message.' }\r\n        notificationsArchive.archive notification\r\n\r\n        expect notificationsArchive.getArchived\r\n          .toContain notification\r\n\r\nIn this example, the `module` function indicates that the services from a given module should be prepared for the test. The `inject` function injects the service into our test. The use of underscores in `_notificationsArchive_` tells the $injector to retrieve dependencies.\r\n\r\nTesting controllers follows a similar pattern. This controller is responsible for adding and removing the project's team members\r\n\r\n    angular.module 'admin-projects', []\r\n      .controller 'ProjectsEditCtrl', ($scope, project) ->\r\n        $scope.project = project\r\n\r\n        $scope.removeTeamMember = (teamMember) ->\r\n          idx = $scope.project.teamMembers.indexOf teamMember\r\n          if idx >= 0\r\n            $scope.project.teamMembers.splice(idx, 1)\r\n\r\n    # test\r\n    describe 'ProjectsEditCtrl tests', ->\r\n\r\n      $scope = null\r\n      beforeEach module('admin-projects')\r\n      beforeEach inject ($rootScope) ->\r\n        $scope = $rootScope.$new()\r\n\r\n      it 'should remove an existing team member', inject ($controller) ->\r\n        teamMember = {}\r\n        $controller 'ProjectsEditCtrl',\r\n          $scope: $scope,\r\n          project:\r\n            teamMembers: [teamMember]\r\n\r\n        # verify the initial setup\r\n        expect $scope.project.teamMembers\r\n          .toEqual [teamMember]\r\n\r\n        # execute and verify results\r\n        $scope.removeTeamMember teamMember\r\n        expect $scope.project.teamMembers\r\n          .toEqual []\r\n\r\nThe `removeTeamMember` method that we want to test will be defined on a `$scope`, so to test it we need to create a new scope and a new instance of `ProjectsEditCtrl` and link the two. We do this by injecting the `$rootScope` to create a new `$scope` instance, then `$controller` to inject the controller service. Notice how `inject` can be used in the `beforeEach` block as well as in the `it` block.\r\n\r\nThe AngularJS team provides mock objects that make testing asynchronous code easier. For example, testing the `$timeout` service (which is a replacement of the `setTimeout` function):\r\n\r\n    angular.module 'async', []\r\n      .factory 'asyncGreeter', ($timeout, $log) ->\r\n        say: (name, timeout) ->\r\n          $timeout ->\r\n            $log.info "Hello, #{name}!"\r\n\r\n    # test\r\n    describe 'Async Greeter test', ->\r\n      asyncGreeter = null\r\n      $timeout = null\r\n      $log = null\r\n\r\n      beforeEach module 'async'\r\n      beforeEach inject (_asyncGreeter_, _$timeout_, _$log) ->\r\n        asyncGreeter = _asyncGreeter_\r\n        $timeout = _$timeout_\r\n        $log = _$log_\r\n\r\n      it 'should greet the async world', ->\r\n        asyncGreeter.say 'World', 99999999999999\r\n        $timeout.flush()\r\n        expect $log.info.logs\r\n          .toContain ['Hello, World!']\r\n\r\n`$timeout.flush()` simulates an asynchronous event being triggered. Because we aren't depending on JavaScripts `setTimeout`, we don't have to wait for the specified time period to expire.\r\n\r\nThe mock for `$log` simulates a logging statement and stores it for further assertions.\r\n\r\n#### End-to-end Tests\r\n\r\nProtractor is the standard for angularJS end-to-end testing.\r\n\r\n#### Workflow\r\n\r\nTest as often as practicably possible. Karma runner is very quick, and you can specify tests to skip using `xit` or `xdescribe`. You can run a particular suite with `ddescribe` or a test with `iit`.\r\n\r\nDebugging tests with karma run is as simple as adding the `debugger` statement to our tests. You can also print values to the console with `angular.mock.dump(object)`(or simply `dump(object)`).\r\n\r\n## Chapter 3. Communicating with a Backend server.\r\n\r\n### Making XHR and JSONP requests with $http\r\n\r\nThe `$http` service is the basic, all-purpose API for making XHR and JSONP requests. There are dedicated methods for the type of requests available.\r\n\r\n* $http.get(url, config)\r\n* $http.post(url, data, config)\r\n* $http.put(url, data, config)\r\n* $http.delete(url, config)\r\n* $http.head\r\n\r\nThe object returned from `$http` allows for success and error callbacks. `$http` can also be used generically as simply `$http(configObject);`, and parameters can be passed in:\r\n\r\n* method\r\n* url\r\n* params\r\n* headers\r\n* timeout\r\n* cache\r\n* transformRequest, transformResponse (pre/post-process data exchanged)\r\n\r\nAn example of a post request\r\n\r\n    userToAdd =\r\n      name: 'AngularJS Superhero'\r\n      email: 'superhero@angularjs.org'\r\n\r\n    $http.post 'https://api.mongolab.com/api/1/databases/ascrum/collections/user', usersToAdd,\r\n      params:\r\n        apiKey: '43kjh56oiu234456091'\r\n\r\nOutcomes of the request are determined 'success' or 'error' based on the status code. 200 to 299 are considered successful. 3xx codes are redirected, others are errors.\r\n\r\nBrowsers enforce the same-origin security policy, preventing XHR interactions with resources from another protocol, host, or port. JSONP gets around this by setting the foreign server as the source of a `<script>` tag. To do this in angular:\r\n\r\n    $http\r\n      .jsonp 'http://angularjs.org/greet.php?callback=JSON_CALLBACK',\r\n        params:\r\n          name: 'World'\r\n      \r\n      .success (data) ->\r\n        $scope.greeting = data\r\n\r\nAngularJs will generate the callback dynamically. The script tag will look something like this:\r\n\r\n    <script type="text/javascript" src="http://angularjs.org/greet.php?callback=angular.callbacks._k&name=World"></script>\r\n\r\n    # response, upon arrival\r\n    angular.callbacks._k ({"name":"World", "salutation":"Hello", "greeting": "Hello World!"});\r\n\r\nThis trick only works for GET requests. Also, this leaves the application open to several security threats, such as XSS.\r\n\r\n**Cross-origin resource sharing (CORS)** is an attempt to solve these limitations. The server must be configured to accept these CORS requests properly. ( [http://www.html5rocks.com/en/tutorials/cors/](http://www.html5rocks.com/en/tutorials/cors/) )\r\n\r\nCORS is not supported for simple requests in IE8 and 9. The browser sends an `OPTION` request prior to any non-simple request, this is like a handshake mechanism.\r\n\r\nIf neither of these options will work for you, you can use a proxy server.\r\n\r\n### The promise API with $q\r\n\r\nThe Promise API system is intended to make asynchronous programming easier. It is intended to ease function call chaining and error handling, in the way a synchronous environment would.\r\n\r\nIn AngularJS, the `$q` service is a simple way to utalize the Promise API.\r\n\r\n`$q.defer()` returns a **deferred** object, which represents a task that will be completed or fail in the future. It holds a **promise** object and exposes methods to trigger future task completion or failure.\r\n\r\n    it 'should illustrate basic usage of $q', ->\r\n      pizzaOrderFulfillment = $q.defer()\r\n      pizzaDelivered = pizzaOrderFulfillment.promise\r\n\r\n      pizzaDelivered.then pawel.eat, pawel.beHungry\r\n      pizzaOrderFulfillment.resolve 'Margherita'\r\n      $rootScope.$digest()\r\n\r\n      expect $log.info.logs\r\n        .toContain ['Pawel is eating delicious Margherita']\r\n\r\nThe Promise API is composed of two actors, one that controls future task execution and the other depends on the results of the future task execution.\r\n\r\nTo register a callback, the `then(successCallback, errorCallback)` method is used. To signal the future task completion, use `resolve`, or `reject` on an error.\r\n\r\nThe results of promise resolution are propagated as part of the `$digest` cycle, which will be explained in more detail later.\r\n\r\nAn example restaurant service might look like:\r\n\r\n    Restaurant = ($q, $rootScope) ->\r\n      currentOrder = null\r\n\r\n      @takeOrder = (orderedItems) ->\r\n        currentOrder =\r\n          deferred: $q.defer()\r\n          items: orderedItems\r\n        return currentOrder.deferred.promise\r\n\r\n      @deliverOrder = ->\r\n        currentOrder.deferred.resolve currentOrder.items\r\n\r\n      @problemWithOrder = (reason) ->\r\n        currentOrder.deferred.reject reason\r\n        $rootScope.$digest()\r\n\r\nHere's how the API would work in a test:\r\n\r\n    it 'should illustrate promise rejection', ->\r\n      pizzaPit = new Restaurant $q, $rootScope\r\n      pizzaDelivered = pizzaPit.takeOrder 'Capricciosa'\r\n      pizzaDelivered.then pawel.eat, pawel.beHungry\r\n\r\n      pizzaPit.problemWithOrder 'no Capricciosa, only Margherita left'\r\n      expect $log.warn.logs\r\n        .toContain ['Pawel is hungry because: no Capricciosa, only Margherita left']\r\n\r\nMultiple success callbacks are registered and all of them are invoked upon a promise resolution.\r\n\r\n    pizzaDelivered = pizzaPit.takeOrder 'Margherita'\r\n    pizzaDelivered.then pawel.eat, pawel.beHungry\r\n    pizzaDelivered.then pete.eat, pete.beHungry\r\n\r\n    pizzaPit.deliverOrder()\r\n\r\nActions can also be chained.\r\n\r\n    pizzaPit.takeOrder 'Margherita'\r\n      .then(slice).then(pawel.eat)\r\n\r\nIf there is an error at any point, the first catch block will run\r\n\r\n    pizzaPit.takeOrder 'Capricciosa'\r\n      .then(slice).then(pawel.eat, pawel.beHungry)\r\n\r\nHere, `pawel.beHungry` is the first possible error, so if there is an error anywhere in the chain, it will run. This is how the Promise API simulates a recovery in catch block.\r\n\r\n    retry = (reason) ->\r\n      return pizzaPit.takeOrder 'Margherita'\r\n        .then slice\r\n\r\n    pizzaPit.takeOrder 'Capricciosa'\r\n      .then(slice, retry).then(pawel.eat, pawel.beHungry)\r\n\r\nIf recovery is not possible, use the `$q.reject` method.\r\n\r\n    explain = (reason) ->\r\n      return $q.reject 'ordered pizza not available'\r\n\r\n    pizzaPit.takeOrder 'Capricciosa'\r\n      .then(slice, explain).then(pawel.eat, pawel.beHungry)\r\n\r\n`$q.all` makes it possible to start multiple asynchronous task and be notified only when all the tasks complete.\r\n\r\n    ordersDelivered = $q.all [\r\n      pizzaPit.takeOrder 'Pepperoni'\r\n      saladBar.takeOrder 'Fresh Salad'\r\n    ]\r\n\r\nThis accepts an array of promises as the argument, and if one action fails the whole thing will be rejected with the same reason as the individual promise that failed.\r\n\r\n`$q.when` will wrap any JavaScript object as a promise. This is good for a time when asynchronous and synchronous actions are working together, and you want to treat them all as asynchronous.\r\n\r\n    ordersDelivered = $q.all [\r\n      pizzaPit.takeOrder 'Pepperoni'\r\n      $q.when 'home made salad'\r\n    ]\r\n\r\nThis returns a promise that is resolved with the value supplied as an argument.\r\n\r\nPromises can also be applied directly to the scope, but this is not recommended.\r\n\r\n    $scope.name = $timeout ->\r\n      return "World"\r\n    , 2000\r\n\r\nThis will return 'World' to the view after 2 seconds. However if you wrap this property in a function it will not run as expected.\r\n\r\n### The promise API with $http\r\n\r\n`$http` services are resolved just like promises, with success and error callbacks available.\r\n\r\n    responsePromise = $http.get 'data.json'\r\n    responsePromise.then (response) ->\r\n      $scope.data = response.data\r\n    , (response) ->\r\n      throw new Error 'Something went wrong...'\r\n\r\n### Communicating with RESTful endpoints\r\n\r\nThe `$resource` service is useful for interacting with RESTful endpoints\r\n\r\n    angular.module 'resource', ['ngResource']\r\n      .factory 'Users', ($resource) ->\r\n        return $resource 'https://api.mongolab.com/api/1/databases/ascrum/collections/users/:id',\r\n          apiKey: 'someKey'\r\n          id: '@_id.$oid'\r\n\r\nHere, we register a `factory` for the `User` consturctor function. The `$resource` service prepares it's CRUD implementation. We can then write `Users.query()` to receive a list of data, as well as other constructor methods like `get`, `save`, and `delete`.\r\n\r\nThe `$resource`'s first argument contains a URL pattern, which can have placeholders for dynamic values. Only one URL pattern can be specified, so the URLs should be similar. The second argument can be parameters for the query. Dynamic parameters can be taken from the resource objects, specified by a `@` character.\r\n\r\nThe constructor methods can also be used at the instance level.\r\n\r\n    Users.delete {}, user\r\n    # equivalent to\r\n    user.$delete()\r\n\r\n    Users.save user\r\n    # equivalent to\r\n    user.$save()\r\n\r\nYou can define custom methods for REST APIs that support others, such as `PUT` or `PATCH`\r\n\r\n    .factory 'Users', ($resource) ->\r\n      return $resource 'url',\r\n        apiKey: 'someKey'\r\n        id: '@_id.$oid'\r\n      ,\r\n        update:\r\n          method: 'PUT'\r\n\r\nThe third parameter is defining a new action, `update`. This can receive an object in this format:\r\n\r\n    action: { method: ?, params: ?, isArray: ?, headers: ? }\r\n\r\nWe can add new behavior to the resource objects be extending the prototype\r\n\r\n    .factory 'Users', (resource) ->\r\n      # ...\r\n\r\n      Users::getFullName = ->\r\n        return "#{@firstName} #{@lastName}"\r\n\r\n      Users\r\n\r\n*NOTE:* CoffeeScript symbol `::` is equivalent to `.prototype.\r\n\r\nThe call to resource constructor methods is asynchronous, so something like this wont work:\r\n\r\n    $scope.users = Users.query()\r\n    console.log $scope.users.length\r\n\r\nHowever, using callbacks you can get this to work as expected\r\n\r\n    User.query (users) ->\r\n      $scope.users = users\r\n      console.log $scope.users.length\r\n\r\nYou can create a fully customized `$resource` service using `$http` services.\r\n\r\n    angular.module 'mongolabResource', []\r\n      .factory 'mongolabResource', ($http, MONGOLAB_CONFIG) ->\r\n        return (collectionName) ->\r\n          # basic configuration\r\n          collectionUrl = "url#{MONGOLAB_CONFIG.DB_NAME}/collections/#{collectionName}"\r\n          defaultParams =\r\n            apiKey: MONGOLAB_CONFIG.API_KEY\r\n\r\n          # utility methods\r\n          getId = (data) ->\r\n            return data._id.$oid\r\n\r\n          # constructor for new resources\r\n          Resource = (data) ->\r\n            angular.extend this, data\r\n\r\n          Resource.query = (params) ->\r\n            return $http.get collectionUrl,\r\n              params: angular.extend\r\n                q: JSON.stringify {} || params\r\n              , defaultParams\r\n                .then (response) ->\r\n                  result = []\r\n                  angular.forEach response.data, (value, key) ->\r\n                    result[key] = new Resource value\r\n                  return result\r\n\r\n          Resource.save = (data) ->\r\n            return $http.post collectionUrl, data, {params: defaultParams}\r\n              .then (response) ->\r\n                return new Resource data\r\n\r\n          Resource::$save = (data) ->\r\n            return Resource.save this\r\n\r\n          Resource.remove = (data) ->\r\n            return $http.delete collectionUrl + '', defaultParams\r\n              .then (response) ->\r\n                return new Resource data\r\n\r\n          Resource::$remove = (data) ->\r\n            return Resource.remove this\r\n\r\n          # other CRUD methods\r\n\r\n          # convenience methods\r\n          Resource::$id = ->\r\n            return getId this\r\n\r\n          Resource\r\n\r\nPromise chaining is used heavily in this example. To use this example:\r\n\r\n    angular.module 'customResourceDemo', ['mongolabResource']\r\n      .constant 'MONGOLAB_CONFIG',\r\n        DB_NAME : 'ascrum'\r\n        API_KEY : 'someKey'\r\n\r\n      .factory 'Users', (mongolabResource) ->\r\n        return mongolabResource('users')\r\n\r\n      .controller 'CustomResourceCtrl', ($scope, Users, Projects) ->\r\n        Users.query().then (users) ->\r\n          $scope.users = users\r\n\r\n### Using advanced features of $http\r\n\r\nThe `$http` service allows us to register interceptors that will be executed around each request. For example, retrying a failed request would look like this:\r\n\r\n    angular.module 'httpInterceptors', []\r\n      .config ($httpProvider) ->\r\n        $httpProvider.responseInterceptors.push 'retryInterceptor'\r\n\r\n      .factory 'retryInterceptor', ($injector, $q) ->\r\n        return (responsePromise) ->\r\n          return responsePromise.then null, (errResponse) ->\r\n            if errResponse.status == 503\r\n              return $injector.get('$http')(errResponse.config)\r\n            else\r\n              return $q.reject(errResponse)\r\n\r\nAn interceptor accepts a promise and should return a promise resolving the intercepted result. Here, we check for `errResponse.status` then run a new `$http` call with the same configuration. If we can't handle the error, it propogates to the reject method.\r\n\r\n### Testing code that interacts with $http\r\n\r\nFor testing, we swap the `$http` dependency called `$httpBackend` with a mock service.\r\n\r\n    describe '$http basic', ->\r\n\r\n      $http = null\r\n      $httpBackend = null\r\n      $scope = null\r\n      ctrl = null\r\n      \r\n      beforeEach module 'test-with-http-backend'\r\n      beforeEach inject (_$http_, _$httpBackend_) ->\r\n        $http = _$http_\r\n        $httpBackend = _$httpBackend_\r\n\r\n      beforeEach inject (_$rootScope_, _$controller_) ->\r\n        $scope = _$rootScope_.$new()\r\n        ctrl = _$controller_('UsersCtrl'),\r\n          $scope : $scope\r\n\r\n      it 'should return all users', ->\r\n        # setup expected requests and responses\r\n        $httpBackend.whenGET 'http://localhost:3000/databases/ascrum/collections/users'\r\n          .respond [ {name: 'Pawel'}, {name: 'Peter'} ]\r\n\r\n        # invoke code under test\r\n        $scope.queryUsers()\r\n\r\n        # simulate response\r\n        $httpBackend.flush()\r\n\r\n        # verify results\r\n        expect $scope.users.length\r\n          .toEqual 2\r\n\r\n      afterEach ->\r\n        $httpBackend.verifyNoOutstandingExpectation()\r\n        $httpBackend.verifyNoOutstandingRequest()\r\n\r\nUsing `whenGET` we can prepare fake responses with `respond`. By using `flush()`, we can simulate HTTP response arriving from a back-end at a chosen moment.\r\n\r\n## Chapter 4 - Displaying and Formatting Data\r\n\r\n### Referencing directives\r\n\r\nDirectives are index under a camel cased name, like `ngModel`. When referenced in the template, it can be any of: `ng-model`, `ng:model`, `ng_model`, `data-ng-model`. The data prefix will pass HTML5 validations.\r\n\r\n### Displaying results of expression evaluation\r\n\r\nThe delimeter used to render AngularJS expressions is configurable. If you want to use square brackets instead of curly:\r\n\r\n    myModle.config ($interpolateProvider) ->\r\n      $interpolateProvider.startSymbol '[['\r\n      $interpolateProvider.endSymbol ']]'\r\n\r\nIf an expression needs to be hidden until AngularJS has a chance to process them, you can use `ng-bind`\r\n\r\n    <span ng-bind="expression"></span>\r\n\r\nIf your model contains HTML markup that needs to be evaluated, us `ng-bind-html-unsafe`.\r\n\r\n    <p ng-bind-html-unsafe="msg"></p>\r\n\r\nEnsure that malicious users are not able to put anything dangerous in this variable. As an alternative, you can sanitize *some* HTML tags with `ng-bind-html`. This uses a separate module, `ngSanitize`, so you will need to include that in your dependencies.\r\n\r\n    <p ng-bind-html="msg"></p>\r\n\r\n    # js\r\n    angular.module 'expressionEscaping', ['ngSanitize']\r\n\r\n### Conditional display\r\n\r\n`ng-show/ng-hide` simple apply `display: none` to hide DOM elements. If you want them to be removed, use the `ng-switch` directives, which creates a new scope.\r\n\r\n    <div ng-switch on="showSecret">\r\n      <div ng-switch-when="true">Secret</div>\r\n      <div ng-switch-default>Won't show my secrets!</div>\r\n    </div>\r\n\r\nThis can get quite verbose, so for simple uses you can just use `ng-if`. `ng-include` can also be used to conditionally display sections of content. This example would display different edit forms depending on the user's role:\r\n\r\n    <div ng-include="user.admin && 'edit.admin.html' || 'edit.user.html'"></div>\r\n\r\n\r\n### Rendering collections with the ngRepeat directive\r\n\r\nThe `ng-repeat` directive has access to some custom variables for access to the object and it's records. `$index` will be the index of an element in the collection. `$first`, `$middle`, and `$last` get boolean values according to the element's position.\r\n\r\nAn example of using the `$last` variable with a `ng-switch` directive\r\n\r\n    <li ng-repeat="breadcrumb in breadcrumbs.getAll()">\r\n      <span class="divider">/</span>\r\n      <ng-switch on="$last">\r\n        <span ng-switch-when="true">{{breadcrumb.name}}</span>\r\n        <span ng-switch-default>\r\n          <a href="{{breadcrumb.path}}">{{breadcrumb.name}}</a>\r\n        </span>\r\n      </ng-switch>\r\n    </li>\r\n\r\nYou can iterate over specific properties of your collection\r\n\r\n    <li ng-repeat="(name, value) in user">\r\n      Property {{$index}} with {{name}} has value {{value}}\r\n    </li>\r\n\r\nIn this way, we can still use the `$index` variable, but there is no control over sorting. If you want control, include an additional property to sort by and presort the collection.\r\n\r\nHere's another example using ng-repeat and ng-switch.\r\n\r\n    <table class="table table-bordered" ng-controller="ListAndOneDetailCtrl">\r\n      <tbody ng-repeat="user in users" ng-click="selectUser(user)" ng-switch-on="isSelected(user)">\r\n        <tr>\r\n          <td>{{user.name}}</td>\r\n          <td>{{user.email}}</td>\r\n        </tr>\r\n        <tr ng-switch-when="true">\r\n          <td colspan="2">{{user.desc}}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n\r\nWhen you click, the user description becomes visible. A simple controller for this would be:\r\n\r\n    .controller 'ListAndOneDetailCtrl', ($scope, users) ->\r\n      $scope.users = users\r\n\r\n      $scope.selectUser = (user) ->\r\n        $scope.selectedUser = user\r\n\r\n      $scope.isSelected = (user) ->\r\n        return $scope.selectedUser == user\r\n\r\nIf we wanted to apply a new property on each item in the list, we could restructure the code to use `ng-controller` in each item.\r\n\r\n    <tbody ng-repeat="user in users" ng-controller="UserCtrl" ng-click="toggleSelected()" ng-switch on="isSelected()">\r\n\r\nThen in the controller:\r\n\r\n    .controller 'UserCtrl', ($scope) ->\r\n      \r\n      $scope.toggleSelected = ->\r\n        $scope.selected = !$scope.selected\r\n\r\n      $scope.isSelected = ->\r\n        return $scope.selected\r\n\r\nAngular includes `ngClassEven` and `ngClassOdd` directives for easy zebra striping. You could also do it manually with the `ng-class` directive.\r\n\r\n    <tr ng-repeat="user in users" ng-class-even="'light-gray'" ng-class-odd="'dark-gay'">\r\n\r\n    # or\r\n\r\n    <tr ng-repeat="user in user" ng-class="{'dark-gray' : !$index%2, 'light-gray' : $index%2}">\r\n\r\n### DOM event handlers\r\n\r\nThe `ng-click` directive handles mouse click events. There are several similar actions:\r\n\r\n* ngClick / ngDblClick\r\n* ngMousedown, ngMouseup, ngMouseenter, ngMouseleave, ngMousemove, ngMouseover\r\n* ngKeydown, ngKeyup, ngKeypress\r\n* ngChange - Cooperates with ngModel to react to model changes initiated by user input.\r\n\r\nThese events can handle a special `$event` argument, which represents the raw DOM event.\r\n\r\n    <li ng-repeat="item in items" ng-click="logPosition(item, $event)">{{item}}</li>\r\n\r\n    # controller\r\n\r\n    $scope.logPosition = (item, $event) ->\r\n      console.log "#{item} was clicked at: #{$event.clientX}, #{$event.clientY}"\r\n\r\n### Working effectively with DOM-based templates\r\n\r\nThere are some inconvenient situations with DOM templates. Nothing really unusual. Using ngRepeat over multiple elements has been a challenge, but in more recent versions of angular, you should be able to do this:\r\n\r\n    <li ng-repeat-start="item in items">\r\n      <strong>{{item.name}}</strong>\r\n    </li>\r\n    <li ng-repeat-end>{{item.description}}</li>\r\n\r\nUnfortunately, you can't modify the type of an input element after the page has loaded. This may be a problem in only some browsers, but you can get around this using `ng-include` to encapsulate templates\r\n\r\n    <ng-include src="'input'+myinput.type+'.html'"></ng-include>\r\n\r\n### Handling model transformations with filters.\r\n\r\nAngularJS provides some convenience methods for expressions.\r\n\r\n    {{ user.signedUp | date: 'yyyy-MM-dd'}}\r\n    # is equivalent to:\r\n    {{ formatDate(user.signedUp, 'yyyy-MM-dd')}}\r\n\r\nThese kinds of methods and filters can be chained\r\n\r\n    {{ myLongString | limitTo:80 | lowercase }}\r\n\r\nHere, `limitTo` limits the number of characters rendered. Here are some of the built-in formatting filters:\r\n\r\n* currency\r\n* date\r\n* number (specify decimal places)\r\n* lowercase / uppercase\r\n* json (useful for debugging, ensures pretty-print of JSON. Often used as `<pre>{{someObject | json}}</pre>`)\r\n\r\nThere are also some filters for operating on arrays:\r\n\r\n* limitTo - limits from beginning or end of an array (use negative for end)\r\n* Filter - general purpose filtering\r\n* orderBy - Sort individual elements based on provided criteria\r\n\r\nA simple filter can be used to filter a collection using `ng-model`\r\n\r\n    <div class="well"><label>\r\n      Search for: <input type="text" ng-model="criteria">\r\n    </label></div>\r\n    <table class="table table-bordered">\r\n      <thead>\r\n        <th>Name</th>\r\n        <th>Description</th>\r\n      </thead>\r\n      <tbody>\r\n        <tr ng-repeat="backlogItem in backlog | filter:criteria">\r\n          <td>{{backlogItem.name}}</td>\r\n          <td>{{backlogItem.desc}}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n\r\nThis will filter all all the properties in our model. More process control can be used with:\r\n\r\n    ng-repeat="item in backlog | filter: {name: criteria, done: false}"\r\n\r\nIn this snippet, all conditions must match (uses AND type operator by default). The `$` can be used as a wildcard for all properties, such as: `filter: {$: criteria, done: false}`.\r\n\r\nWe could also provide a function if the criteria get too specific.\r\n\r\n    $scope.doneAndBigEffort = (backlogItem) ->\r\n      return backlogItem.done && backlogItem.estimation > 20\r\n\r\n    # in the view\r\n    ng-repeat="item in backlog | filter: doneAndBigEffort\r\n\r\nIf we want to get a count of this filtered list, we can create an intermediate variable to hold the array\r\n\r\n    ng-repeat="item in filteredBacklog = (backlog | filter:{$: criteria, done: false})\r\n    Total: {{filteredBacklog.length}}\r\n\r\nYou could also do this in the controller, if the filtering can be done there.\r\n\r\nYou can create quick sorting:\r\n\r\n    <thead>\r\n      <th ng-click="sort('name')">Name</th>\r\n      <th ng-click="sort('description')">Description</th>\r\n    </thead>\r\n    <tbody>\r\n      <tr ng-repeat="item in filteredBacklog = (backlog | filter: criteria | orderBy:sortField:reverse)">\r\n        <td>{{item.name}}</td>\r\n        <td>{{item.desc}}</td>\r\n      </tr>\r\n    </tbody>\r\n\r\nHere, the `orderBy` filter takes two arguments. `sortField` as the property for sorting, and `reverse`, to indicate the sorting should be reversed. The `sort` function is actually in our controller.\r\n\r\n    $scope.sortField = undefined\r\n    $scope.reverse = false\r\n\r\n    $scope.sort = (fieldName) ->\r\n      if $scope.sortField == fieldName\r\n        $scope.reverse = !$scope.reverse\r\n      else\r\n        $scope.sortField = fieldName\r\n        $scope.reverse = false\r\n\r\nTo get the sort direction working, we would want to add some additional functions.\r\n\r\n    <th ng-click="sort('name')">Name\r\n    <i ng-class="{'icon-chevron-up': isSortUp('name'), 'icon-chevron-down': isSortDown('name')}"></i>\r\n    </th>\r\n\r\n    # controller\r\n    $scope.isSortUp = (fieldName) ->\r\n      return $scope.sortField == fieldName && !$scope.reverse\r\n\r\n    $scope.isSortDown = (fieldName) ->\r\n      return $scope.sortField == fieldName && $scope.reverse\r\n\r\nTo support pagination, we can create a new filter.\r\n\r\n    <tr ng-repeat="item in filteredBacklog = (backlog | pagination:pageNo:pageSize)">\r\n      <td>{{item.name}}</td>\r\n    </tr>\r\n\r\nA very basic version of the filter might be:\r\n\r\n    angular.module 'arrayFilters', []\r\n      .filter 'pagination', ->\r\n        return (inputArray, selectedPage, pageSize) ->\r\n          start = selectedPage*pageSize\r\n          return inputArray.slice start, start + pageSize\r\n\r\nFilters can easily be unit tested:\r\n\r\n    describe 'pagination filter', ->\r\n      paginationFilter = null\r\n      beforeEach module 'arrayFilters'\r\n      beforeEach inject (_paginationFilter_) ->\r\n        paginationFilter = _paginationFilter_\r\n\r\n      it 'should return a slice of the input array', ->\r\n        input = [1, 2, 3, 4, 5, 6]\r\n\r\n        expect paginationFilter input, 0, 2\r\n          .toEqual [1, 2]\r\n        expect paginationFilter input, 2, 2\r\n          .toEqual [5, 6]\r\n\r\n      it 'should return empty array for out-of bounds', ->\r\n        input = [1, 2]\r\n\r\n        expect paginationFilter input, 2, 2\r\n          .toEqual []\r\n\r\nWe can also inject filters into other services, allowing us to combine and enhance them further. We just have to inject the `$filter` service and any filter will be available based on its name.\r\n\r\n    angular.module 'trimFilter', []\r\n      .filter 'trim', ($filter) ->\r\n        limitToFilter = $filter 'limitTo'\r\n\r\n        return (input, limit) ->\r\n          if input.length > limit\r\n            return limitToFilter(input, limit-3) + '...'\r\n\r\n          return input\r\n\r\nHere, the filter happens to be called `limitTo`, which is why we can get access to it with `limitToVilter = $filter 'limitTo'`. However, filters could also be found dynamically.\r\n\r\n    .filter('trim', (limitToFilter) ->\r\n\r\nYou should avoid adding HTML markup to your filter. Most problems that might lead you to this could be better solved with custom directives. You should also generating putting random values in your filter.\r\n\r\n## Chapter 5 - Creating Advanced Forms\r\n\r\n### Comparing traditional forms with AngularJS form\r\n\r\nYou can use `ng-bind` for one way binding, or `ng-model` for two way binding.\r\n\r\n    <div>Hello <span ng-bind="name"/></div>\r\n    <div>Hello <span ng-model="name"/></div>\r\n\r\n### Creating a User Information Form\r\n\r\nUsing `ng-model` is more useful when it comes to forms. For simple forms with no validation, we don't need to use the html `form` tag.\r\n\r\n    <h1>User Info</h1>\r\n    <label>Email</label>\r\n    <input type="email" ng-model="user.email">\r\n    \r\n### Understanding the input directives\r\n\r\nText-based directives allow you to specify length and regular expression matching.\r\n\r\n    <input type="password" ng-model="user.password"\r\n      ng-minlength="3" ng-maxlength="10"\r\n      ng-pattern="/^.*(?=.*\\d)(?=.*[a-zA-Z]).*$/">\r\n\r\nYou can specify alternative values for checkbox input\r\n\r\n    <input type="checkbox" ng-model="user.role" ng-true-value="admin" ng-false-value="basic">\r\n\r\nYou can input options for a select box statically or dynamically.\r\n\r\n    <select ng-model="sex">\r\n      option value="m" ng-selected="sex=='m'">Male</option>\r\n\r\nThe `ng-options` tag can be used with an `optionBinding` expression or a `dataSource` expression. Data sources can be used in several ways.\r\n\r\n    # set user.email as label\r\n    ng-options="user.email for user in users"\r\n    # computed label\r\n    ng-options="getFullName(user) for user in users"\r\n    # Select user's email rather than whole object, using full name as label\r\n    ng-options="user.email as getFullName(user) for user in users"\r\n    # Select user object with list grouped by sex\r\n    ng-options="getFullName(user) group by user.sex for user in users"\r\n    # with a list sorted by country code, select code by name:\r\n    ng-options="code as name for (code, name) in countriesByCode"\r\n    # select country code by name, ordered by country name\r\n    ng-options="code as name for (name, code) in countriesByName"\r\n\r\nThe general syntax is:\r\n\r\n    value as label group by grouping\r\n\r\nYou can add an empty object as an option within the select box\r\n\r\n    <select id="" name=""><option value="">-- No Selection --</option></select>\r\n\r\nThe `select` directive matches using the *object equivalence operator* (`===`). So if your option values are objects, not values, you have to use a reference object to the actual option value.\r\n\r\nThere is no option for hidden input fields, but you can simply use `ng-init` on the form tag for values that come from the server.\r\n\r\n    <form ng-init="user.hash='13513516'">\r\n\r\nIf you want to select multiple items, just add the `multiple` attribute to the select directive.\r\n\r\n### Looking inside ngModel data binding\r\n\r\nThe ngModel directive creates an instance of `ngModelController`, which tracks changes and valid values.\r\n\r\n### Validating AngularJS forms\r\n\r\nEach `form` or `ngForm` creates an instance of `ngFormController`. This works with `ngModelController` to track `ngModel` fields within the form. To make the `ngFormController` accessible from the local scope, give the form a name. Any input elements within the form will be attached to this controller. We can the use values like `$invalid` and `$dirty` for styling and UI elements.\r\n\r\nFor example, we can show error messages for inputs and the form as a whole if something isn't valid.\r\n\r\n    <form name="userInfoForm">\r\n      <div class="control-group" ng-class="getCssClasses(userInfoForm.email)">\r\n        <label for="">E-mail</label>\r\n        <input type="email" ng-model="user.email" name="email" required="">\r\n        <span ng-show="showError(userInfoForm.email, 'email')">You must enter a valid email</span>\r\n        <span ng-show="showError(userInfoForm.email, 'required'">This field is required</span>\r\n      </div>\r\n    </form>\r\n\r\n    # controller\r\n\r\n    app.controller 'MainCtrl, ($scope) ->\r\n      $scope.getCssClasses = (ngModelController) ->\r\n        return {\r\n          error: ngModelController.$invalid && ngModelController.$dirty\r\n          success: ngModelController.$valid && ngModelController.$dirty\r\n        }\r\n\r\n      $scope.showError = (ngModelController, error) ->\r\n        return ngModelController.$error[error]\r\n\r\nYou can also disable the submit button until the form is ready to save.\r\n\r\n    <button ng-disabled="!canSave()">Save</button>\r\n\r\n    # controller\r\n\r\n    $scope.canSave = ->\r\n      return $scope.userInfoForm.$dirty && $scope.userInfoForm.$valid\r\n\r\nYou may also want to apply `novalidate` to the form tag.\r\n\r\n### Nesting forms in other forms\r\n\r\nAngularJS forms can be nested, but you should us the `ngForm` directive to avoid invalid HTML warnings.\r\n\r\n    <script type="text/ng-template" id="password-form">\r\n      <ng-form name="passwordForm">\r\n        <div ng-show="user.password != user.password2">Passwords don't match</div>\r\n        <label>Password</label>\r\n        <input type="password" ng-model="user.password" required="">\r\n        <label>Confirm Password</label>\r\n        <input type="password" ng-model="user.password2" required="">\r\n      </ng-form>\r\n    </script>\r\n    \r\n    <form name="form1" novalidate>\r\n      <legend>User Form</legend>\r\n      <label>Name</label>\r\n      <input ng-model="user.name" >\r\n      <ng-include src="'password-form'"></ng-include>\r\n    </form>\r\n\r\nHere we use a partial template, which could also exist in another file.\r\n\r\n### Repeating subforms\r\n\r\nYou can use this subform technique with a repeater to create a list of inputs.\r\n\r\n    <label for="">Websites</label>\r\n    <div ng-repeat="website in user.websites">\r\n      <input type="url" ng-model="website.url">\r\n      <button ng-click="remove($index)">X</button>\r\n    </div>\r\n    <button ng-click="add()">Add a Website</button>\r\n\r\n    # controller\r\n\r\n    app.controller 'MainCtrl', ($scope) ->\r\n      $scope.user = {\r\n        websites: [\r\n          { url: 'http://www.bloggs.com'},\r\n          {url: 'http://www.jo-b.com'}\r\n        ]\r\n      }\r\n\r\n      $scope.remove = (index) ->\r\n        $scope.user.websites.splice(index, 1)\r\n\r\n      $scope.add = ->\r\n        $scope.user.websites.push {url: ''}\r\n\r\n\r\nIn order to give input a dynamically generated name, we need to use nested forms.\r\n\r\n    <div ng-repeat="website in user.websites" ng-form="websiteForm">\r\n      <input type="url" name="website" ng-model = "website.url">\r\n      <button ng-click="remove($index)">X</button>\r\n      <span ng-show="showError(websiteForm.website, 'url')">Must be valid url</span>\r\n      ...\r\n    </div>\r\n\r\n    # controller\r\n    app.controller 'MainCtrl', ($scope) ->\r\n      $scope.showError = (ngModelController, error) ->\r\n        return ngModelController.$error[error]\r\n\r\n### Handling traditional HTML form submission\r\n\r\nIf you need to handle traditional form submission, just use an action like normal. If you don't, AngularJS will look for a function on the scope and prevent the form from submitting directly to the server. You can use `ngSubmit` or `ngClick` to handle client-side submission.\r\n\r\n    form ng-submit="showAlert(q)"\r\n      input ng-model="q"\r\n\r\n    # using ngClick\r\n    form\r\n      input ng-model="q"\r\n      button ng-click="showAlert(q)" Search\r\n\r\n### Resetting the User Info form\r\n\r\nTo cancel submission and return to the original state, you will need to store the original object\r\n\r\n    form name="userInfoForm"\r\n      button ng-click="revert()" ng-disabled="!canRevert()" Revert Changes\r\n\r\n    # controller\r\n\r\n    original = angular.copy($scope.user)\r\n\r\n    $scope.revert = ->\r\n      $scope.user = angular.copy original\r\n      $scope.passwordRepeat = $scope.user.password\r\n      $scope.userInfoForm.$setPristine()\r\n\r\n    $scope.canRevert = ->\r\n      return !angular.equals $scope.user, original\r\n\r\n\r\n## Chapter 6 - Organizing Navigation:\r\n\r\n### URLs in single-page web applications\r\n\r\nAnything inserted after a `#` character will not reload the current page. The history of the browser is stored in a `window.history` object. This is used to drive the brower's back/forward buttons. HTML5 introduces a `History API`, (unavailable in IE prior to 10). Using `history.pushState`, we can simulate visiting external resources without actually going to the server. `window.onpopstate` is an event used to observe changes in the history stack to drive changes in the application's state. In this way we can create urls without the `#` character, but the server will need to be set up correctly to handle this.\r\n\r\n### Using the $location service\r\n\r\nThe $location API opens up several available methods\r\n\r\n* $location.url() - /admin/users/list?active=true#bottom\r\n* $location.path() - /admin/users/list\r\n* $location.search() - {active: true}\r\n* $location.hash() - Bottom\r\n\r\nIf you are getting the value, leave the arguments blank. If you are setting the value, include arguments, such as `$location.hash('top')`. There are other available methods to get more details, but they can't be used as *setters*.\r\n\r\n* protocol()\r\n* host()\r\n* port()\r\n* absUrl()\r\n\r\nIn a single-page app, you can still use `#` to navigate to a place on the page. To do this, use the `$anchorScroll` service to avoid conflicts with the potential use of `#` to navigate pages. You can also opt out of automatic URL fragment monitoring with `disableAutoScrolling()`.\r\n\r\n    [module].config ($anchorScrollProvider) ->\r\n      $anchorScrollProvider.disableAutoScrolling()\r\n\r\nThen you will have manual control over scrolling.\r\n\r\n#### HTML5 mode for URLs\r\n\r\nIf you want to set up your server to not need an additional `#`, you can turn on `html5Mode` in your angular app.\r\n\r\n    [module].config ($locationProvider) ->\r\n      $locationProvider.html5Mode true\r\n\r\nOn the server side, we need to set up all requests to go to the web application's start page. It may be useful to prefix your urls based on their resource category. For example, static resources start with `/static` and data manipulation is done with `/databases`. Then set up other URLs to redirect to `index.html`.\r\n\r\n#### Structuring routes\r\n\r\nA very simple way to define routes would be to set up `ngInclude` directives with different templates.\r\n\r\n    # index.html\r\n\r\n    <div class="nav">\r\n      <li><a href="#/admin/users/list">List users</a></li>\r\n      <li><a href="#/admin/users/new">New user</a></li>\r\n    </div>\r\n    <div class="container-fluid" ng-include="selectedRoute.templateUrl"></div>\r\n\r\n    # controller\r\n\r\n    .controller 'NavigationCtrl', ($scope, $location) ->\r\n      routes = {\r\n        '/admin/users/list': {templateUrl: 'tpls/users/list.html' },\r\n        '/admin/users/new': {templateUrl: 'tpls/users/new.html' },\r\n        '/admin/users/edit': {templateUrl: 'tpls/users/edit.html' }\r\n      }\r\n      defaultRoute = routes['/admin/users/list']\r\n\r\nWe'll need to synchronize the active route with the current URL by watching the path component\r\n\r\n    $scope.$watch ->\r\n      return $location.path\r\n    , (newPath) ->\r\n      $scope.selectedRoute = routes[newPath] || defaultRoute\r\n\r\nThis watches the `$location.path` for changes, and updates `selectedRoute` when it does.\r\n\r\n### Using built-in AngularJS routing services\r\n\r\nWe can do a lot with the hand-built routing we set up, but AngularJS provides a more robust solution. You'll need to include `angular-route.js` and the `ngRoute` module to use it.\r\n\r\n    [module].config ($routeProvider) ->\r\n      $routeProvider\r\n        .when 'admin/users/list',\r\n          templateUrl: 'tpls/users/list.html\r\n        .when 'admin/users/new',\r\n          templateUrl: 'tpls/users/new.html'\r\n        .when 'admin/users/:id',\r\n          templateUrl: 'tpls/users/edit.html'\r\n        .otherwise {redirectTo: '/admin/users/list'}\r\n\r\nThese routes cannot be changed at runtime. We then specify where to use the template with the `ng-view` directive\r\n\r\n    <div class="container-fluid" ng-view></div>\r\n\r\nIf we want to match routes with a variable element included, just add it with `:`.\r\n\r\n    .when '/admin/users/:userid'\r\n\r\nYou can also use `*id` to match parameters that contain slashes. Parameters set with `:` or `*` can be accesswed with the `$routeParams` service through the controller.\r\n\r\n    controller 'EditUserCtrl', ($scope, $routeParams, Users) ->\r\n      $scope.user = Users.get {id: $routeParams.userid}\r\n\r\nYou can also define a controller when setting the route.\r\n\r\n    .when '/admin/users/:userid',\r\n      templateUrl: 'tpls/users/edit.html'\r\n      controller: 'EditUserCtrl'\r\n\r\nBy default, Angular will match a route and render the partial even if the data isn't ready yet, which may appear to flicker. You may instead want the redraw to wait until everything is ready. You can do this with `resolve`.\r\n\r\n    controller: 'EditUserCtrl', resolve:\r\n      user: ($route, Users) ->\r\n        return Users.getById($route.current.params.userid)\r\n\r\nThis allows you to create a value, object or promise that will prevent route change until the promise is resaolved. These route specific variables can then be injected into the controller.\r\n\r\n    .controller 'EditUserCtrl', ($scope, user) ->\r\n      $scope.user = user\r\n\r\nIf the resolve promise is rejected, AngularJS will cancel the route navigation and cancel the UI. This may cause the URL bar to get out of sync with the application.\r\n\r\n### Limitations of the $route service\r\n\r\nA more robust routing system is currently in development at [https://github.com/angular-ui/ui-router](https://github.com/angular-ui/ui-router)\r\n\r\nCurrently, `ng-view` can only be applied to one section. You can work with this by using internal `ng-include` directives. You could also define custom `menuUrl` and `contentUrl` properties:\r\n\r\n    $routeProvider.when '/admin/users/new',\r\n      templateUrl: 'admin/admin.tpl.html',\r\n      contentUrl: 'admin/users/users-edit.tpl.html',\r\n      menuUrl: 'admin/menu.tpl.html',\r\n      controller: 'UsersEditCtrl'\r\n\r\n    # in the view\r\n\r\n    <div ng-include="$route.current.contentUrl"></div>\r\n\r\nThis is fine as long as the partial is simple, but it will be redrawn each time a route is laoded.\r\n\r\nThere is currently no nested route support. Something like this will be hard to generate:\r\n\r\n    /projects/[project id]/sprints/[sprint id]/tasks\r\n\r\nYou can work around this with some includes, but the redraw will still be required.\r\n\r\n### Routing-specific patterns, tips, and tricks\r\n\r\nIf you omit the `href` on an anchor tag, Angular will prevent the default action and let you handle it's action yourself.\r\n\r\n    <a ng-click='showFAQ()'>Frequently Asked Questions</a>\r\n\r\nIn general, we should prefer links created with the `href` tag, or the AngularJS `ng-href` tag if there is a dynamic element to it. If using **html5Mode**, you need to configure links accordingly (without the `#`). If linking to an external target in html5Mode, use the `target="_self"` attribute to specify the application does not need to reload.\r\n\r\nEach module can have a different `$routeProvider` service set up in the config section.\r\n\r\nYou can also create a custom provide that wraps the `$routeProvider` service, which can be used to prevent code duplication. See the source code for the appliaction (look for `crudRouteProvider`.\r\n\r\n## Chapter 7 - Securing Your Application\r\n\r\n### Providing server-side authentication and authorization\r\n\r\nThe demo application uses an ExpressJS plugin, Passport for authorization. A user ID is stored as part of an encrypted cookie, passed to the browser on login, then sent back to the server on each request.\r\n\r\n### Securing partial templates\r\n\r\nYou can also secure partial templates, but make sure to prevent the server from caching requests to the partials. The headers should look like:\r\n\r\n    Cache-Control: no-cache, no-store, must-revalidate\r\n    Pragma: no-cache\r\n    Expires: 0\r\n\r\nAlso, delete templates from the `$templateCache` service before a new user logs in.\r\n\r\n### Stopping malicious attacks\r\n\r\nTo prevent cookie hijacking, use HTTPS. This prevents data from being read as it pass between the client and the server. You will have to set this up on the server. On the client side, ensure that the URL used to connect is not hardcoded to HTTP. Also, ensure that the authentication cookie is restricted to HTTPS requests only.\r\n\r\nAngularJS is protected against XSS attacks by default. You can turn of sanitization using `ng-bind-html` or in extreme cases, `ng-bind-html-unsafe`. `ng-bind-html` requires the `ngSanitize` module.\r\n\r\nJSON actually contains an injection vulnerability that allows access to resources if they return JSON arrays. This is done by loading JSON as a script. `$http` has a built in solution to this. You can set up your JSON request to be prefixed with `")]}',\\n"`, which cannot be executed as JavaScript. $http automatically strips the prefix, so that it will be read correctly.\r\n\r\nTo prevent Cross-site request forgery (XSRF), you can arrange for the server to set a session cookie called `XSRF-TOKEN`, which must be unique to the session. `$http` can extract this token and then attach it as a header to every HTTP request.\r\n\r\n### Adding client-side security support\r\n\r\nIt will be useful to set up services and directives to work with your security implementation. These are all methods that you can access from the templates:\r\n\r\n* currentUser\r\n* getLoginReason()\r\n* showLogin()\r\n* login(email, password)\r\n* logout(redirectTo)\r\n* cancelLogin(redirectTo)\r\n\r\nThe login form makes use of the AngularUI bootstrap project's `$dialog` service. This creates a modal display for the form using the specified template and controller.\r\n\r\nThe security service creates two helpers, `openLoginDialog()` and `closeLoginDialog()`.\r\n\r\n    loginDialog = null\r\n    openLoginDialog = ->\r\n      if !loginDialog\r\n        loginDialog = $dialog.dialog()\r\n        loginDialog.open(\r\n          'security/login/form.tpl.html',\r\n          'LoginFormController'\r\n        ).then onLoginDialogClose\r\n    closeLoginDialog = (success) ->\r\n      if loginDialog\r\n        loginDialog.close success\r\n        loginDialog = null\r\n\r\nThese functions open and close the dialog.\r\n\r\nUsing an `ng-show="isAuthenticated()"` provides a way to display and hide information based on the authorization.\r\n\r\n### Supporting authentication and authorization on the client\r\n\r\nRather than forcing a user to completely restart an action after authentication, we can intercept the response and continue the action after successful authentication. We can do this using the `$http` promises that are being return on request. A **response** interceptor receives a promise, then returns a promise object for a response. `$http` requests pass promises to each interceptor, giving them an opportunity to modify the promise object. Using `then()`, we create a new promise.\r\n\r\n    myInterceptor = (promise) ->\r\n      return promise.then (response) ->\r\n        if response.headers()['content-type'] == "text/plain"\r\n          response.data = $sanitize(response.data)\r\n        return response\r\n\r\nIn this example we check the content-type, sanitize, then return the promise. In the same way, we can check if the promise is rejected with a 401 authorization error, then create a new promise ( [Example from here](http://www.espeo.pl/2012/02/26/authentication-in-angularjs-application) )\r\n\r\n  .config ['$httpProvider', ($httpProvider) ->\r\n    $httpProvider.responseInterceptors.push 'securityInterceptor'\r\n  ]\r\n\r\nWe chan't inject `$http` directly into the interceptor, so we use the `$injector` service.\r\n\r\n    .factory 'securityInterceptor', ['$injector', 'securityRetryQeue', ($injector, queue) ->\r\n      return (promise) ->\r\n        $http = $injector.get '$http'\r\n        return promise.then null, (response) ->\r\n          if response.status == 401\r\n            promise = queue.pushRetryFn 'unauthorized-server', ->\r\n              return $http response.config\r\n          return promise\r\n\r\nHere we watch for the error using a handler as the second paramater of the call to `then()`. By using `null` for the first parameter, we indicate the promise should not be intercepted if successful. When it fails, it is pushed to the `securityRetryQueue`. So when the original response returns an error, we return a new retry promise, which will be resolved if securityRetryQueue is retried or the response is another error.\r\n\r\nThe `securityRetryQueue` is a place to store items that will need to be retried. They can be processed then with `retryAll` or `cancelAll`\r\n\r\n    retryAll: ->\r\n      while retryQueue.length\r\n        retryQueue.shift().retry()\r\n\r\nThis means all items in the queue must have `retry()` or `cancel()` methods. The `pushRetryFn()` method sets these up.\r\n\r\n    pushRetryFn: (reason, retryFn) ->\r\n      deferredRetry = $q.defer()\r\n      retryItem = {\r\n        reason: reason,\r\n        retry: ->\r\n          $q.when(retryFn()).then (value) ->\r\n            deferredRetry.resolve value\r\n          , (value) ->\r\n            deferredRetry.reject value\r\n        cancel: ->\r\n          deferredRetry.reject()\r\n      }\r\n      service.push retryItem\r\n      return deferredRetry.promise\r\n\r\nFinally, the security service is notified.\r\n\r\n### Preventing navigation to secure routes\r\n\r\nEach route defined with `$routeProvider` can contain a set of `resolve` functions, which return a promise that must be resolved before navigation succeeds. We can use this for authorization\r\n\r\n    $routeProvider.when '/admin/users',\r\n      resolver: [security, requreAdminUser = (security) ->\r\n        promise = service.requestCurrentUser()\r\n        return promise.then (currentUser) ->\r\n          if !currentUser.isAdmin()\r\n            return $q.reject()\r\n          return currentUser\r\n      ]\r\n\r\nWe need to add this to the `securityRetryQueue` in order to give the user a chance to log in.\r\n\r\n    requireAdminUser = (security, securityRetryQueue) ->\r\n      promise = security.requestCurrentUser()\r\n      return promise.then (currentUser) ->\r\n        if !currentUser.isAdmin()\r\n          return securityRetryQueue.pushRetryFn 'unauthorized-client', requireAdminUser\r\n\r\nAdding this item to the queue will trigger the security service to display the login form. To support a variety of resolve methods, we create an authorization service. So far it will only contain `requireAuthenticatedUser()` and `requireAdminUser()`.\r\n\r\n    .provider 'securityAuthorization',\r\n      requireAdminUser: [\r\n        'securityAuthorization', (securityAuthorization) ->\r\n          return securityAuthorization.requireAdminUser()\r\n      ],\r\n      $get: [\r\n        'security', 'securityRetryQueue', (security, queue) ->\r\n          service = {\r\n            requireAdminUser: ->\r\n          }\r\n          return service\r\n      ]\r\n\r\nThis provider will be injected in our configuration block.\r\n\r\n    config ['securityAuthorizationProvider', (securityAuthorizationProvider) ->\r\n      $routeProvider.when 'admin/users',\r\n        resolve: securityAuthorizationProvider.requireAdminUser\r\n\r\n## Chapter 8 - Building Your Own Directives\r\n\r\n### Following the directive compilation life-cycle\r\n\r\nOnce all the directives are compiled, AngularJS creates the scope and linkage. A repeated directive only needs to be compiled once.\r\n\r\n### Writing unit tests for directives\r\n\r\nDirectives can be hard to test, So AngularJS provides some features to make testing easier. You can see the tests for built-in directives [Here](https://github.com/angular/angular.js/tree/master/test/ng/directive/)\r\n\r\nA common skeleton for directive testing:\r\n\r\n    describe 'myDir directive', ->\r\n      element = null\r\n      scope = null\r\n\r\n      beforeEach module 'myDirModule'\r\n\r\n      beforeEach inject ($compile, $rootScope) ->\r\n        linkingFn = $compile '<my-dir></my-dir>'\r\n        scope = $rootScope\r\n        element = linkingFn scope\r\n\r\n      it 'has some properties', ->\r\n        expect element.someMethod()\r\n          .toBe XXXX\r\n\r\n      it 'does something to the scope', ->\r\n        expect scope.someField\r\n          .toBe XXXX\r\n\r\nIf your directive uses `$watch`, `$observer`, or `$q`, use `scope.$digest` in the `it` block.\r\n\r\n### Defining a directive\r\n\r\nDirectives are registered to a module using `.directive()`.\r\n\r\n    angular.module 'app', []\r\n      .directive 'myDir', ->\r\n        return myDirectiveDefinition\r\n\r\nThere are several fields to use in your directive:\r\n\r\n* name\r\n* restrict (kind of markup, element or attribute)\r\n* priority (compiler order)\r\n* terminal (whether to continue compiling other directives below)\r\n* link - link the directive to the scope\r\n* template - Generate markup for this directive\r\n* templateUrl - a URL where template is found\r\n* replace - Replace directive's elements with template\r\n* transclude - Provide content for use in template and compile\r\n* scope - Whether to create a new child scope\r\n* controller - Directive acts as controller\r\n* require - requires another directive\r\n* complie - manipulate the source DOM\r\n\r\n### Styling buttons with directives\r\n\r\nWith all of our buttons using the same class, we could create a new button directive to attach the `btn` class to all of them. The test for this would be:\r\n\r\n    describe 'button directive', ->\r\n      $compile = undefined\r\n      $rootScope = undefined\r\n      beforeEach module 'directives.button'\r\n      beforeEach inject (_$compile_, _$rootScope_) ->\r\n        $compile = _$compile_\r\n        $rootScope = _$rootScope_\r\n\r\n      it 'adds a btn class to the button element', ->\r\n        element = $compile('<button></button>')($rootScope)\r\n        expect element.hasClass 'btn'\r\n          .toBe true\r\n\r\nTo create the directive:\r\n\r\n    myModule.directive 'button', ->\r\n      return {\r\n        restrict: 'E'\r\n        compile: (element, attributes) ->\r\n          element.addClass 'btn'\r\n          if attributes.type == 'submit'\r\n            element.addClass 'btn-primary'\r\n          if attributes.size\r\n            element.addClass "btn-#{attributes.size}"\r\n\r\nThis will add the class to all button elements, with an option of adding size or automatically setting `btn-primary` to the submit buttons.\r\n\r\n### Understanding AngularJS widget directives\r\n\r\nUsing custom directives for a widget can clean up code and reduce duplication. For a pagination block, the directive markup would look like this:\r\n\r\n    <pagination num-pages="tasks.pageCount" current-page="task.currentPage"></pagination>\r\n\r\nA test for this:\r\n\r\n    describe 'pagination directive', ->\r\n      $scope = undefined\r\n      element = undefined\r\n      lis = undefined\r\n\r\n      beforeEach module 'directives'\r\n      beforeEach inject ($compile, $rootScope) ->\r\n        $scope = $rootScope\r\n        $scope.numPages = 5\r\n        $scope.currentPage = 3\r\n        element = $compile('<pagination num-pages="numPages" current-page="currentPage"></pagination>')($scope)\r\n        $scope.$digest()\r\n        lis = ->\r\n          return element.find 'li'\r\n\r\n      it 'has the number of the page as text in each page item', ->\r\n        for i in [1..$scope.numPages]\r\n          expect lis().eq(i).text()\r\n            .toEqual(' '+i)\r\n\r\n      it 'sets the current-page to be active', ->\r\n        currentPageItem = lis().eq $scope.currentPage\r\n        expect currentPageItem.hasClass 'active'\r\n          .toBe true\r\n\r\n      it 'disables "next" if current-page is num-pages', ->\r\n        $scope.currentPage = 5\r\n        $scope.$digest()\r\n        nextPageItem = lis().eq -1\r\n        expect nextPageItem.hasClass 'disabled'\r\n          .toBe true\r\n\r\n      it 'changes currentPage if a page link is clicked', ->\r\n        page2 = lis().eq(2).find('a').eq 0\r\n        page2.click()\r\n        $scope.$digest()\r\n        expect $scope.currentPage\r\n          .toBe 2\r\n\r\n      it 'does not change the current page on "next" click if already at last page', ->\r\n        next = lis().eq(-1).find 'a'\r\n        $scope.currentPage = 5\r\n        $scope.$digest()\r\n        next.click()\r\n        $scope.$digest()\r\n        expect $scope.currentPage\r\n          .toBe 5\r\n\r\n      it 'changes the number of items when numPages changes', ->\r\n        $scope.numPages = 8\r\n        $scope.$digest()\r\n        expect lis().length\r\n          .toBe 10\r\n        expect lis().eq(0).text()\r\n          .toBe 'Previous'\r\n        expect lis().eq(-1).text()\r\n          .toBe 'Next'\r\n\r\nFor the HTML we will use a template\r\n\r\n    <div class="pagination">\r\n      <ul>\r\n        <li ng-class="{disabled: noPrevious()}">\r\n          <a ng-click="selectPrevious()">Previous</a>\r\n        </li>\r\n        <li ng-repeat="page in pages" ng-class="{active: isActive(page)}">\r\n          <a ng-click="selectPage(page)">{{page}}</a>\r\n        </li>\r\n        <li ng-class="{disabled: noNext()}">\r\n          <a ng-click="selectNext()">Next</a>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n\r\nWe will create an isolated scope, which will allow the widget to be completely decoupled while still having access to the parent scope, through `$parent`.\r\n\r\nTo set up attributes between the isolated scope and the parent scope, we can set up three types of interfaces.\r\n\r\n* interpolate (@)\r\n* data bind (=)\r\n* expression (&)\r\n\r\nThe key is the name of the field on the isolated scope, the value is the operator followed by the name of the attribute on the element\r\n\r\n    scope: {\r\n      isolated1: '@attribute1',\r\n      isolated2: '=attribute2',\r\n      isolated3: '&attribute3'\r\n    }\r\n\r\nYou can omit the attribute if it is equal to the key name, (`isolated1: '@'`).\r\n\r\n#### Interpolating with @\r\n\r\n`@` will interpolate the value of the attribute and update the isolated scope property on change. Use `{{}}` to generate a string using values from the parent scope. This is equivalent to manually `$observe` the attribute\r\n\r\n    attrs.$observer 'attribute1', (value) ->\r\n      isolatedScope.isolated1 = value\r\n    attrs.$$observers['attribute1'].$$scope = parentScope\r\n\r\n#### Binding data with =\r\n\r\n`=` indicates that the specified attribute and the value on the isolated scope should remain in sync. This is kind of like using the `$watch` service.\r\n\r\n  parentGet = $parse attrs['attribute2']\r\n  parentSet = parentGet.assign\r\n  parentScope.$watch parentGet, (value) ->\r\n    isolatedScope.isolated2 = value\r\n  isolatedScope.$watch 'isolated2', (value) ->\r\n    parentSet parentScope, value\r\n\r\n#### Callbacks with &\r\n\r\n`&` indicates that the attribute is available as a function, which will execute an expression when called. This is useful for callbacks, and is equivalent to the `$parse` expression.\r\n\r\n    parentGet = $parse attrs['attribute3']\r\n    scope.isolated3 = (locals) ->\r\n      return parentGet parentScope, locals\r\n\r\n#### Implementation\r\n\r\nHere is the directive definition\r\n\r\n    myModule.directive 'pagination', ->\r\n      return {\r\n        restrict: 'E'\r\n        scope:\r\n          numPages: '='\r\n          currentPage: '='\r\n        template: '...'\r\n        replace: true\r\n      }\r\n\r\nThis directive is replaced with the template shown earlier\r\n\r\n    link: (scope) ->\r\n      scope.$watch 'numPages', (value) ->\r\n        scope.pages = []\r\n        for i in [1..value]\r\n          scope.pages.push(i)\r\n        if scope.currentPage > value\r\n          scope.selectPage value\r\n\r\nWe can use a callback by setting a new attribute on the directive that is mapped to the isolated scope using `&`.\r\n\r\n    <pagination num-pages="tasks.pageCount" current-page="tasks.currentPage"\r\n        on-select-page="selectPage(page)"></pagination>\r\n\r\nThen add to the directive scope:\r\n\r\n    scope:\r\n      ...\r\n      onSelectPage: '&'\r\n\r\nThen add this to the function that is on the isolated scope:\r\n\r\n    scope.selectPage = (page) ->\r\n      if !scope.isActive page\r\n        scope.currentPage = page\r\n        scope.onSelectPage\r\n          page: page\r\n\r\n### Creating a custom validation directive\r\n\r\nWe need to check that the password and confirm password are identical. We can do that with a custom validator. In the template:\r\n\r\n    <input type="password" name="confirmPassword" ng-model="confirmPassword" validate-equals="user.password">\r\n\r\nThis needs to be integrated with `ngModelController` to provide feedback for the user. We just need to provide a name for the form and input element, then we can use our validation directive to check the model values. We must add a `require` field to our directive, which will take a string or array of strings to a controller we require. This will then be passed in as a fourth parameter\r\n\r\n    require: 'ngModel',\r\n    link: function(scope, element, attrs, ngModelController)\r\n\r\nIf the required option is actually optional, use a `?` (`require: '?ngModel'`). If the required element might appear in the parent, you can use: `require: '^ngModel'`.\r\n\r\nOnce we have the `ngModelController`, we have access to some functions that will be useful for validation:\r\n\r\n* $parsers - called when value of input element changes\r\n* $formatters - called when value of model changes\r\n* $setValidity(validationErrorKey, isValid) - Set whether model is valid\r\n* $valid - true if no error\r\n* $error - object containing info about errors.\r\n\r\nThe `$parsers` and `$formatters` functions take the value in and return it for further processing.\r\n\r\nWe can test this be compiling a test form:\r\n\r\n    <form name="testForm">\r\n      <input name="testInput" ng-model="model.value" validate-equals="model.compareTo">\r\n    </form>\r\n\r\nThis will allow us to test against the bound `model.value`. To set up the test:\r\n\r\n    describe 'validateEquals directive', ->\r\n      $scope = undefined\r\n      modelCtrl = undefined\r\n      modelValue = undefined\r\n\r\n      beforeEach inject ($compile, $rootScope) ->\r\n        ...\r\n        modelValue = $scope.model = {}\r\n        modelCtrl = scope.testForm.testInput\r\n\r\n      describe 'model value changes', ->\r\n        it 'should be invalid if the model changes', ->\r\n          modelValue.testValue = 'different'\r\n          $scope.$digest()\r\n          expect modelCtrl.$valid\r\n            .toBeFalsy()\r\n          expect modelCtrl.$viewValue\r\n            .toBe undefined\r\n\r\n        it 'should be invalid if the reference model changes', ->\r\n          modelValue.compareTo = 'different'\r\n          $scope.$digest()\r\n          expect modelCtrl.$valid\r\n            .toBeFalsy()\r\n          expect modelCtrl.$viewValue\r\n            .toBe undefined\r\n\r\n        it 'should be valid if the modelValue changes to be the same as the reference', ->\r\n          modelValue.compareTo = 'different'\r\n          $scope.$digest()\r\n          expect modelCtrl.$valid\r\n            .toBeFalsy()\r\n\r\n          modelValue.testValue = 'different'\r\n          $scope.$digest()\r\n          expect modelCtrl.$valid\r\n            .toBeTruthy()\r\n          expect modelCtrl.$viewValue\r\n            .toBe 'different'\r\n\r\nWe modify the scope and fill the model with a value we can compare to. Then we test the validity. `$digest()` is required to ensure that input has been updated.\r\n\r\n    describe 'input value changes', ->\r\n      it 'should be invalid if the input value changes', ->\r\n        modelCtrl.$setViewValue 'different'\r\n        expect modelCtrl.$valid\r\n          .toBeFalsy\r\n        expect modelValue.testValue\r\n          .toBe undefined\r\n\r\n      it 'should be valid if the input value changes to be the same as the reference', ->\r\n        modelValue.compareTo = 'different'\r\n        $scope.$digest()\r\n        expect modelCtrl.$valid\r\n          .toBeFalsy()\r\n\r\n        modelCtrl.$setViewValue 'different'\r\n        expect modelCtrl.$viewValue\r\n          .toBe 'different'\r\n        expect modelCtrl.$valid\r\n          .toBeTruthy()\r\n\r\nTo finally implement this directive:\r\n\r\n    myModule.directive 'validateEquals', ->\r\n      return {\r\n        require: 'ngModel',\r\n        link: (scope, elm, attrs, ngModelCtrl) ->\r\n          validateEqual = (myValue) ->\r\n            valid = (myValue == scope.$eval attrs.validateEquals\r\n            ngModelCtrl.$setValidity 'equal', valid\r\n            return if valid then myValue else undefined\r\n\r\n          ngModelCtrl.$parsers.push validateEqual\r\n          ngModelCtrl.$formatters.push validateEqual\r\n\r\n          scope.$watch attrs.validateEquals, ->\r\n            ngModelCtrl.$setViewValue ngModelCtrl.$viewValue\r\n\r\nThis `validateEqual(value)` function will compare the passed in value with the value of the expression. It is pushed into the `$parsers` and $formatters` so it is called each time the model or view change.\r\n      }\r\n            \r\n### Creating an asynchronous model validator\r\n\r\nIf you need to validate against a remote service, like a database, the response will be asynchronous. If we want to check against users already in the database for valid email addresses. We'll first make a mock of the query method that we can use with our test.\r\n\r\n    angular.module('mock.Users', []).factory 'Users', ->\r\n      Users = { }\r\n      Users.query = (query, response) ->\r\n        Users.respondWith = (emails) ->\r\n          response emails\r\n          Users.respondWith = undefined\r\n      return Users\r\n\r\nThis allows us to simulate a response in our tests. Add this module to the test\r\n\r\n    beforeEach module 'mock.users'\r\n\r\nThe rest of the test can be similar, but modified for asynchronous validation\r\n\r\n    beforeEach inject ($compile, $rootScope, _Users_) ->\r\n      Users = _Users_\r\n      spyOn Users, 'query'\r\n        .andCallThrough()\r\n\r\nThen the unit tests:\r\n\r\n    it 'should call Users.query when the view changes', ->\r\n      testInput.$setViewValue 'different'\r\n      expect Users.query\r\n        .toHaveBeenCalled()\r\n\r\n    it 'should set model to invalid if the Users.query response contains users', ->\r\n      testInput.$setViewValue 'different'\r\n      Users.respondWith ['someUser']\r\n      expect testInput.$valid\r\n        .toBe false\r\n\r\n    it 'should set model to valid if the Users.query response contains no users', ->\r\n      testInput.$setViewValue 'different'\r\n      Users.respondWith []\r\n      expect testInput.$valid\r\n        .toBe true\r\n\r\nHere we check that `User.query` is called, and how it responded. We also want to test that we don't query the server if the user re-enters the same value as provided by the model, say the user is editing rather than creating an email address.\r\n\r\n    it 'should not call Users.query if the view changes to be the same as the original model', ->\r\n      $scope.model.testValue = 'admin@abc.com'\r\n      $scope.$digest()\r\n      testInput.$setViewValue 'admin@abc.com'\r\n      expect Users.query\r\n        .not.toHaveBeenCalled()\r\n      testInput.$setViewValue 'other@abc.com'\r\n      expect Users.query\r\n        .toHaveBeenCalled()\r\n\r\n      querySpy.reset()\r\n      testInput.$setViewValue 'admin@abc.com'\r\n      expect Users.query\r\n        .not.toHaveBeenCalled()\r\n      $scope.model.testValue = 'other@abc.com'\r\n      $scope.$digest()\r\n      testInput.$setViewValue 'admin@abc.com'\r\n      expect Users.query\r\n        .toHaveBeenCalled\r\n\r\nHere, querySpy.reset() is used to check the spy has not been called since last we checked.\r\n\r\nTo implement this directive:\r\n\r\n    myModule.directive 'uniqueEmail', ['Users', (Users) ->\r\n      return {\r\n        require: 'ngModel',\r\n        link: (scope, element, attrs, ngModelCtrl) ->\r\n          original = undefined\r\n          ngModelCtrl.$formatters.unshift (modelValue) ->\r\n            original = modelValue\r\n            return modelValue\r\n\r\n          ngModelCtrl.$parsers.push (viewValue) ->\r\n            if viewValue && viewValue != original\r\n              Users.query\r\n                email: viewValue\r\n              , (users) ->\r\n                if users.length == 0\r\n                  ngModelCtrl.$setValidity 'uniqueEmail', true\r\n                else\r\n                  ngModelCtrl.$setValiditiy 'uniqueEmail', false\r\n\r\n              return viewValue\r\n      }\r\n\r\nHere, `$parser` check the server for users. By returning undefined, we prevent the model from being updated if there is an invalid field.\r\n\r\n### Wrapping the jQueryUI datepicker directive\r\n\r\nWe will wrap the jQueryUI datepicker widget in a directive. The widget API provides some methods:\r\n\r\n* element.datepicker(options) - create a new widget\r\n* element.datepicker("setDate", date) - set the date on the widget\r\n* element.datepicker("getDate") - Get the date on the widget\r\n* element.datepicker("destroy") - Destroy and remove the widget from the element\r\n\r\nWe can use a callback with the `onSelect` attribute to be informed when the user selects a new date\r\n\r\n    element.datepicker\r\n      onSelect: (value, picker) ->\r\n        # something\r\n\r\nThis will be similar to the validation directives. You must require `mgModel` and add functions to `$parsers` and $formatters` to transform the values between the model and the view.\r\n\r\nTo update the widget, we'll use `ngModel.$render()`, which is called after all the `$formatters` have been executed. Get get data when the `onSelect` callback is trigger to call `ngModel.$setViewValue()`. This updates the view and triggers the `$parsers`.\r\n\r\nWe will not mock out the datepicker widget in this case. This can slow down the test, but it helps to ensure the widget is behaving correctly. The datepicker exposes a function that will help us simulate user action\r\n\r\n    $.datepicker._selectDate element\r\n\r\nWe'll use this with a helper function to simulate date selection\r\n\r\n    selectDate = (element, date) ->\r\n      element.datepicker 'setDate', date\r\n      $.datepicker._selectDate element\r\n\r\nIf this kind of simulation needed to be more complex, we would probably want to mock out the widget. But in this case, we can go right to the tests:\r\n\r\n    describe 'simple use on input element', ->\r\n      aDate = undefined\r\n      element = undefined\r\n\r\n      beforeEach ->\r\n        aDate = new Date 2010, 12, 1\r\n        element = $compile(<input date-picker ng-model='x'/>")($rootScope)\r\n\r\n      it 'should get the date from the model, ->\r\n        $rootScope.x = aDate\r\n        $rootScope.$digest()\r\n        expect element.datepicker 'getDate'\r\n          .toEqual aDate\r\n\r\n      it 'should put the date in the model', ->\r\n        $rootScope.$digest()\r\n        selectDate element, aDate\r\n        expect $rootScope.x\r\n          toEqual aDate\r\n\r\nHere we did not call `$digest()`, because it is the directive's job to ensure that digest occurs after user interaction. To implement:\r\n\r\n    myModule.directive 'datePicker', ->\r\n      return {\r\n        require: 'ngModel',\r\n        link: (scope, element, attrs, ngModelCtrl) ->\r\n          ngModelCtrl.$formatters.push (date) ->\r\n            if angular.isDefined date && date != null && !angular.isDate date\r\n              throw new Error 'ng-Model value must be a Date object'\r\n            return date\r\n          updateModel = ->\r\n            scope.$apply ->\r\n              date = element.datepicker "getDate"\r\n              element.datepicker "setDate", element.val()\r\n              ngModelCtrl.$setViewValue date\r\n\r\n          # calls updateModel() to pass new date into $parsers\r\n          onSelectHandler = (userHandler) ->\r\n            if userHandler\r\n              return (value, picker) ->\r\n                updateModel()\r\n                return userHandler value, picker\r\n            else\r\n              return updateModel\r\n\r\n          setUpDatePicker = ->\r\n            options = scope.$eval attrs.datePicker || {}\r\n            options.onSelect = onSelectHandler options.onSelect\r\n            element.bind 'change', updateModel\r\n            element.datepicker 'destroy'\r\n            element.datepicker options\r\n            ngModelCtrl.$render()\r\n\r\n          ngModelCtrl.$render = ->\r\n            element.datepicker "setDate", ngModelCtrl.$viewValue\r\n\r\n          scope.$watch attrs.datePicker, setUpDatePicker, true\r\n      }\r\n\r\n## Chapter 9 - Building Advanced Directives\r\n\r\n### Using transclusion\r\n\r\nTransclusion deals with how a directive's scope is handled.\r\n\r\n    <alert type="alert.type" close="closeAlerty($index)"\r\n      ng-repeat="alert in alerts">\r\n        {{alert.msg}}\r\n    </alert>\r\n\r\n    myModule.directive 'alert', ->\r\n      return {\r\n        restrict: 'E'\r\n        replace: true\r\n        transclude: true\r\n        template:\r\n          '<div class="alert alert-{{type}}"' +\r\n            '<button type="button" class="close"' +\r\n              'ng-click="close()">&times;' +\r\n            '</button>' +\r\n            '<div ng-transclude></div>' +\r\n          '</div>'\r\n        scope:\r\n          type: '='\r\n          close: '&'\r\n      }\r\n\r\nThis creates an `alert` element directive. The contents contain the message to display, which need to be transcluded into the directive's template. The `replace` property is used to replace what is present in the original directive's tag with the `template` field of the directive. The `transclude` property tells the compiler to make the original contents available to the template. `true` sets the element to be transcluded, `element` sets the element to be transcluded with any attribute directives not already compiled. Then `<ng-transclude>` is used to put the transcluded content into the template.\r\n\r\n*NOTE:* `ng-controller`, `ng-repeat`, `ng-include`, `ng-view`, and `ng-switch` create children scopes that prototypically inherit from their parent scopes.\r\n\r\nBy transcluding the original contents, they can be associated with the original scope and not the isolated scope.\r\n\r\n### Creating and working with transclusion functions\r\n\r\n**transclusion** functions are link functions created with the `$compile` service. When transclusion is requested, the transcluded elements are extracted from the DOM and compiled. It's kind of like this:\r\n\r\n    elementsToTransclude = directiveElement.contents()\r\n    directiveElement.html ''\r\n    transcludeFunction = $compile elementsToTransclude\r\n\r\nYou can access this `$compile` service to create your own transclusion functions. This service returns a linking function, which can be called from the scope to retrieve the compiled DOM elements.\r\n\r\nYou can clone the original element with a callback function. This is what happens with `ng-repeat`.\r\n\r\n    clone = linkingFn scope, callback = (clone) ->\r\n      element.append clone\r\n\r\nWe can access transclusion functions in the compile function via the `transcludeFn` parameter and in the directive via `$transclude`.\r\n\r\n    myModule.directive 'myDirective', ->\r\n      return {\r\n        transclude: true\r\n        compile: (element, attrs, transcludeFn) ->\r\n          # something here\r\n        controller: ($scope, $transclude) ->\r\n          # something here\r\n      }\r\n\r\nIn the compile function, the scope is not yet known so it isn't bound. You will pass this scope to the function as its first parameter.\r\n\r\n    compile: (element, attrs, transcludeFn) ->\r\n      postLink = (scope, element, attrs, controller) ->\r\n        newScope = scope.$parent.$new()\r\n\r\n        element.find('p').first().append(transcludeFn(newScope))\r\n\r\nHere, the translcuded element is appended to `<p>`, below the directive's element. with the transclusion function, we bind the transcluded elements to a new scope, which is a sibling of the directive's scope. This is necessary when the directive has an isolated scope.\r\n\r\nIn a directive controller, we use the `$transclude` service. This is pre-bound to a new child of the parent, so a scope isn't needed.\r\n\r\n    controller: ($scope, $element, $transclude) ->\r\n      $element.find('p').first().append($transclude())\r\n\r\nAs an example, we may want to make a custom directive that works similarly to `ng-show` and `ng-switch`, but it will remove an element from the DOM and be less verbose than `ng-switch`. To remove an element, we could just create an `if` directive\r\n\r\n    body ng-init="model={show: true, count: 0}"\r\n      button ng-click="model.show = !model.show" Toggle Div\r\n      div if="model.show" ng-init="model.count=model.count+1" Shown {{model.count}} times\r\n\r\nThis toggles the value of `model.show` between true and false, then incrementing `model.count` to show the number of toggles. To unit test this:\r\n\r\n    it 'creates or removes the element as the if condition changes', ->\r\n      element = $compile('<div><div if="someVar"></div></div>')(scope)\r\n      scope.$apply 'someVar = true'\r\n      expect element.children().length\r\n        .toBe 1\r\n      scope.$apply 'someVar = false'\r\n      expect element.children().length\r\n        .toBe 0\r\n      scope.$apply 'someVar = true'\r\n      expect element.children().length\r\n        .toBe 1\r\n\r\nThis checks the children to make sure the element was removed. To implement the directive:\r\n\r\n    myModule.directive 'if', ->\r\n      return {\r\n        transclude: 'element'\r\n        priority: 500\r\n        compile: (element, attr, transclude) ->\r\n          postLink = (scope, element, attr) ->\r\n            `var childElement, childScope;`\r\n            scope.$watch attr['if'], (newValue) ->\r\n              if childElement\r\n                childElement.remove()\r\n                childScope.$destroy()\r\n                childElement = undefined\r\n                childScope = undefined\r\n              if newValue\r\n                childScope = scope.$new()\r\n                childElement = transclude childScope, (clone) ->\r\n                  element.after clone\r\n\r\nThe transcludes the entire element, then `$watch` the `if` attribute.\r\n\r\nAngularJS compiles higher priority directives before lower ones, only attributes whose directives have a lower priority than the current directive will be transcluded, because they haven't passed yet. `ng-repeat` has a priority of 1000, making it often the bottom of the list.\r\n      }\r\n\r\n### Understanding Directive Controllers\r\n\r\nYour directive controller can be a string of a controller already defined on the module\r\n\r\n    controller: 'MyDirectiveController'\r\n\r\nOr you can initialize t the controller in the directive\r\n\r\n    controller: ($scope) -> { }\r\n\r\nYou can inject dependencies into these controllers.\r\n\r\n    controller: ['$scope', '$element', '$attrs', ($scope, $element, $attrs) ->\r\n      $scope.$watch 'numPages', (value) ->\r\n        $scope.pages = []\r\n        for i in [i..value] by 1\r\n          $scope.pages.push(i)\r\n        if $scope.currentPage > value\r\n          $scope.selectPage value\r\n      $scope.noPrevious = ->\r\n        $scope.currentPage == 1\r\n    ]\r\n\r\n#### Differences between directive controllers and link functions\r\n\r\nDirective controllers must use dependency injection. Link functions always have the same parameters: scope, element, attrs, and controller.\r\n\r\nDirective controllers are invoked before link controllers. Link functions can reference directive controllers\r\n\r\n    myModule.directive 'validateEquals', ->\r\n      return {\r\n        require: 'ngModel'\r\n        link: (scope, elm, attrs, ngModelCtrl) ->\r\n          # dadada\r\n      }\r\n\r\nDirective controllers can be injected with `$transclusion`, which is already bound. Link functions can access transclusion via the compile function, and it is not pre-bound to a scope.\r\n\r\n#### Creating an accordion directive\r\n\r\nWe will create an accordion that will look like this in HTML markup:\r\n\r\n    accordion\r\n      accordion-group heading="Heading 1"\r\n        | Group 1\r\n        strong Body\r\n      accordion-group heading="Heading 2"\r\n        | Group 2\r\n        strong Body\r\n\r\nTo enable communication between groups, we'll create a directive controller (`AccordionController`) which will be required by each `accordion-group`. Testing a directive controller is similar to testing an application controller:\r\n\r\n    describe 'closeOthers', ->\r\n      `var group1, group2, group3;`\r\n      beforeEach ->\r\n        ctrl.addGroup group1 = $scope.$new()\r\n        ctrl.addGroup group2 = $scope.$new()\r\n        ctrl.addGroup group3 = $scope.$new()\r\n        group1.isOpen = group2.isOpen = group3.isOpen = true\r\n\r\n      it 'closes all groups other than the one passed.', ->\r\n        ctrl.closeOthers group2\r\n        expect group1.isOpen\r\n          .toBe false\r\n        expect group2.isOpen\r\n          .toBe true\r\n        expect group3.isOpen\r\n          .toBe false\r\n\r\nTo implement the AccordionController\r\n\r\n    myModule.controller 'AccordionController', ['$scope', '$attrs', ($scope, $attrs) ->\r\n      @groups = []\r\n      @closeOthers = (openGroup) ->\r\n        angular.forEach this.groups, (group) ->\r\n          if group != openGroup\r\n            group.isOpen = false\r\n\r\n      @addGroup = (groupScope) ->\r\n        that = this\r\n        @groups.push groupScope\r\n        groupScope.$on '$destroy', (event) ->\r\n          that.removeGroup groupScope\r\n\r\n      @removeGroup = (group) ->\r\n        index = @groups.indexOf group\r\n        if index != -1\r\n          @groups.splice @groups.indexOf group\r\n    ]\r\n\r\nHere, we remove the group when its scope is destroyed, which is important because the groups may be generated dynamically at run-time.\r\n\r\nNow we can implement the accordion directive:\r\n\r\n    myModule.directive 'accordion', ->\r\n      return {\r\n        restrict: 'E'\r\n        controller: 'AccordionController'\r\n        link (scope, element, attrs) ->\r\n          element.addClass 'accordion'\r\n      }\r\n\r\nThe accordion group will use a template to define the contents\r\n\r\n    .accordion-group\r\n      .accordion-heading\r\n        a.accordion-toggle ng-click="isOpen=!isOpen" {{heading}}\r\n      .accordion-body ng-show="isOpen"\r\n        .accordion-inner ng-transclude\r\n\r\nSo the original body is transcluded into the directive. We want to have complete control over the `isOpen` and `heading` attributes, so we will have an isolated scope with `accordion-group`. In this test:\r\n\r\n    describe 'accordion-group', ->\r\n      `var scope, element, groups;`\r\n      beforeEach inject ($rootScope, $compile) ->\r\n        scope = $rootScope\r\n        tpl = "<accordion>" +\r\n          "<accordion-group heading='title 1'>Content 1</accordion-group>" +\r\n          "<accordion-group heading='title 2'>Content 2</accordiong-group>" +\r\n          "</accordion>"\r\n        $compile(tpl)(scope)\r\n        scope.$digest()\r\n        groups = element.find '.accordion-group'\r\n\r\n      it 'should change selected element on click', ->\r\n        groups.eq(0).find('a').click()\r\n\r\n      expect findGroupBody(0).scope().isOpen\r\n        .toBe true\r\n      groups.eq(1).find('a').click()\r\n      expect groups.eq(0).scope().isOpen\r\n        .toBe false\r\n      expect groups.eq(1).scope().isOpen\r\n        .toBe true\r\n\r\nThe implementation is pretty straightforward\r\n\r\n    myModule.directive 'accordionGroup', ->\r\n      return {\r\n        require: '^accordion'\r\n        restrict: 'E'\r\n        transclude: true\r\n        replace: true\r\n        templateUrl: 'template/accordion/accordion-group.html'\r\n        scope: { heading: '@' }\r\n        link: (scope, element, attrs accordionCtrl) ->\r\n          accordionCtrl.addGroup scope\r\n          scope.isOpen = false\r\n          scope.$watch 'isOpen', (value) ->\r\n            if value\r\n              accordionCtrl.closeOthers scope\r\n      }\r\n\r\nThis directive requires the directive controller from `accordion`, which is used as a fourth parameter. It registers itself and calls `addGroup()` then `closeOthers()` whenever this group is opened.\r\n\r\n### Taking control of the compilation process\r\n\r\nWe can terminate the compilation process and modify and compile the directive's element and children amnually.\r\n\r\n#### Creating a field directive\r\n\r\nWe can eliminate a lot of duplicate markup with a field directive\r\n\r\n    field type="email" ng-model="user.email" required\r\n      label Email\r\n      validator key="required" $fieldLabel is required\r\n      validator key="email" Please enter a valid email\r\n\r\nThen using `ng-model`, type, and validation directives, the rest of the duplication is removed. Notice the `$fieldLabel` property, which will be added to the scope by the `field` directive. Some challenges with the field directive:\r\n\r\n* We need to change template based on type of field\r\n* We need unique name and id attributes for the input\r\n* We want to extract validation messages\r\n\r\nHere's the directive definition:\r\n\r\n    restrict: 'E'\r\n    priority: 100\r\n    terminal: true\r\n    compile: (element, attrs) ->\r\n      # ...\r\n      validationMgs = getValidationValidationMessages element\r\n      labelContent = getLabelContent element\r\n      element.html ''\r\n\r\n      return postLink = (scope, element, attrs) ->\r\n        template = attrs.template || 'input.html'\r\n        loadTemplate(template).then (templateElement) ->\r\n          # ...\r\n\r\nWe terminate compilation, giving it a priority of 100 makes sure it runs before `ng-model`. We then extract validation messages and label information (`getValidationMessageMap` and `getLabelContent`). Then we empty out the contents of the element so it can be loaded with a template. The compile function returns a postLink function to load a suitable template.\r\n\r\nOnce you terminate compilation, you are responsible for setting up new scopes and correctly transcluding content. We will use the `$interpolate` service to turn the string into an expression. We use this method to copy the HTML content into the directive, where it will be compiled with the template:\r\n\r\n    getLabelContent = (element) ->\r\n      label = element.find 'label'\r\n      return label[0] && label.html()\r\n\r\nWe'll use `ng-repeat` to display strings for failing validations, so we store validation messages on the template's scope as `$validationMessages`. These messages may contain interpolated strings, so we'll interpolate them during compilation.\r\n\r\n    getValidationMessageMap = (element) ->\r\n      messageFns = {}\r\n      validators = element.find 'validator'\r\n      angular.forEach validators, (validator) ->\r\n        validator = angular.element validator\r\n        messageFns[validator.attr('key')] = $interpolate validator.text\r\n      return messageFns\r\n\r\nHere we use the `$interpolate` service, which adds the interpolation to a map based on the validator element. This map is added to the template scope as `$validationMessages`. `$interpolate` works like this:\r\n\r\n    getFullName = $interpolate '{{first}} {{last}}'\r\n    scope = { first: 'Pete', last: 'Bacon Darwin' }\r\n    fullName = getFullName scope\r\n\r\nTo display validation errors, we'll set up something like this:\r\n\r\n    <span class="help-inline" ng-repeat="error in $fieldErrors">\r\n      {{$validationMessages[error](this)}}\r\n    </span>\r\n\r\n*NOTE:* Using `this` in the template will refer to the current scope.\r\n\r\nThen we will load templates dynamically.\r\n\r\n    loadTemplate = (template) ->\r\n      return $http.get template, {cache: $templateCache}\r\n        .then (response) ->\r\n          return angular.element response.data\r\n        , (response) ->\r\n          throw new Error "Template not found: #{template}"\r\n\r\nThis function returns a promise to the wrapped element and uses `$templateCache` to cache the templates when we load them.\r\n\r\nThe field directive's link function calls `loadTemplate`, which does a lot of work once the promise is resolved\r\n\r\n    childScope = scope.$new()\r\n    childScope.$validationMessages = angular.copy validationMsgs\r\n    childScope.$fieldId = attrs.ngModel.replace('.', '_')\r\n      .toLowerCase() + '_' + childScope.$id\r\n\r\n    childScope.$watch '$field.$dirty && $field.$error', (errorList) ->\r\n      childScope.$fieldErrors = []\r\n      angular.forEach errorList, (invalid, key) ->\r\n        if invalid\r\n          childScope.$fieldErrors.push key\r\n    , true\r\n\r\nThe new child scope gets properties attached to it.\r\n\r\n    inputElement = findInputElement templateElement\r\n    angular.forEach attrs.$attr, (original, normalized) ->\r\n      value = element.attr original\r\n      inputElement.attr original, value\r\n\r\n    inputElement.attr 'name', childScope.$fieldId\r\n    inputElement.attr 'id', childScope.$fieldId\r\n\r\nThis copies the attributes from the element to the template and adds computed values:\r\n\r\n    labelElement = templateElement.find 'label'\r\n    labelElement.attr 'for', childScope.$fieldId\r\n    labelElement.html labelContent\r\n\r\nHere the `for` attribute is applied to the label element, as required\r\n\r\n    element.append templateElement\r\n    $compile(templateElement)(childScope)\r\n    childScope.$field = inputElement.controller 'ngModel'\r\n\r\nThis appends the templateElement to the original field element, uses the `$compile` service to compile and link to our new `childScope`. Then `ngModelController` is available for us to the `$field` property to good use.\r\n\r\n## Chapter 10 - AngularJS for an International Audience\r\n\r\n### Using locale-specific symbols and settings\r\n\r\nIf you want to configure your application to include settings specific to French-Canadian, include the locale file\r\n\r\n    <script src="lib/angular/angular-locale_fr-ca.js"></script>\r\n\r\nThen include the locale as a dependency in your module\r\n\r\n    angular.module 'locale', ['ngLocale']\r\n\r\nThese locale files expose constants that will be useful, such as `$locale.NUMBER_FORMATS` and `$locale.DATETIME_FORMATS.MONTH`.\r\n\r\nWith the date filter, you can use:\r\n\r\n* medium\r\n* short\r\n* fullDate\r\n* longDate\r\n* mediumDate\r\n* shortDate\r\n* mediumTime\r\n* shortTime\r\n\r\nWith an expression:\r\n\r\n    {{ now | date: 'fullDate' }}\r\n\r\nThe locale will produce different results depending on the desired formate.\r\n\r\nThe currency and number filters behaves similarly\r\n\r\n    {{100 | currency}}\r\n    {{1000.5 | number}}\r\n\r\n\r\n### Handling translations\r\n\r\nIf you have translated strings already available in JSON like this:\r\n\r\n    # en-us\r\n    {\r\n      'crud.user.remove.success': 'A user was removed successfully.',\r\n      'crud.user.remove.error': 'There was a problem removing a user.'\r\n    }\r\n\r\n    # pl-pl\r\n    {\r\n      'crud.user.remove.success': 'Użytkownik został usunięty.',\r\n      'crud.user.remove.error': 'Wystąpił błąd podczas usuwania użytkownika.'\r\n    }\r\n\r\nYou can create an `i18n` filter to translate expressions\r\n\r\n    angular.module 'i18nfilter', ['i18nmessages']\r\n      .filter 'i18n', (i18nmessages) ->\r\n        return (input) ->\r\n          if !angular.isString input\r\n            return input\r\n          return i18nmessages[input] || '?'+input+'?'\r\n\r\nThis would rely on translated messages, declared as a value in a separate module\r\n    \r\n    angular.module 'i18nmessages', []\r\n      .value 'i18nmessages',\r\n        'greetings.hello': 'Hello'\r\n\r\nThen set the greeting as a filtered expression\r\n\r\n    {{ 'greetings.hello' | i18n }}\r\n\r\nThis could create performance problems with larger pages, though. Instead you could create directives, like this:\r\n\r\n    <span><i18n key='greetings.hello'></i18n>, {{name}}!</span>\r\n\r\nThen AngularJS doesn't need to watch the directive, but the syntax is not very pretty. We also can't use a directive within the string of an attribute, such as a placeholder (`placeholder="Provide name here"`)\r\n\r\nA third approach would be to generate language-specific templates and download them to the browser, this requires the help of a build tool like Grunt.js. The template would look like this:\r\n\r\n    <div>\r\n      <h3><%= greeting.hello %>, {{name}}!</h3>\r\n      <input type="text" ng-model="name" placeholder="<%= input.name %>">\r\n    </div>\r\n\r\nThen Grunt would produce the translated partials in corresponding folders\r\n\r\n    /en-us/hello.tpl.html\r\n    /fr-ca/hello.tpl.html\r\n    /pl-pl/hello.tpl.html\r\n\r\nFor translating strings in JavaScript code, you would need to create a custom service. This service would use the `$interpoalte` service to specify localized messages like:\r\n\r\n    "A user with id '{{id}}' was removed successfully."\r\n\r\nThis could be implemented here:\r\n\r\n    angular.module 'localizedMessages', []\r\n      .factory 'localizedMessages', ($interpolate, i18nmessages) ->\r\n        handleNotFound = (msg, msgKey) ->\r\n          return msg || "?#{msgKey}?"\r\n\r\n        return {\r\n          get: (msgKey, interpolateParams) ->\r\n            msg = i18nmessages[msgKey]\r\n            if msg\r\n              return $interpolate(msg)(interpolateParams)\r\n            else\r\n              return handleNotFound msg, msgKey\r\n        }\r\n\r\n### Patterns, tips, and tricks\r\n\r\nTo find out what language a user prefers, you can use:\r\n\r\n* Browser's settings\r\n* HTTP request headers\r\n* URL or request parameters\r\n* Server-side settings\r\n\r\nIf we include locales as part of the URL, we should include a `base` tag\r\n\r\n    <base href="/<%= locale %>/">\r\n\r\nIf you are pre-fetching partials, you will probably not need to do this.\r\n\r\nAngularJS locale will need to be selected upfront, and can't be changed during application runtime. You can trigger a page refresh and use deep linking to make sure the user ends up in the same place. We could create a `switchLocaleUrl` function:\r\n\r\n    $scope.switchLocaleUrl = (targetLocale) ->\r\n      return "/#{targetLocale}/#{$location.url()}"\r\n\r\nThen in the markup:\r\n\r\n    <a ng-href="switchLocaleUrl('fr-ca')" target="_self">Francais</a>\r\n\r\n#### Custom formatting for dates, numbers, and currencies\r\n\r\nYou can overwrite the decorator for the date filter\r\n\r\n    angular.module 'filterCustomization', []\r\n      .config ($provide) ->\r\n        customFormats =\r\n          'fr-ca'\r\n            'fullDate' : 'y'\r\n\r\n        $provide.decorator 'dateFilter', ($delegate, $locale) ->\r\n          return (input, format) ->\r\n            return $delegate input, customFormats[$locale.id][format] || format\r\n\r\n## Chapter 11 - Writing Robust AngularJS Web Applications\r\n\r\n### Understanding the inner workings of AngularJS\r\n\r\nAngularJS propagates changes from the DOM tree to the model through DOM event listeners. We could make a simplified version of the `ng-model` directive to illustrate this:\r\n\r\n    angular.module 'internals', []\r\n      .directive 'simpleModel', ($parse) ->\r\n        return (scope, element, attrs) ->\r\n          modelGetter = $parse(attrs.simpleModel)\r\n          modelSetter = modelGetter.assign\r\n\r\n          # Model -> DOM updates\r\n          scope.$watch modelGetter, (newVal, oldVal) ->\r\n            element.val newVal\r\n\r\n          # DOM -> Model updates\r\n          element.bind 'input', ->\r\n            modelSetter scope, element.val()\r\n\r\nHere you can see the `input` event handler listens to changes and updates the model. The `$parse` service is used to evaluate AngularJS expressions or set a model's value. When called with an expression as its argument, it will return a getter function, which exposes an `assign` property to use as a setter. The `$parse` service can also be used to make a simplified version of `ng-bind`.\r\n\r\n    .directive 'simpleBind', ($parse) ->\r\n      return (scope, element, attrs) ->\r\n        modelGetter = $parse attrs.simpleBind\r\n        scope.$watch modelGetter, (newVal, oldVal) ->\r\n          element.text modelGetter scope\r\n\r\nThen we can use these in the markup\r\n\r\n    <div ng-init="name="World"">\r\n      <input simple-model="name">\r\n      <span simple-bind="name"></span>\r\n    </div>\r\n\r\nThe `$watch` method lets us monitor model mutations. The basic format is:\r\n\r\n    scope.$watch(watchExpression, modelChangeCallback)\r\n\r\nAngularJS does not use any kind of polling mechanism. Certain changes will trigger it's behavior:\r\n\r\n* DOM events\r\n* XHR response callbacks\r\n* Browser location changes\r\n* setTimeout/setInterval callbacks\r\n\r\nWhen we execute the `$apply` method on a scope object, it starts the model-observing machinery. We could do this with our simple model directives, either on any change of the input or when the user leaves the input field.\r\n\r\n    element.bind 'input', ->\r\n      scope.$apply ->\r\n        modelSetter scope, element.val()\r\n\r\n    element.bind 'blur', ->\r\n      scope.$apply ->\r\n        modelSetter scope, element.val()\r\n\r\nThe `$digest` loop is used to detect model changes. This service address two problems:\r\n\r\n* Decide which parts of the model have changed and which DOM properties should be updated.\r\n* Postponing DOM repaints until the model stabilizes.\r\n\r\nWhen a new `$watch` is added on the scope, AngularJS evaluates the `watchExpression` and saves the result. Then, once entering the `$digest` loop, it is checked again and the new value is compared to the saved one. The `modelChangeCallback` is executed if they differ.\r\n\r\nAngular will keep executing the `$digest` loop until no changes are reported. We could use this to enforce a model that specifies an end date must always be after a start date.\r\n\r\n    # html\r\n    div\r\n      form\r\n        | Start date:\r\n        input ng-model='startDate'\r\n        | End date:\r\n        input ng-model='endDate'\r\n\r\n    # js\r\n    oneDayAhead = (dateToIncrement) ->\r\n      return dateToIncrement.setDate(dateToIncrement.getDate() + 1)\r\n\r\n    $scope.watch 'startDate', (newValue) ->\r\n      if newValue <= $scope.startDate\r\n        $scope.endDate = oneDayAhead $scope.startDate\r\n\r\nEach turn of the `$digest` loop will recompute watch expressions on all scopes.\r\n\r\nIf a model never stablizes, such as with a random generator:\r\n\r\n    <span>Value: {{random()}}</span>\r\n\r\n    $scope.random = Math.random\r\n\r\nThen the `$digest` loop will repeat until Angular reports an error.\r\n\r\n### Performance tuning - set expectations, measure, tune, and repeat\r\n\r\nPerformance tuning requires identifying bottlenecks on an already measured system. Using the **Batarang** Chrome extension will serve as an instrument to measure performance.\r\n\r\n### Performance tuning of AngularJS applications\r\n\r\nTo keep `$digest` loops fast, we want to:\r\n\r\n* Make individual watches faster\r\n* Limit the number of watches evaluated as part of an individual `$digest` cycle\r\n\r\nIn `$watch` functions, the `watchExpression` is executed twice for each `$digest` loop, so these need to be fast. One thing to watch out for is functions that are within expressions\r\n\r\n    {{myComplexComputation()}}\r\n\r\nThis is part of the `watchExpression`, so it will be run repeatedly. Filters are also common in expressions, so watch for those.\r\n\r\nAvoid reading DOM properties as part of the `watchExpression`.\r\n\r\nAny watches on `ng-hide` objects are still run and evaluated. So think about how you can avoid watching a hidden object.\r\n\r\nAlso note that `console.log()` will slow down your system, so remove those for production or performance testing.\r\n\r\nWe need to use `scope.$apply()` to assign two-way binding, but we can use `scope.$digest` is some cases to make redraws more efficient.\r\n\r\nYou can unregister unnecessary watches:\r\n\r\n    watchUnregisterFn = $scope.$watch 'name', (newValue, oldValue) ->\r\n      console.log "Watching 'name' variable"\r\n\r\n    # after some time\r\n\r\n    watchUnregisterFn()\r\n\r\nBe aware of when the `$digest` loop gets triggered\r\n\r\n* Navigation events\r\n* Network events (calls to `$http`)\r\n* DOM events (`ng-click`)\r\n* JavaScript timers (`$timeout`)\r\n\r\nWith the `$timeout` function, we could make a simple clock directive\r\n\r\n    .directive 'clock', ($timeout, dateFilter) ->\r\n      return {\r\n        restrict: 'E'\r\n        link: (scope, element, attrs) ->\r\n          update = ->\r\n            #get current time, format and update text\r\n            element.text dateFilter(new Date(), 'hh:mm:ss')\r\n            # repeat in 1 second\r\n            $timeout update, 1000, false\r\n\r\n          update()\r\n      }\r\n\r\nAdding the third argument to the `$timeout` function, `false`, specifies that `scope.$appy` should not be called.\r\n\r\n`$digest` loops are often registered through DOM event handlers, especially related to mouse movent. For example, to change an element's class:\r\n\r\n    <div ng-class='{active: isActive}' ng-mouseenter='isActive=true' ng-mouseleave='isActive=false'>Some content</div>Content</div>\r\n\r\nThis triggers a `$digest` loop every time the mouse pointer travels over the element. If you do this a lot, consider creating a cusom directive to do respond to DOM events.\r\n\r\nEstimate how many times `$digest` loop will need to run and try to think of ways to stabilize the model more quickly.\r\n\r\nValue or identity comparisons are quick, but avoid using property-by-property comparisons.\r\n\r\nMinimize the amount of text around a variable that is being watched.\r\n\r\n    <p>...Very long text {{variable}} with some more very long text...</p>\r\n\r\nInstead:\r\n\r\n    <p>...Very long text <span ng-bind='variable'></span> with some more...</p>\r\n\r\n## Chapter 12 - Packaging and Deploying AngularJS Web Applications\r\n\r\n### Improving network-related performance\r\n\r\nWhen minifying, load dependencies as an array\r\n\r\n    angular.module 'projects', ['resources.projects']\r\n      .controller 'ProjectsViewCtrl', ['$scope', '$location', ($scope, $location) ->\r\n        # code\r\n      ]\r\n\r\nTo preload a template, you can use the `<script></script>` tag. These can be embedded in the `index.html` page or somewhere else that would be loaded into the browser.\r\n\r\n    <script type="text/ng-template" id="tpls/user/list.html">\r\n      <p>Template</p>\r\n    </script>\r\n\r\nWe could also prepopulate the `$templateCache`. Say there is a template:\r\n\r\n    <div class="hello">Hello, {{World}}</div>\r\n\r\nAdd the URL `tpl/hello.tpl.html` and fill in the `$templateCache` service:\r\n\r\n    angular.module 'app', []\r\n      .run ($templateCache) ->\r\n        $templateCache.put 'tpls/hello.tpl.html', '<div class=\\'hello'\\'>Hello, {{world}}?</div>'\r\n\r\nYou would probably not want to do this by hand, so you could create a build-task to iterate over the templates and generate JavaScript code responsible for filling in the `$templateCache`. In the sample app, a build task generates a `templates` module which does this, then the `templates` module is add as a dependency for the app module. There is a [Grunt.js task](https://github.com/karlgoldstein/grunt-html2js) to automate this process.\r\n\r\n### Optimizing the landing page\r\n\r\nYou can hide portions of the DOM until Angular is ready with `ng-cloak`. You could put this in the `body` element if you wanted. In some places, you could use `ng-bind` instead of an expression like `Hello, {{name}}`. Then it will remain blank until processed.\r\n\r\n### Supported browsers\r\n\r\nKill IE\r\n	4	2015-03-31 21:14:42.967038	2015-03-31 21:14:42.967038
82	Getting Started with OAuth 2.0	getting-started-with-oauth-2-0	## 1 - Introduction\r\n\r\n### Terminology\r\n\r\n<dl>\r\n  <dt>Authentication</dt>\r\n  <dd>Process of verifying the identity of a user.</dd>\r\n  <dt>Federated Authentication</dt>\r\n  <dd>Applications may rely on other services to verify users, like LDAP or Active Directory.</dd>\r\n  <dt>Authorization</dt>\r\n  <dd>Verify user has the right to perform some action.</dd>\r\n  <dt>Delegated Authorization</dt>\r\n  <dd>Granting access to someone or some application to perform actions on your behalf.</dd>\r\n  <dt>Roles</dt>\r\n  <dd>Actions in the OAuth protocol flows:\r\n    <dl>\r\n    \t<dt>Resource Server</dt>\r\n    \t<dd>Server hosting user-owned resources and protected by OAuth. The Provider</dd>\r\n    \t<dt>Resource Owner</dt>\r\n    \t<dd>The application user</dd>\r\n    \t<dt>Client</dt>\r\n    \t<dd>Application requesting to perform actions on behalf of resource owner.</dd>\r\n    \t<dt>Authorization Server</dt>\r\n    \t<dd>Gets consent from resource owner to issue access token to clients</dd>\r\n    </dl>\r\n  </dd>\r\n</dl>\r\n\r\nOAuth 2.0 does not require a complex signature. This poses a potential risk, the API request may be accidentially sent to a malicious endpoint. To mitigate this concern, it is important not to take shortcuts and follow the following steps to validate SSL/TLS certificate chains:\r\n\r\n* Check the hostname on the certificate to match the URL\r\n* Verify each certificate properly chains up to a valid and trusted certificate authority(CA)\r\n* Ensure that the CA bundle on your server is secure and cannot be modified by potential attackers\r\n\r\nClients can sign their OAuth 2.0 requests when supported or required by the API provider. To do this, you must get a MAC key from the authorization server. This can be done each time an `access_token` is returned or when the developer registers their application with the API provider. This must be done over SSL/TLS and must be kept confidential.\r\n\r\nThe MAC signature must be included in the `Authorization` header of a request to the API. Generating this signautre involves creating a normalized request string and performing a cryptographic signature. It is recommended that developers use a prebuilt library for this.\r\n\r\nOAuth 1.0 was not designed to handle mobile, desktop, or JavaScript applications, but OAuth 2.0 provides several features to handle these cases.\r\n\r\n<dl>\r\n  <dt>Client Profiles</dt>\r\n  <dd>There are several types of client profiles:\r\n    <dl>\r\n    \t<dt>Server-side web application</dt>\r\n    \t<dd>An OAuth client running on a web server. The application is accessed by the user and makes API calls using a server-side programming language. User has no access to the OAuth client secret or any access tokens.</dd>\r\n    \t<dt>Client-side application running in a web browser</dt>\r\n    \t<dd>An OAuth client running in a user's web browser. Here, the client makes API requests. This could be a JavaScript application, browser extension, or some other plug-in technology. OAuth crednetials cannot be trusted to be kept confidential from the resource owner in this case.'</dd>\r\n    \t<dt>Native application</dt>\r\n    \t<dd>Similar to a client-side application, the credentials cannot be trusted to be kept confidential.</dd>\r\n    </dl>\r\n  </dd>\r\n  <dt>Access Tokens</dt>\r\n  <dd>Most OAuth 2.0 APIs require only bearer tokens, instead of a signature-based MAC Access Authentication. After obtaining the access token, it can be sent with requests via the HTTP `Authorization` header. There are other ways to send the request, such as query parameter or form-encoded body parameter, but this is not always supported.</dd>\r\n  <dt>Authorization Flows</dt>\r\n  <dd>There are 4 primary **grant types** used for obtaining authorization.\r\n    <dl>\r\n    \t<dt>Authorization Code</dt>\r\n    \t<dd>Most appropriate for server-side web applications. When resource owner has authorized access, they are redirected back to the web application with an *authorization code* as a query parameter in the URL. This code must be exchanged for an aaccess token by the client application, done server-to-server and requires a `client_id` and `client_secret`, to prevent the resource owner from obtaining the access token. Also allows refresh tokens.</dd>\r\n    \t<dt>Implicit grant for browser-based client-side application</dt>\r\n    \t<dd>Most simplistic, optimized for client-side web applications. Resource owner grants access to the application and a new access token is generated and passed back to the application using a fragment in the URL. Using javascript, the token is extracted and used to make API requests. This grant type does not require intermediary "authorization code", but it is not possible to request refresh tokens.</dd>\r\n    \t<dt>Resource owner password-based grant</dt>\r\n    \t<dd>Enables resource owner's username and password to be exchanged for an OAuth access token. Only used for highly-trusted, such as another application written by the API provider. The password is exposed to the client, but not stored on the device. After initial authentication only the OAuth token needs to be stored. User can revoke access to the app without changing the password. The token can be scoped to a limited set of data.'</dd>\r\n    \t<dt>Client credentials</dt>\r\n    \t<dd>Allows application to obtain access token for client resources, or when authorization has been previously arragned. Appropriate for applications that need access to APIs on behalf of themselves rather than on behalf of a specific user, such as storage services or databases</dd>\r\n    </dl>\r\n  </dd>\r\n</dl>\r\n\r\nOutside the core spec, there is also:\r\n\r\n* Device profile - used for devices that have limited input options, such as game consoles. User typically needs a computer to access the website.\r\n* SAML bearer assertion profile - Enables exchanging SAML assertion for enterprise environments that have SAML authorization setup.\r\n\r\n## 2 - Server-Side Web Application Flow\r\n\r\nWeb Application Flow = Authorization Code Flow\r\n\r\n1. Resource owner is first redirected by the application to the OAuth authorization server at the API provider.\r\n2. Server checks to see if the user has an active session.\r\n3. If she does, the authorization server prompts her for access to the requested data.\r\n4. After she grants access, she is redirected back to the web application and the authorization code is included in the URL as a `code` query parameter.\r\n\r\n        http://www.example.com/oauth_callback?code=ABC1234\r\n\r\n5. Because `code` is passed as a query parameter, the browser sends it to the web server acting as the client.\r\n6. Authorization code is then exchanged for an access token using server-to-server call from application to the authorizationo server.\r\n7. Access token is then used by the client to make API calls.\r\n\r\nThe OAuth token should not be leaked to the browser, where the user might gain access. Authorization is accomplished via *authorization code* that is passed through the browser. This code is exchanged for an access token before calls can be made to the protected API. This only succeeds if a correct `client_secret` is passed with the request, ensuring the access token is confidential as long as client security is maintained. API requests are hereby directly attributable to the client and its developer. The access token cannot be leaked via malicious code through the browser history, headers, javascript, etc. You could in this way store a refresh token in the application's database to enable offline access to data, but there is an additional risk in this case that could compromise access to data.'\r\n\r\n### User Experience\r\n\r\nA payroll application - Update manager's task list to remind manager to\r\napprove timesheets.\r\n\r\n1. Payroll application lets manager know that it will modify tasks, redirect\r\nto list app's OAuth authorization server\r\n2. OAuth authorization server uses list API to prompt user for permission\r\n3. User approves, redirected to payroll application which now has access to\r\nthe tasks.\r\n\r\n### Step-by-Step\r\n\r\nRegister your app with the API provider to obtain client ID and client secret.\r\nThis example will use PHP with the Google Tasks API and Google's OAuth 2.0\r\nauthorization server.\r\n\r\n#### Step 1. Let the user know what you're doing and request authorization\r\n\r\nIndicate the user will be redirected. Redirect user's browser to OAuth authorization page. For google, this is `https://acounts.google.com/o/oauth2/auth`. Attach query parameters to this link, including: `client_id`, `redirect_uri`, `response_type`, `state`, and `scope`. `scope` refers to the data your application is requesting. In this case, the Google Tasks scope is `https://www.googleapis.com/auth/tasks`. `response_type` indicates the authorization code that will be returned to the application after the user approves the authorization request. `state` should be a random unique string for this particular request, kept secret from the client (perhaps in a server-side session). User will be prompted to authenticate with provider.\r\n\r\nHere's example PHP code:\r\n\r\n    <?php\r\n    session_start();\r\n\r\n    // Generate random value for use as the 'state', to mitigate risk of CSRF\r\n    // attacks\r\n    $_session['state'] = rand(0,999999999);\r\n\r\n    $authorizationUrlBase = 'https://accounts.google.com/o/oauth2/auth';\r\n    $redirectUriPath = '/oauth2callback.php';\r\n\r\n    $queryParams = array(\r\n      'client_id' => '240195362.apps.googleusercontent.com',\r\n      'redirect_uri' => (isset($_SERVER['HTTPS'])?'https://':'http://') .\r\n      $_server['HTTP_HOST'] . $redirectUriPath,\r\n      'scope' => 'http://www.googleapis.com/auth/tasks',\r\n      'response_type' => 'code',\r\n      'state' => $_SESSION['state'],\r\n      'approval_prompt' => 'force', //always request user consent\r\n      'access_type' => 'offline' // obtain a refresh token\r\n    );\r\n\r\n    $goToUrl = =$authorizationUrlBase . '?' . http_build_query($queryParams);\r\n\r\n    //Output a webpage directing users to the $goToUrl after they click\r\n    // a button\r\n    include 'access_request_template.php';\r\n    ?>\r\n\r\n\r\nHere, *approval_prompt* and *access_type* are specific to Google's\r\nimplementation. `force` indicates that the user will be prompted for approval\r\neach time. `offline` indicates the application will need access to user data\r\nwhile user is not at the keyboard.\r\n\r\n##### Error Handling\r\n\r\nIf there is an issue with the `redirect_uri`, `client_id`, or other request\r\ninformation, the authorization server should present an error and the user is\r\nnot redirected back to the application. If the user is denied, the error\r\nresponse will be generated and the user is redirected back to the\r\n`redirect_uri` with a query parameter called `error`. Other error requests\r\nyour application may need to handle are `invalid_request`,\r\n`unauthorized_client`, `unsupported_response_type`, `invalid_scope`,\r\n`server_error`, `temporarily_unavailable`.\r\n\r\n#### Step 2: Exchange authorization code for an access token\r\n\r\nIf there are no errors, the authorization server redirects the user back to\r\nthe application at the URL specified in `redirect_uri`. Two query parameters\r\nwill be included by the authorization server in the redirect\r\n\r\n* code - indicating the user has approved the request\r\n* state - value originally passed the the authorization server. This is compared to the original for authenticity\r\n\r\n`state` is compared against the value sent in step 1, to make sure there is no request forgery. The `code` needs to be exchanged for an OAuth access token. A library will usually handle this, but you can do it yourself with an HTTP POST request to the token endpoint, passing the following parameters:\r\n\r\n* code - Authorization code passed to application\r\n* redirect_uri - Location registered from initial request\r\n* grant_type - Value set to `authorization_code`, because you're exchanging authorization code for access token.\r\n\r\nThis POST request needs to be authenticated using the `client_id` and `client_secret` obtained during application registration. This could be done with HTTP Basic authorization or by passing the `client_id` and `client_secret` as additional POST parameters. HTTP Basic authorization is not always available. If the request is properly authenticated and the other parameters are valid, the authorization server will return an OAuth access token as JSON:\r\n\r\n    {\r\n      "access_token" : "ya29.AHES6ZSzX",\r\n      "token_type" : "Bearer",\r\n      "expires_in" : 3600,\r\n      "refresh_token" : "1/iQI98wWFfJNFWIzs5EDDrSiYewe3dFqt5vIV-9ibT9k"\r\n    }\r\n\r\nHere's an example for exchanging the authorization code for an access token:\r\n\r\n    <?php\r\n    session_start();\r\n    include 'http_client.inc';\r\n\r\n    $code = $_GET['code'];\r\n    $state = $_GET['state'];\r\n\r\n    // Verify the state value is the same as step 1\r\n    if ((! is_numeric($state)) || ($state != $_SESSION['state'])) {\r\n      throw new Exception('Error validating state. Possible CSRF.');\r\n    }\r\n\r\n    $accessTokenExchangeUrl = 'https://accounts.google.com/o/oauth2/token';\r\n    $redirectUriPath = '/oauth2callback.php';\r\n\r\n    //Example values to send\r\n    $accessTokenExchangeParams = array(\r\n      'client_id' => '2401.apps.googleusercontent.com',\r\n      'client_secret' => 'hBMLD98',\r\n      'grant_type' => 'authorization_code',\r\n      'code' => $code,\r\n      'redirect_uri' => "https" . $redirectUriPath\r\n    );\r\n\r\n    $httpClient = new HttpClient();\r\n    $responseJson = $httpClient->postData(\r\n      $accessTokenExchangeUrl,\r\n      $accessTokenExchangeParams);\r\n    $responseArray = json_decode($responseJson, TRUE);\r\n\r\n    $accessToken = $responseArray['access_token'];\r\n    $expiresIn = $responseArray['expires_in'];\r\n    $refreshToken = $responseArray['refresh_token'];\r\n\r\n    $_SESSION['access_token'] = $accessToken;\r\n\r\n    //Refresh token should typically be stored in a database\r\n    $_SESSION['refresh_token'] = $refreshToken;\r\n\r\n    header('Location: /get_data.php');\r\n    ?>\r\n\r\nThe application can now access the API directly until the token is expired. Access tokens and refresh tokens should typically be hidden from the user.\r\n\r\n##### Why two tokens?\r\n\r\nBecause OAuth uses bearer tokens without signatures, an attack could access the compromised service. Time-limited access tokens reduce the potential attack. When an API service receives the access token from a client, it ensures it's valid by making an internal request to the OAuth authorization service. This introduces latency to the requests, so some providers use signed or encrypted strings.\r\n\r\n#### Step 3 - Call the API\r\n\r\nFor providers using bearer tokens, you can include the token with requests, so that you don't need a signature. This token can be sent in the HTTP Authorization header. You can do this with curl through PHP:\r\n\r\n    <?php\r\n    session_start();\r\n    require_once 'http_client.inc';\r\n\r\n    $tasksUrl = 'http://www.googleapis.com/tasks\r\n\r\n    $accessToken = $_SESSION['access_token'];\r\n\r\n    $httpClient = new HttpClient();\r\n    $headers = array('Authorization: Bearer ' . $accessToken);\r\n    // You could also append as a query aparmeter\r\n    // $tasksUrl .= '?access_token=' . urlencode($accessToken);\r\n\r\n    $response = $httpClient->getData($tasksUrl, $headers);\r\n    $responseArray = json_decode($response, TRUE);\r\n\r\n    foreach ($responseArray["items"] as $item) {\r\n      echo '<li>' . $item['title'] . "</li>\\n";\r\n    }\r\n    ?>\r\n\r\n##### Error Handling\r\n\r\nIf the access token is no longer valid, you will get an HTTP 4xx error. The response header may include additional details.\r\n\r\n#### Step 4a. Refresh the access token\r\n\r\nIf a provider uses limited term access tokens, you will get two additional parameters: `expires_in` and `refresh_token`. `expires_in` indicates remaining lifetime in seconds. If you are trying to optimize, make sure to store the access token expiration time to check, then you can refresh the access token instead of waiting for the API server to reject the request and try refreshing. Refreshing is done by using HTTP POST with the `grant_type` value as `refresh_token` and then including the `refresh_token`.\r\n\r\n    <?php\r\n    include 'http_client.inc';\r\n\r\n    function getNewAccessToken($refreshToken) {\r\n      $refreshTokenUrl = 'https://accounts.google.com/o/oauth2/token';\r\n\r\n      $refreshTokenParams = array(\r\n        'client_id' => '2401.apps.googleusercontent.com',\r\n        'client_secret' => 'hBMLD98',\r\n        'grant_type' => 'refresh_token',\r\n        'refresh_token' => $refreshToken\r\n      );\r\n\r\n      $httpClient = new HttpClient();\r\n      $responseJson = $httpClient->postData(\r\n        $refreshTokenUrl, $refreshTokenParams);\r\n      $responseArray = json_decode($responseJson, TRUE);\r\n      return $responseArray;\r\n    }\r\n\r\n    $responseArray = getNewAccessToken('adsdfb');\r\n    $accessToken = $responseArray['access_token'];\r\n    $refreshToken = $responseArray['refresh_token'];\r\n    $expiresIn = $responseArray['expires_in'];\r\n    ?>\r\n\r\nYou may or may not get a new refresh token, make sure to prepare to save it.\r\n\r\n#### Step 4b - Obtaining a new access token\r\n\r\nSome applications may not need persistent access to user data, but only need access when the user is present. In these cases the application would not need a refresh token, but can be sent to the API provider again. If the provider has already granded authorization, it will have it's own set of timeout rules that may require reauthentication.\r\n	1	2015-03-31 21:14:43.026138	2015-03-31 21:14:43.026138
83	Rspec with Ruby - Lynda.com	rspec-with-ruby-lynda-com	## Getting Started\r\n\r\n### Writing Good tests\r\n\r\nWrite *Happy paths* and *Unhappy paths*, to catch success and failures. Then make sure you have tests for *Edge cases* that will have less likelyhood of happening. Also test any bug fixes.\r\n\r\nYou don't want to test basic Ruby and frameworks and APIs, like Ruby on Rails. You also don't want to overlap behavior testing, don't test model methods in the controller if they're already covered in the models.\r\n\r\n### Configuration\r\n\r\nDefault options:\r\n\r\n    --no-color, --color\r\n    --format progress, --format documentation\r\n    --no-profile, --profile\r\n    --no-fail-fast, --fail-fast\r\n    --order defined, --order random\r\n\r\nYou can set default configuration within a project or in a global `~/.rspec` file. A new configuration file is called `./.rspec-local`, which is intended not to be checked in, for personal preferences.\r\n\r\n## First Steps and Concepts\r\n\r\nTo initialize rspec in a Ruby project\r\n\r\n    rspec --init\r\n\r\nThis creates the `.rspec` and `spec/spec_helper.rb` files. Then you can create specs in the `spec` directory. Create `spec/car_spec.rb`. This file just needs to `require 'car'` to run tests on it.\r\n\r\n## Basic Syntax\r\n\r\nYou can `describe` a string or a class name, which will set up your examples. Then set up your examples in `it` blocks. You can create more example groups with another `describe` block. You may want to set up new `describe` or `context` blocks for each method. Then you set an `expect` method.\r\n\r\n## Writing specs\r\n\r\nHere's an example:\r\n\r\n    require 'car'\r\n\r\n    describe 'Car' do\r\n      describe 'attributes' do\r\n        it 'allows reading and writing to make' do\r\n          car = Car.new\r\n          car.make = 'Test'\r\n          expect(car.make).to eq('Test')\r\n        end\r\n      end\r\n\r\n      describe '.colors' do\r\n        it 'returns an array of color names' do\r\n          c = ['blue', 'black', 'red', 'green']\r\n          expect(Car.colors).to match_array(c)\r\n        end\r\n      end\r\n\r\n      describe '#full_name' do\r\n        it 'returns a string in the expected format' do\r\n          @honda = Car.new(make: 'Honda', year: 2004, color: 'blue')\r\n          expect(@honda.full_name).to eq('2004 Honda (blue)')\r\n        end\r\n\r\n        context 'when initialized with no arguments' do\r\n          it 'returns a string using default values' do\r\n            car = Car.new\r\n            expect(car.full_name).to eq('2007 Volvo (unknown)')\r\n          end\r\n        end\r\n        \r\n      end\r\n    end\r\n\r\nIt's convention to prefix class methods with `.` and instance methods with `#`.\r\n\r\n### Running specs\r\n\r\nYou can specify options when you run the tests\r\n\r\n    rspec spec/car_spec.rb --color\r\n\r\nIf you want to change format you can do `-f` with `d` for documentation and `p` for progress. `--profile`(`-p`) will list your test time for slowest tests. `--fail-fast` will stop your test after a single failure. You can also use `puts` within a test to output information to the console.\r\n\r\n### Skipping examples and pending\r\n\r\nPrefix describe or it with an `x` to skip the block. If you put `pending` or `skip` anywhere in the test block, it will be marked as pending. You can pass a message into these methods. If you use `pending`, the code will still run but it is expected to fail. So you may want to use `skip` for most cases. If you use `it` without a block, it is considered pending.\r\n\r\n## Working with Expectations\r\n\r\n### Fundamentals\r\n\r\nAvoid multiple expectations in a single block. Some things you can use with `expect().to`:\r\n\r\n* eq('Kevin')\r\n* match(/K.v.n/)\r\n* be(true)\r\n* match_array([4,5,6,7])\r\n\r\nThese are called matchers.\r\n\r\n### Deprecated: should\r\n\r\nIn RSpec 2:\r\n\r\n    @count.should eq(3)\r\n\r\nIn RSpec 3:\r\n\r\n    expect(@count).to eq(3)\r\n\r\nThe `should` method, requires monkey patching, applying a `should` method to\r\neach object. `expect` is a method that can wrap around any object. You can\r\nturn off the `should` syntax in the spec helper\r\n\r\n    config.expect_with :rspec do |c|\r\n      c.syntax = :expect\r\n    end\r\n\r\nAlso, convention is to leave `should` out of your expectation descriptions.\r\n\r\n### Equivalence Matchers\r\n\r\nRuby has equalivence matchers.\r\n\r\n    x = 'Lynda'\r\n    x == 'Lynda'\r\n    x.eql?('Lynda')\r\n    x.equal?('Lynda') # Object equality\r\n\r\nThe corresponding RSpec matchers.\r\n\r\n    expect(x).to eq(1)\r\n    expect(x).to eql(1)\r\n    expect(x).to equal(1)\r\n    expect(x).to be(1)\r\n\r\nThese are in order of strictness. `eq` is loose equality. `eql` is strict`.\r\n`equal` and `be` are object equality.\r\n\r\n### Truthiness matchers\r\n\r\nThe simplest truthiness matcher\r\n\r\n    expect(1 < 2).to be(true)\r\n\r\nThere is a `true` object and a `false` object, that's why the `be` matcher\r\nworks. In RSpec, we have roughly true matchers\r\n\r\n    expect('some string').to be_truthy\r\n    expect(nil).to be_falsey\r\n\r\nThis was different in RSpec 2. It used to be just `be_true` and `be_false`.\r\nThis was confusing with `be(true)` and `be(false)`.\r\n\r\n*NOTE:* `0` is not falsey or nil.\r\n\r\n### Numeric comparison matchers\r\n\r\n    expect(100).to eq(100)\r\n    expect(100).to be == 100\r\n    expect(100).to be > 99\r\n    \r\n    expect(5).to be_between(3, 5).inclusive\r\n    expect(5).not_to be_between(3, 5).exclusive\r\n    expect(100).to be_within(5).of(105)\r\n    expect(1..10).to cover(3)\r\n\r\nThese all read pretty clearly. `cover` to check that a range contains the\r\nvalue within it. `be_within` specifies distance from something else.\r\n\r\n### Collections\r\n\r\n    expect(array).to include(3)\r\n    expect(array).to include(2,3)\r\n\r\nAlso available, `start_with` and `end_with`. If the order of the items doesn't\r\nmatter:\r\n\r\n    array = [1,2,3]\r\n    expect(array).to match_array([3,2,1])\r\n    expect(array).not_to match_array([1,2])\r\n\r\n    expect(array).to contain_exactly(3,2,1)\r\n\r\nYou can use this with strings\r\n\r\n    string = 'Lynda'\r\n\r\n    expect(string).to include('Ly')\r\n\r\nOr hashes:\r\n\r\n    expect(hash).to include(:city)\r\n    expect(hash).to include(city: 'Dallas')\r\n    expect(hash).to include(:city, :state)\r\n\r\n*NOTE:* In Ruby, hash keys as strings are not the same as hash keys as\r\nsymbols. Rails handles this differently.\r\n\r\n### Other useful matchers\r\n\r\n#### Regular Expression Matcher:\r\n\r\n    string = 'Lynda'\r\n    expect(string.to match(/^L.+a$/)\r\n\r\n*NOTE:* This only works with strings. `'123'` will match, but `123` will be an\r\nerror.\r\n\r\n#### Object Type Matchers\r\n\r\n    expect(@bob).to be_an_instance_of(Subscriber)\r\n    expect(@bob).to be_a_kind_of(Customer) # Anywhere in class hierarchy\r\n    expect(@bob).to be_a(Customer) # Exact class\r\n\r\n#### Respond To Matcher\r\n\r\n    expect(@bob).to respond_to(:first_name)\r\n\r\n#### Attribute Matcher\r\n\r\n    expect(@bob).to have_attributes(first_name: 'Bob')\r\n\r\nAttribute matchers include a respond_to matcher.\r\n\r\n#### Satisfy Matcher\r\n\r\n    expect(5).to satisfy {|v| v < 9 && v.odd?}\r\n\r\nThis takes a block and should return true or false. This should be a last\r\nresort, because it's very flexible but not as standardized.\r\n\r\n### Predicate Matchers\r\n\r\nThese matchers are dynamically defined. Taking any `?` method, you can add\r\n`be_`.\r\n\r\n    expect(value).to be_nil\r\n    expect(value).to be_integer\r\n    expect(value).to be_odd\r\n\r\nIf you have a custom method, like `visible?` you can use this.\r\n\r\n    expect(product).to be_visible\r\n\r\nThis is the same as\r\n\r\n    expect(product.visible?).to be true\r\n\r\nIf you use the ruby convention of `has_` for checks on a hash, you can use the\r\n`have_` predicate matchers.\r\n\r\n    expect(hash).to have_key(:city)\r\n    expect(hash).to have_value('Dallas')\r\n\r\n### Observation matchers\r\n\r\nThese observe how objects change or generate errors. We can use these with\r\nblocks.\r\n\r\n    expect { }.to( )\r\n\r\nFor example:\r\n\r\n    array = []\r\n\r\n    expect { array << 1 }.to\r\n      change(array, :empty?).from(true).to(false)\r\n\r\n    expect do\r\n      bob.first_name = 'Robert'\r\n      bab.last_name = 'Smith'\r\n    end.to change(bob, :full_name).from('Bob Smith').to('Robert Smith')\r\n\r\nYou can also use this with a `change` block.\r\n\r\n    expect { x += 1 }.to change{x}.from(10).to(11)\r\n\r\n    expect { x += 1 }.to\r\n      change { x % 3 }.from(2).to(0)\r\n\r\n    expect { x += 1 }.to change {x}.by(1)\r\n\r\nYou can also use `by_at_least` and `by_at_most`.\r\n\r\nYou we can observe errors:\r\n\r\n    expect { customer.delete }.to raise_error\r\n    expect { customer.delete }.to raise_exception\r\n    expect { 1/0 }.to raise_error(ZeroDivisionError)\r\n    expect { 1/0 }.to raise_error.with_message('divided by 0')\r\n    expect { 1/0 }.to raise_error.with_message(/divided/)\r\n\r\nOr we can observe output, if you're using standard output\r\n\r\n    expect { print 'hello' }.to output.to_stdout\r\n    expect {print 'hello'}.to\r\n      output('hello').to_stdout\r\n    expect { warn 'problem'}.to\r\n      output(/problem/).to_stderr\r\n\r\nNotice that all these observation matchers use expect blocks.\r\n\r\n### Complex expectation\r\n\r\n#### Compound Expectations\r\n\r\nUsing `and` or `or` creates a compound expection.\r\n\r\n    s = 'Lynda'\r\n    expect(s).to start_with('L').and end_with('a')\r\n\r\n    expect(s.length).to be_even.or be < 6\r\n\r\nYou can also use these with `&` and `|` aliases\r\n\r\n    expect(s).to start_with('L') & end_with('a')\r\n    expect(s.length).to be_even | be < 6\r\n\r\n#### Composing Matchers\r\n\r\n    array = [1, 2, 3]\r\n    expect(array).to all(be < 5)\r\n    expect(@items).to all(be_visible & be_in_stock)\r\n\r\nOther matchers taht accept matchers as an argument:\r\n\r\n* all(matcher)\r\n* include(matcher, matcher)\r\n* start_with(matcher)\r\n* end_with(matcher)\r\n* contain_exactly(matcher, matcher, matcher)\r\n* match(matcher)\r\n* change { }.from(matcher).to(matcher)\r\n* change { }.by(matcher)\r\n* output(matcher).to_stdout\r\n* raise_error.with_message(matcher)\r\n\r\nSome more examples:\r\n\r\n    fruits = ['apple', 'banana', 'cherry']\r\n    expect(fruits).to start_with(start_with('a'))\r\n    expect(fruits).to start_with(a_string_starting_with('a'))\r\n\r\nAll of rspec matchers allow you to use noun-phrase aliases that will make\r\nthese more readable.\r\n\r\n* start_with - a_string_starting_with\r\n* end_with - a_string_ending_with\r\n* match - a_string_matching\r\n* be < 2 - a_value < 2\r\n* be_within - a_value_within\r\n* contain_exactly - a_collection_containing_exactly\r\n* be_an_instance_of - an_instance_of\r\n\r\nAnother example:\r\n\r\n    string = 'hello'\r\n    expect { string = 'goodbye' }.to change { string }.\r\n      from(match(/ll/)).to(match(/oo/))\r\n\r\n    expect(fruits).to start_with(a_string_starting_with('a') ) &\r\n    include(a_string_matching(/a.a.a/) ) & end_with(\r\n    a_string_ending_with('y'))\r\n\r\n## Testing Efficiently\r\n\r\n### Helper methods\r\n\r\nYour spec file should be lightweight, with only essential configuration and\r\nmethods. One helpful thing might be a constant for the `APP_ROOT`.\r\n\r\n    APP_ROOT = File.expand_path('../..', __FILE__)\r\n\r\nYou can add some useful methods.\r\n\r\n    def no_output(&block)\r\n      original_stdout = $stdout.dup\r\n      $stdout.repoen('/dev/null')\r\n      $stdout.sync = true\r\n      begin\r\n        yield\r\n      ensure\r\n        $stdout.reopen(original_stdout)\r\n      end\r\n    end\r\n\r\n### Hooks: before, after, and around\r\n\r\nIf you want something to run before the whole suite, in your spec_helper:\r\n\r\n    config.before(:suite) do\r\n\r\n    end\r\n\r\nFor something before a context block, you can do:\r\n\r\n    before(:context) do\r\n    end\r\n\r\nFor something before each example:\r\n\r\n    before(:example) do\r\n      @car = Car.new\r\n    end\r\n\r\nAfter can be run the same way. Another option is `around`.\r\n\r\n    around(:example) do |example|\r\n      puts "Code before"\r\n      example.run\r\n      puts "Code after"\r\n    end\r\n\r\n`around` comes before and after other hooks. Kind of like this:\r\n\r\n* around\r\n* before suite\r\n* before context\r\n* before example\r\n* example\r\n* after example\r\n* after context\r\n* after suite\r\n* around\r\n\r\n### Using the let method\r\n\r\nIf you're just setting up variables, consider using `let`.\r\n\r\n    let(:car) { Car.new }\r\n\r\nThis automatically does memoization (`car ||= Car.new`). This doesn't actually\r\nrun this code unless a method needs to load it. If you need it to run right\r\naway, use `let!`.\r\n\r\n### Subjects\r\n\r\nSince most tests will have a subject, there is a shorthand for creating the\r\nsubject method. Instead of `let(:subject) {}`, you can just do `subject {}`.\r\nIf you subject is an instance of the class name, like `Car.new` for a\r\n`describe Car` test, you don't even need to define it. The `subject` variable\r\nis automatically defined as an instance of the class.\r\n\r\n### Shared examples.\r\n\r\nYou can share tests with other specs using `shared_examples`. Just define a\r\n`shared_examples_for('')` block, then reference it by name in the class as\r\n`it_behaves_like 'a sortable' do`. If you need to define variables within the\r\nshared example for reuse, you can set them up in the block.\r\n\r\n    it_behaves_lik 'a sortable' do\r\n      let(:collection) { Product.limit(5) }\r\n    end\r\n\r\nIf you're smart about using `subject`, this is a little easier. There is also\r\na `described_class` when you want to talk about the class itself, so within\r\nthe shared example block you can use it to avoid the need for a class name.\r\n\r\n    let(:collection) { described_class.limit(5) }\r\n\r\nAn example:\r\n\r\n    # in spec/shared_examples/a_standard_vehicle\r\n\r\n    shared_examples_for('a standard vehicle') do\r\n      describe 'attributes' do\r\n      end\r\n    end\r\n\r\n    # in spec/car\r\n\r\n    require 'shared_examples/a_standard_vehicle'\r\n\r\n    describe Trunk do\r\n      it_behaves_like('a standard vehicle')\r\n    end\r\n\r\n## Test Doubles\r\n\r\n### What are test doubles?\r\n\r\nAn object that stands in for another object is a test double. These can be\r\ncalled doubles, mocks, stubs, dummies. Test doubles can:\r\n\r\n* Set return values\r\n* Fake method implementations\r\n* Set expectations about calls to object\r\n\r\nIn rspec there are some particular definitions:\r\n\r\n* Double/mock - a simple object preprogrammed with expectations and responses\r\n* Stub - an instruction to an object to return a specific response to a methed\r\n\r\n### Using mocks and stubs\r\n\r\nTo create the double:\r\n\r\n    it 'allows stubbing methods' do\r\n      dbl = double("Chant")\r\n      allow(dbl).to receive(:hey!)\r\n      expect(dbl).to respond_to(:hey!)\r\n    end\r\n\r\nThis applys a method to the stub, the checks whether it can respond to that.\r\nYou can set a return value with a block\r\n\r\n    it 'allows stubbing methods' do\r\n      dbl = double("Chant")\r\n      allow(dbl).to receive(:hey!) { "Ho!" }\r\n      expect(dbl.hey!).to eq("Ho!")\r\n    end\r\n\r\nOr you could do this in an alternative syntax\r\n\r\n    it 'allows stubbing methods' do\r\n      dbl = double("Chant")\r\n      allow(dbl).to\r\n        receive(:hey!).and_return("Ho!" }\r\n      expect(dbl.hey!).to eq("Ho!")\r\n    end\r\n\r\nAnd one more syntax:\r\n\r\n    dbl = double("Person")\r\n    allow(dbl).to receive_messages(\r\n      full_name: 'Mary Smith',\r\n      initials: 'MTS'\r\n    )\r\n\r\nThis can be hard to use in some cases. Or you could create the double with a\r\nhash.\r\n\r\n    dbl = double("Person", full_name: 'Mary Smith', initials: 'MTS')\r\n\r\nYou could also set a collection of responses.\r\n\r\n    die = double("Die")\r\n    allow(die).to receive(:roll).and_return(1,5,2,6)\r\n    expect(die.roll).to eq(1)\r\n    expect(die.roll).to eq(5)\r\n    expect(die.roll).to eq(2)\r\n    expect(die.roll).to eq(6)\r\n    expect(die.roll).to eq(6)\r\n\r\n### Partial test doubles\r\n\r\nThis lets you use a real object from your code, while stubbing out some\r\nmethods.\r\n\r\n    it 'stubs instance methods on real objects' do\r\n      time = Time.now(2010, 1, 1, 12, 0, 0)\r\n      allow(time).to receive(:year).and_return(1975)\r\n\r\n      expect(time.to_s).to eq('2010-01-01 ...')\r\n      expect(time.year).to eq(1975)\r\n    end\r\n\r\n    it 'stubs instance methods in real objects' do\r\n      hero = SuperHero.new\r\n      hero.name = 'Superman'\r\n      expect(hero.name).to eq('Superman')\r\n\r\n      allow(hero).to receive(:name).and_return('Clark Kent')\r\n\r\n      expect(hero.name).to eq('Clark Kent')\r\n    end\r\n\r\n    it 'stubs class methods on real objects' do\r\n      ...\r\n      allow(Time).to receive(:now).and_return(fixed)\r\n\r\n    end\r\n\r\nYou can use these partial mocks with a full mock.\r\n\r\n    it 'can stub database calls' do\r\n      dbl = double('Mock Customer')\r\n      allow(dbl).to receive(:name).and_return('Bob')\r\n\r\n      allow(Customer).to receive(:find).and_return(dbl)\r\n      customer = Customer.find\r\n      expect(customer.name).to eq('Bob')\r\n    end\r\n\r\n### Message expectations\r\n\r\nInstead of `allow`ing a double to receive a message, you can `expect it.\r\n\r\n    expect(dbl).to receive(:hey!).and_return("Ho!")\r\n    dbl.hey!\r\n\r\n`allow` is just a stub, which may not be used. `expect` will set the\r\nexpectation in advance of the method call. If you want it to be set in a\r\nparticular order:\r\n\r\n    expect(dbl).to receive(:step_1).ordered\r\n\r\n### Message Argument Constraints\r\n\r\nYou can pass arguments into the double.\r\n\r\n    it 'allows constraint on arguments' do\r\n      dbl = double("Customer List")\r\n      expect(dbl).to receive(:sort).with('name')\r\n      dbl.sort('name')\r\n    end\r\n\r\nBy default, `with()` includes the argument `any_args`. You can also pass in\r\n`no_args`, for expecting no arguments. Or you can pass several other\r\npredefined arguments:\r\n\r\n* `with(any_arg)`\r\n* `with(no_args)`\r\n* `with('RSpec')`\r\n* `with('RSpec', 1234, true)`\r\n* `with('RSpec', anything)` - `anything` is like `any_args`\r\n* `with(boolean)`\r\n* `with(hash_including(verbose: true))`\r\n* `with(array_including('blue'))`\r\n* `with(a_multiple_of(3))`\r\n* `with(<<any matcher>>)`\r\n    \r\n### Message Count Constraints\r\n\r\nLet you verify how many times a method gets called.\r\n\r\n    expect(post).to receive(:like).exactly(3).times\r\n    expect(cart).to receive(:restock_item).twice\r\n\r\nThis can work with real objects as well\r\n    \r\n    cart = Cart.new\r\n    cart.add_item(35)\r\n    cart.add_item(178)\r\n\r\n    expect(cart).to receive(:restock_item).twice\r\n    cart.empty\r\n\r\nThe count expectations you can use:\r\n\r\n* `once`\r\n* `twice`\r\n* `exactly(n).times`\r\n* `at_least(:once)`\r\n* `at_least(n).times`\r\n* `at_most(:once)`\r\n* `at_most(n).times`\r\n\r\n### Spies\r\n\r\nThis is a type of test double.\r\n\r\n    dbl = spy("Chant")\r\n    allow(dbl).to receive(:hey!).and_return("Ho!")\r\n    dbl.hey!\r\n    expect(dbl).to have_received(:hey!)\r\n\r\nThis can use count constraints and message constraints. You don't have to stub\r\na method to use it with the spy.\r\n\r\n    customer = spy("Customer")\r\n    customer.send_invoice\r\n    expect(customer).to have_received(:send_invoice)\r\n\r\nTo use this with a real object, you have to provide a stub in order for RSpec\r\nto start watching.\r\n\r\n    customer = Customer.new\r\n    allow(customer).to receive(:send_invoice)\r\n    customer.send_invoice\r\n    expect(customer).to have_received(:send_invoice)\r\n\r\nYou can use spies in `let` and `before` blocks.\r\n\r\n    let(:order) do\r\n      spy('Order', process_line_items: nil, charge_credit_card: true,\r\n      send_email: true)\r\n    end\r\n\r\n    before(:example) do\r\n      order.process_line_items\r\n      order.charge_credit_card\r\n      order.send_email\r\n    end\r\n\r\nThen you can have very lean examples.\r\n\r\n    expect(order).to have_received(:process_line_items)\r\n\r\n## Challenges\r\n\r\n### Food-finder application\r\n\r\nTesting the restaurant class\r\n\r\n    require 'restaurant'\r\n\r\n    describe Restaurant do\r\n      let(:test_file) { 'spec/fixtures/restaurants_test.txt' }\r\n      let(:crescent) { Restaurant.new(name: 'Crescent', cuisine: 'paleo',\r\n      price: '321') }\r\n\r\n      describe 'attributes' do\r\n        it 'allow reading and writing for :name' do\r\n          subject.name = 'Test'\r\n          expect(subject.name).to eq('Test')\r\n        end\r\n\r\n        #... cuisine and price attributes\r\n      end\r\n\r\n      describe '.load_file' do\r\n        # skipped for now\r\n      end\r\n\r\n      describe '.all' do\r\n        it 'returns array of restaurant objects from @@file' do\r\n          Restaurant.load_file(test_file)\r\n          restaurants = Restaurant.all\r\n          expect(restaurants.class).to eq(Array)\r\n          expect(restaurants.length).to eq(6)\r\n          expect(restaurants.first.class).to eq(Restaurant)\r\n        end\r\n\r\n        it 'returns an empty array when @@file is nil' do\r\n          no_output { Restaurant.load_file(nil) }\r\n          restaurants = Restaurant.all\r\n          expect(restaurants).to eq([])\r\n        end\r\n      end\r\n\r\n      describe '#initialize' do\r\n        context 'with no options' do\r\n          it 'sets a default of "" for :name' do\r\n            expect(subject.name).to eq('')\r\n          end\r\n\r\n          # defaults for cuisine and price\r\n        end\r\n\r\n        with 'custom options' do\r\n          it 'allows changing of name' do\r\n            expect(crescent.name).to eq("Crescent")\r\n          end\r\n\r\n          # .. set for cuisine and price\r\n\r\n        end\r\n      end\r\n\r\n      describe '#save' do\r\n        it 'returns false if @@file is nil' do\r\n          expect(Restaurant.file).to be_nil\r\n          expect(crescent.save).to be false\r\n        end\r\n\r\n        it 'returns flase if not valid' do\r\n          Restaurant.load_file(test_file)\r\n          expect(Restaurant.file.not_to be_nil\r\n          # subject will be invalid by default\r\n          expect(subject.save).to be false\r\n        end\r\n\r\n        it 'calls append on @@file if valid' do\r\n          Restaurant.load_file(test_file)\r\n          expect(Restaurant.file).not_to be_nil\r\n\r\n          # Message expectation on partial test double\r\n          expect(Restaurant.file).to receive(:append).with(crescent)\r\n          crescent.save\r\n        end\r\n      end\r\n\r\n    end\r\n\r\n### Challenge: Guide\r\n\r\nSome custom helper methods will help track output.\r\n\r\n    # spec/spec_helper.rb\r\n\r\n    def capture_output(&block)\r\n      original_stdout = $stdout.dup\r\n      output_catcher = StringIO.new\r\n      $stdout = output_catcher\r\n      begin\r\n        yield\r\n      ensure\r\n        $stdout = original_stdout\r\n      end\r\n      output_catcher.string\r\n    end\r\n\r\n    def setup_fake_input(*args)\r\n      allow(Readline).to receive(:readline).and_return(*args)\r\n    end\r\n\r\n## 8 - RSpec with Rails\r\n\r\nRSpec with rails requires `rspec-rails`. This adds helpers and generators for rails. To run your specs, you can us `rake spec` to do some setup and then run the tests. You can create a spec for a resource that's already generated with `rails g rspec:model Customer`.\r\n\r\nThe generator will create your spec with `RSpec.describe`, but you can also just do `describe`.\r\n\r\n### Test Database\r\n\r\n`rspec` by itself does not prepare the test database. `rake spec` will prepare the test database.\r\n\r\n### Transaction Examples\r\n\r\nBy default, anytime you access the database it will run in a transaction. You can turn this on or off in the rails_helper file. Note that data modified by `before(:example)` is rolled back as other transactions are, but `before(:context)` is not rolled back. Use `after(:context)` to destroy anything created in those blocks.\r\n\r\nYou can also use the `database_cleaner` gem instead of managing transactions yourself.\r\n\r\n### Model specs\r\n\r\nThere may be times you need to use the `reload` action to make sure you get the database copy of your object. Also, be aware of when you're using `let` versus `let!`. A gem called `shoulda-matchers` will provide validation and association tests. There's also a `rspec-activemodel-mocks` gem, that gives you `mock_model` and `stub_model` that can be used for test doubles.\r\n\r\n### Helper specs\r\n\r\nYour helper specs have a `helper` object that can be used to call the module. Also, be sure to use `assign(:page, 5)` rather than `@page = 5` for setting instance variables.\r\n\r\n### Controller specs\r\n\r\nSome common examples of HTTP Requests you might be trying to test:\r\n\r\n* request(action, options)\r\n* get(:index) / get("/customers/index") / get(:index, page: 2, search: 'Smith')\r\n* post(:create, customer: {first_name: 'Jane', last_name: 'Smith'}\r\n\r\nRSpec makes special attributes available for use, `controller`, `request` and `response`. We also have access to hashes that contain several variables.\r\n\r\n* assigns (NOTE: set with `assign`)\r\n* session\r\n* flash\r\n* cookies\r\n\r\nYou can access values from these using the hash syntax: `assigns['customers']`. Or you can do the method: `assigns(:customers)`.\r\n\r\nNOTE: Even though there's a cookies hash, you should instead use the `request.cookies` or `response.cookies`, to make sure the distinction is clear.\r\n\r\n### Controller Specs: Responses\r\n\r\nNew spec response matchers\r\n\r\n* expect(response).to render_template(template)\r\n* expect(response).to redirect_to(path)\r\n* expect(response).to have_http_status(status)\r\n\r\nCommon status codes:\r\n\r\n* 200, :ok\r\n* 403, :forbidden\r\n* 404, :not_found\r\n* 500, :internal_server_error\r\n\r\n`render_template` doesn't actually render the template, it's stubbed. If you want to actually render it, instead of the stub, use `render_views` in the describe block.\r\n\r\n### View specs\r\n\r\nNaming view specs:\r\n\r\n    spec/views/customers/index.html.erb_spec.rb\r\n\r\nRSpec will infer the view from the describe block\r\n\r\n    describe 'customers/index'\r\n\r\nYou can check to see if a partial is rendered:\r\n\r\n    it 'renders the correct partials' do\r\n      assign(:customers, [Customer.new...]\r\n\r\n      render\r\n\r\n      expect(view).to render_tempalte(partial: '_customer', count: 3)\r\n\r\nIf you need to manual specify a template:\r\n\r\n    render(tempalte: 'customers/index.html.rrb')\r\n\r\nNOTE: It does not render layout unless specified\r\n\r\n    render(template: 'customer/index', layout: 'layout/application' )\r\n\r\nYou can stub the rendering of partials\r\n\r\n    stub_template(template_file_name => new_template)\r\n\r\nWhere the `new_template` is usually a string.\r\n\r\n## Testing Tools\r\n\r\n### Fixtures and factories\r\n\r\nFixtures are basically just sample data. Any yaml files in `spec/fixtures` will be automatically loaded by RSpec. You can use erb in YAML\r\n\r\n    <% 5.times do |n| %>\r\n    bob_order_<%= n %>:\r\n      date: 2010-9-<%= n %>\r\n    <% end %>\r\n\r\nYou can also make factories, which store your data as ruby code without automatically loading. For fake data, you can use `faker` and `forgery`<% end %>You can also make factories, which store your data as ruby code without automatically loading. For fake data, you can use `faker` or `forgery`.\r\n\r\n### Acceptance Testing\r\n\r\nAcceptance testing is like integration test, but is more like end-to-end testing. `cucumber` is the popular acceptance testing library. Using `capybara` is the main way to test web interactivity. `selenium` and `poltergeist` are drivers that can be used to pick up javascript.\r\n\r\n### Automatic Testing\r\n\r\n`autotest` is run as a separate application. It monitors changed files and runs test related to those changed files. `guard` is a more flexible option. Continuous Integration checks git repositories. You can use `Circle CI` or `Travis CI`. `Jenkins` is an open source alternative, but you have to set it up yourself.\r\n\r\n### Other Tools\r\n\r\n`simplecov` generates code coverage reports for your code. `timecop` lets you set up times in your test. `webmock` lets you stub and set expectations on HTTP requests. `vcr` also does this, allowing you to record a copy for future usage. `spork` lets you copy the test server, rather than launching a new one.\r\n	2	2015-03-31 21:14:43.080042	2015-03-31 21:14:43.080042
86	353 - Oauth with Doorkeeper	353-oauth-with-doorkeeper	# 353 - Oauth with Doorkeeper\r\n\r\nBundle the gem\r\n\r\n    gem 'doorkeeper'\r\n\r\nInstall the engine\r\n\r\n    rails g doorkeeper:install\r\n    rake db:migrate\r\n\r\nSet up the `doorkeeper` initializer\r\n\r\n    resource_owner_authenticataor do |routes|\r\n\r\n      User.find(session[:user_id]) || redirect_to(routes.login_url)\r\n\r\n    end\r\n\r\nSet up an application in `oauth/applications`. Set the name and a URL for redirection, like `http://localhost:3001/auth/todo/callback`\r\n\r\nYou can add the `oauth2` gem to test doorkeeper.\r\n\r\n    gem install oauth2\r\n\r\n    irb -r oauth2\r\n\r\n    callback = 'http://localhost:3001/auth/todo/callback'\r\n    app_id = 'app_id_from_doorkeeper'\r\n    secret = 'app_secret_from_doorkeeper'\r\n    client = OAuth2::Client.new(app_id, secret, site: 'http://localhost:3000/')\r\n\r\n    client.auth_code.authorize_url(redirect_uri: callback)\r\n\r\nThis will generate a url that you can use to authorize the client, in the form:\r\n\r\n    'http://localhost:3000/oauth/authorize?response_type=code&client_id=[app_id]&redirect_uri=[http://]localhost:3001/auth/todo/callback'\r\n\r\nYou can paste that into the browser, then `Authorize` and you will be redirected to the client app, which isn't ready yet. But you can see the access token that was generated in the url:\r\n\r\n    http://localhost:3001/auth/todo/callback?code=[access_token]\r\n\r\nYou can then set up the access object in the console:\r\n\r\n    access = client.auth_code.get_token('[access_token]', redirect_uri: callback)\r\n    access.token	3	2015-03-31 21:14:43.24391	2015-03-31 21:14:43.24391
87	Linux Notes	linux-notes	Script file headers:\r\n\r\n    #!/bin/bash\r\n\r\nScript file permissions:\r\n\r\n    chmod +x newSite.sh\r\n\r\nDirectory Size:\r\n\r\n    du -hs assets\r\n\r\nFix Xubuntu app finder\r\n\r\n1. Go to Settings > Keyboard > Application Shortcuts\r\n2. Change `xfce4-appfinder` to `xfce4-appfinder --disable-server`\r\n\r\nStatic IP\r\n\r\n\r\n    # This file describes the network interfaces available on your system\r\n    # and how to activate them. For more information, see interfaces(5).\r\n\r\n    # The loopback network interface\r\n    auto lo\r\n    iface lo inet loopback\r\n\r\n    # The primary network interface\r\n    auto eth0\r\n    iface eth0 inet static\r\n      address 192.168.1.106\r\n      netmask 255.255.255.0\r\n      network 192.168.1.0\r\n      broadcast 192.168.1.255\r\n      gateway 192.168.1.1\r\n      dns-search eau.wi.charter.com\r\n      dns-nameservers 71.10.216.1 71.10.216.2 192.168.1.1\r\n    # This is an autoconfigured IPv6 interface\r\n    iface eth0 inet6 auto\r\n\r\nTo change the default editor to vim:\r\n\r\n    sudo select-editor\r\n\r\nExtend sudo timeout with `sudo visudo`:\r\n\r\n    Defaults    timestamp_timeout=30	1	2015-03-31 21:14:43.296534	2015-03-31 21:14:43.296534
88	Rails 4 Test Prescriptions	rails-4-test-prescriptions	## Chapter 2 - TDD Basics\r\n\r\n### Getting started\r\n\r\nThe Project: A common list of tasks for the team. The application will try to estimate the project's end date based on completion of tasks. To start the project:\r\n\r\n    rails new gatherer\r\n    cd gatherer\r\n    rake db:create:all\r\n    rake db:migrate\r\n\r\nAdd RSpec to the gemfile using the `rspec-rails` gem, and run:\r\n\r\n    build install\r\n    rails g rspec:install\r\n\r\nStating TDD can be done by specifying the *initialization state* of the objects or methods. You could also use a *happy path*, which represents an error-free implementation of the object or method. For something complex, it's good to start with the initialization state.\r\n\r\nIn the case of our project, the initial state of a project could be considered *done*, because it has no tasks. Another way to approach this would be to make it *empty*, but we'll proceed assuming it's done.\r\n\r\n    # spec/models/project_spec.rb\r\n    require 'rails_helper'\r\n\r\n    RSpec.describe Project do\r\n      it "considers a project with no tasks to be done" do\r\n        project = Project.new\r\n        expect(project.done?).to be_truthy\r\n      end\r\n    end\r\n\r\nThis requires the `rails_helper`, sets up the test suite with `RSpec.describe`, and puts the actual spec in the `it` block. Note that the `describe` argument can be a class or a string. The `it` block is a string strictly for documentation, it isn't used internally. If you want to make a single line spec without a description, you can use `specify` to make it read more clearly. But `it` and `specify` are interchangable.\r\n\r\n    specify { expect(user.name).to eq('fred') }\r\n\r\nThe `expect` block takes an object as an argument and returns an RSpec proxy object called an `ExpectationTarget`. This holds the object and responds to two messages, `to` or `not_to`. Those two messages take objects that respond to the `matches?` method. Essentially, your spec transforms to pass an argument into the matcher:\r\n\r\n    expect(project.done?).to be_truthy\r\n    BeTruthy.new.matches?(true)\r\n\r\nThis small spec has already made some assumptions about the program:\r\n\r\n* There is a class called Project\r\n* You can query instances of that class as to whether they are done\r\n* A brand-new instance of Project qualifies as done\r\n\r\nYou can combine matchers, and there are aliases to make the statement sound more like proper English\r\n\r\n    expect(["cheese", "burger"]).to contain_exactly(\r\n      a_string_matching(/ch/), a_string_matching(/urg/))\r\n\r\nHere, `a_string_matching` is an alias for `match`, the regex matcher.\r\n\r\n### Running Our Tests\r\n\r\nWhen you run `rspec` with no arguments, every file from the `spec` directory is loaded. Fixtures are loaded, if they're being used instead of factories. Each `RSpec.describe` block creates an example group, `it` blocks are stored for later execution. Each example group is then run.\r\n\r\n### Making Our Tests Pass\r\n\r\nOn either extremes of the question, you could either do the simplest possible thing to make the test pass or get straight to how you might intuitively solve the problem. It might help to be somewhere in the middle. In our example cass, we clearly need a `Project` class.\r\n\r\n    class Project\r\n    end\r\n\r\nThen, we need a method `done?`\r\n\r\n    def done?\r\n    end\r\n\r\nWe also need it to return `true`. This then passes the test, though no business logic has really be solved.\r\n\r\n### The Second Test\r\n\r\nYour second test will require the `done?` method to have a little more functionality\r\n\r\n    it 'knows that a project with an incomplete task is not done' do\r\n      project = Project.new\r\n      task = Task.new\r\n      project.tasks << task\r\n      expect(project.done?).to be_falsy\r\n    end\r\n\r\nThe suite will complain about `Task.new`, so create a `Task` class. Then add `tasks` to the project\r\n\r\n    class Project\r\n      attr_accessor :tasks\r\n\r\n      def initialize\r\n        @tasks = []\r\n      end\r\n\r\n      def done?\r\n        tasks.empty?\r\n      end\r\n    end\r\n\r\nThe tests should now pass.\r\n\r\n#### Let and Expectations\r\n\r\nYou can do a couple things to make the examples cleaner.\r\n\r\n    let(:project) { Project.new }\r\n\r\nThis will create the `project` variable that can be used in multiple examples. You can also use a dynamic matcher:\r\n\r\n    expect(project).to be_done\r\n\r\nBecause the `done?` ends with a question mark and returns true or false. You can also do this with methods that start with `has_`. You can then use the matcher like this:\r\n\r\n    expect(actual).to have_key(:id)\r\n\r\nCombining multiple matchers can be done with `and` or an array\r\n\r\n    expect(actual).to include("a").and match(/.*3.*/)\r\n    expect(actual).to eq(3).or eq(5)\r\n    expect(actual).to match([an_object_eq_to(5)], an_object_eq_to(7)])\r\n\r\n### Task\r\n\r\nWe should now set up a test for the Task method\r\n\r\n    require 'rails_helper'\r\n\r\n    RSpec.describe Task do\r\n      it 'can distinguish a completed task' do\r\n        task = Task.new\r\n        expect(task).not_to be_complete\r\n        task.mark_completed\r\n        expect(task).to be_complete\r\n      end\r\n    end\r\n\r\nThis example makes two assertions, but they're similar enough that it would be awkward to separate them. To make these pass:\r\n\r\n    class Task\r\n      def initialize\r\n        @completed = false\r\n      end\r\n\r\n      def mark_completed\r\n        @completed = true\r\n      end\r\n\r\n      def complete?\r\n        @completed\r\n      end\r\n    end\r\n\r\nThe project test now fails even with completed tasks, so we modify the `done?` method\r\n\r\n    def done?\r\n      tasks.reject(&:complete?).empty?\r\n    end\r\n\r\n### Adding Some Math\r\n\r\nMost tests have three parts:\r\n\r\n* Given - What data does the test need?\r\n* When - What action is taking place?\r\n* Then - What behavior do we need to specify?\r\n\r\nHere's how we might test the estimate of remaining time on a project:\r\n\r\n    describe 'estimates' do\r\n      let(:project) { Project.new }\r\n      let(:done) { Task.new(size: 2, completed: true) }\r\n      let(:small_not_done) { Task.new(size: 1) }\r\n      let(:large_not_done) { Task.new(size: 4) }\r\n\r\n      before(:example) do\r\n        project.tasks = [done, small_not_done, large_not_done]\r\n      end\r\n\r\n      it 'can calculate total size' do\r\n        expect(project.total_size).to eq(7)\r\n      end\r\n\r\n      it 'can calculate remaining size' do\r\n        expect(project.remaining_size).to eq(5)\r\n      end\r\n    end\r\n\r\nHere, the *given* part is set up with the `let` statements. *when* gets set up with the `before` block. `then` is finally set with the expectations.\r\n\r\nThis test will fail because we don't have the hash options set up with the `Task` class.\r\n\r\n    # app/models/task.rb\r\n    attr_accessor :size, :completed\r\n\r\n    def initialize(options = {})\r\n      @completed = options[:completed]\r\n      @size = options[:size]\r\n    end\r\n\r\nThen we need to give the `Project` a couple more methods\r\n\r\n    class Project\r\n\r\n      attr_accessor :tasks\r\n\r\n      def initialize\r\n        @tasks = []\r\n      end\r\n\r\n      def done?\r\n        tasks.reject(&:complete?).empty?\r\n      end\r\n\r\n      def total_size\r\n        tasks.sum(&:size)\r\n      end\r\n\r\n      def remaining_size\r\n        tasks.reject(&:complete?).sum(&:size)\r\n      end\r\n    end\r\n\r\nThis can be refactored easily, with our tests ready to handle any problems that may arise.\r\n\r\n    def incomplete_tasks\r\n      tasks.reject(&:complete?)\r\n    end\r\n\r\n    def done?\r\n      incomplete_tasks.empty?\r\n    end\r\n\r\n    def remaining_size\r\n      incomplete_tasks.sum(&:size)\r\n    end\r\n\r\n### Our First Date\r\n\r\nBased on the project's tasks completed in the last three weeks, we can calculate a project's end date using a sort of *velocity* calculation. Here's the set of new `Task` tests:\r\n\r\n    # spec/models/task_spec\r\n    describe "velocity" do\r\n      let(:task) { Task.new(size: 3) }\r\n\r\n      it "does not count an incomplete task toward velocity" do\r\n        expect(task).not_to be_part_of_velocity\r\n        expect(task.points_toward_velocity).to eq(0)\r\n      end\r\n\r\n      it "does not count a long-ago task toward velocity" do\r\n        task.mark_completed(6.months.ago)\r\n        expect(task).not_to be_part_of_velocity\r\n        expect(task.points_toward_velocity).to eq(0)\r\n      end\r\n\r\n      it "counts a recently completed task toward velocity" do\r\n        task.mark_completed(1.day.ago)\r\n        expect(task).to be_part_of_velocity\r\n        expect(task.points_toward_velocity).to eq(3)\r\n      end\r\n    end\r\n\r\nThese changes require some changes to the `Task` class. `mark_completed` should take an optional date argument. Also, `part_of_velocity?`, which should return true or false. Finally `points_toward_velocity` to add available points to velocity.\r\n\r\n    class Task\r\n      attr_accessor :size, :completed_at\r\n\r\n      def initialize(options = {})\r\n        mark_completed(options[:completed_at]) if options[:completed_at]\r\n        @size = options[:size]\r\n      end\r\n\r\n      def mark_completed(date = nil)\r\n        @completed_at = (date || time.current)\r\n      end\r\n\r\n      def complete?\r\n        completed_at.present?\r\n      end\r\n\r\n      def part_of_velocity?\r\n        return false unless complete?\r\n        completed_at > 3.weeks.ago\r\n      end\r\n\r\n      def points_toward_velocity\r\n        if part_of_velocity? then size else 0 end\r\n      end\r\n    end\r\n\r\nWe'll need to make sure we include tasks inside and outside of this three week range when we test a project.\r\n\r\n    let(:project) { Project.new }\r\n    let(:newly_done) { Task.new(size: 3, completed_at: 1.day.ago) }\r\n    let(:old_done) { Task.new(size: 2, completed_at: 6.months.ago) }\r\n    let(:small_not_done) { Task.new(size: 1) }\r\n    let(:large_not_done) { Task.new(size: 4) }\r\n\r\nNow we can spec out some calculation methods on the project\r\n\r\n    #spec/models/project_spec\r\n    it "knows its velocity" do\r\n      expect(project.completed_velocity).to eq(3)\r\n    end\r\n\r\n    it "knows its rate" do\r\n      expect(project.current_rate).to eq(1.0 / 7)\r\n    end\r\n\r\n    it "knows its project time remaining" do\r\n      expect(project.projected_days_remaining).to eq(35)\r\n    end\r\n\r\n    it "knows if it is on schedule" do\r\n      project.due_date = 1.week.from_now\r\n      expect(project).not_to be_on_schedule\r\n      project.due_date = 6.months.from_now\r\n      expect(project).to be_on_schedule\r\n    end\r\n\r\nThese specs introduce a dependency on Task, which is not ideal. But in the future we could use test doubles. With the conditional logic mostly in `Task`, the new `Project` methods can be fairly simple:\r\n\r\n    attr_accessor :due_date\r\n    def completed_velocity\r\n      tasks.sum(&:points_toward_velocity)\r\n    end\r\n\r\n    def current_rate\r\n      completed_velocity * 1.0 / 21\r\n    end\r\n\r\n    def projected_days_remaining\r\n      remaining_size / current_rate\r\n    end\r\n\r\n    def on_schedule?\r\n      (Date.today + projected_days_remaining) <= due_date\r\n    end\r\n\r\nOne special case it's worth testing for is a blank project, that has no tasks\r\n\r\n    it "properly estimates a blank project" do\r\n      expect(project.completed_velocity).to eq(0)\r\n      expect(project.current_rate).to eq(0)\r\n      expect(project.projected_days_remaining.nan?).to be_truthy\r\n      expect(project).not_to be_on_schedule\r\n    end\r\n\r\nThe `nan?` predicate works with ruby's `Float::NAN` error. You will need this to get the `on_schedule` test working.\r\n\r\n    def on_schedule?\r\n      return false if projected_days_remaining.nan?\r\n      (Date.today + projected_days_remaining) <= due_date\r\n    end\r\n\r\n## Chapter 3 - Test-Driven Rails\r\n\r\nHere are our basic requirements:\r\n\r\n* User can create and seed project with tasks.\r\n* User can enter task, associate it with a project and see it on the projects page \r\n* user can change at task's state to completed\r\n* Project can display progress and status using date projection.\r\n\r\n#### End to end testing\r\n\r\nThe testing practice called *outside-in testing* involves writing end-to-end tests to describe a feature, then augmenting it with a series of unit tests. We'll use capybara with rails to test the front end. Our first test should cover a user being able to add a project with no pre-existing data.\r\n\r\n    require 'rails_helper'\r\n    describe 'adding projects' do\r\n      it 'allows a user to create a project with tasks' do\r\n        visit new_project_path\r\n        fill_in 'Name', with: 'Project Runway'\r\n        fill_in 'Tasks', with: 'Task 1:3\\nTask 2:5'\r\n        click_on('Create Project')\r\n        visit projects_path\r\n        expect(page).to have_content('Project Runway')\r\n        expect(page).to have_content('8')\r\n      end\r\n    end\r\n\r\nThis test is not dependent on the code structure. The success is based on what is visible on the screen, rather than what is in the database.\r\n\r\nWe'll mark this test as pending for now, so we can work on the smaller steps to make this work. To mark a test as pending:\r\n\r\n    it "bends steel in its bare hands" do\r\n      pending "not implemented yet"\r\n    end\r\n\r\nIf you dont want the test to run at all, mark it with `skip`. If your test actually passes, it will through an error in your documentation, letting you know that maybe it shouldn't be pending anymore.\r\n\r\n#### Making our tests pass\r\n\r\nWe'll start with a rails generator to make the project.\r\n\r\n    rails g resource project name:string due_date:date\r\n    rails g resource task project:references title:string size:integer completed_at:datetime\r\n\r\nThe `resource` generator will set up all the files but leave the coding to you. We can set up the project and task classes in a similar way to the vanilla ruby code.\r\n\r\n    class Project < ActiveRecord::Base\r\n      has_many :tasks\r\n\r\n      def self.velocity_length_in_days\r\n        21\r\n      end\r\n      def incomplete_tasks\r\n        tasks.reject(&:complete?)\r\n      end\r\n      def done?\r\n        incomplete_tasks.empty?\r\n      end\r\n      def total_size\r\n        tasks.to_a.sum(&:size)\r\n      end\r\n      def remaining_size\r\n        incomplete_tasks.sum(&:size)\r\n      end\r\n      def completed_velocity\r\n        tasks.to_a.sum(&:points_toward_velocity)\r\n        end\r\n      def current_rate\r\n        completed_velocity * 1.0 / Project.velocity_length_in_days\r\n      end\r\n      def projected_days_remaining\r\n        remaining_size / current_rate\r\n      end\r\n      def on_schedule?\r\n        return false if projected_days_remaining.nan?\r\n        (Date.today + projected_days_remaining) <= due_date\r\n      end\r\n    end\r\n\r\n    class Task < ActiveRecord::Base\r\n      belongs_to :project\r\n\r\n      def mark_completed(date = nil)\r\n        self.completed_at = (date || Time.current)\r\n      end\r\n      def complete?\r\n        completed_at.present?\r\n      end\r\n\r\n      def part_of_velocity?\r\n        return false unless complete?\r\n        completed_at > Project.velocity_length_in_days.days.ago\r\n      end\r\n\r\n      def points_toward_velocity\r\n        if parts_of_velocity? then size else 0 end\r\n      end\r\n    end\r\n\r\nMigrate your database and the unit tests should still pass.\r\n\r\n### The Days are Action-Packed\r\n\r\nThe feature test gives us a new error based on the route.\r\n\r\n    The action 'new' could not be found for ProjectsController\r\n\r\nAdd the new action to our project controller.\r\n\r\n    def new\r\n      @project = Project.new\r\n    end\r\n\r\nThen we'll add the form elements that capybara is looking for\r\n\r\n    h1 New Project\r\n\r\n    = form_for @project do |f|\r\n      = f.label :name\r\n      = f.text_field :name\r\n      br\r\n      = f.label :tasks\r\n      = text_area_tag :"project[tasks]"\r\n      br\r\n      f.submit\r\n\r\nHere we create an area for generating tasks using the `text_area_tag`. We'll need to make some decisions on how to parse this, because it's outside of the rails boilerplate. You could place this logic in the controller, model, or another class. A new class can make the code easier to share and refactor. We'll create our own subset of classes called `ActionClass`es. Here's a spec:\r\n\r\n    # spec/actions/creates_project_spec\r\n    require 'rails_helper'\r\n\r\n    describe CreatesProject do\r\n      it "creates a project given a name" do\r\n        creator = CreatesProject.new(name: 'Project Runway")\r\n        creator.build\r\n        expect(creator.project.name).to eq("Project Runway")\r\n      end\r\n    end\r\n\r\nThis way, we don't need to do anything fancy to test it, because the logic is outside of the controller. The class itself would look like this:\r\n\r\n    # app/actions/creates_proejct.rb\r\n    class CreatesProject\r\n      attr_accessor :name, :task_string, :project\r\n\r\n      def initialize(name: '', task_string: '')\r\n        @name = name\r\n        @task_string = task_string\r\n      end\r\n\r\n      def build\r\n        self.project = Project.new(name: name)\r\n      end\r\n    end\r\n\r\nNext we'll get into the string parsing logic with a spec:\r\n\r\n  describe "task string parsing" do\r\n    it "handles an empty string" do\r\n      creator = CreatesProject.new(name: 'Test', task_string: '')\r\n      tasks = creator.convert_string_to_tasks\r\n      expect(tasks.size).to eq(0)\r\n    end\r\n\r\n    it "handles a single string" do\r\n      creator = CreatesProject.new(name: 'Test', task_string: 'Start things')\r\n      tasks = creator.convert_string_to_tasks\r\n      expect(tasks.size).to eq(1)\r\n      expect(tasks.map(&:title)).to eq(["Start things"])\r\n      expect(tasks.map(&:size)).to eq([1])\r\n    end\r\n\r\n    it 'handles a single string with size' do\r\n      creator = CreatesProject.new(name: 'Test', task_string: 'Start things:3')\r\n      tasks = creator.convert_string_to_tasks\r\n      expect(tasks.size).to eq(1)\r\n      expect(tasks.map(&:title)).to eq(['Start things'])\r\n      expect(tasks.map(&:size)).to eq([3])\r\n    end\r\n\r\n    it 'handles multiple tasks' do\r\n      creator = CreatesProject.new(name: 'Test', task_string: 'Start things:3\\nEnd things:2')\r\n      tasks = creator.convert_string_to_tasks\r\n      expect(tasks.size).to eq(2)\r\n      expect(tasks.map(&:title)).to eq(['Start things', 'End things'])\r\n      expect(tasks.map(&:size)).to eq([3, 2])\r\n    end\r\n\r\n    it 'attaches tasks to the project' do\r\n      creator = CreatesProject.new(name: 'Test', task_string: 'Start things:3\\nEnd things:2')\r\n      creator.create\r\n      expect(creator.project.tasks.size).to eq(2)\r\n      expect(creator.project).not_to be_a_new_record\r\n    end\r\n  end\r\n\r\nThe final test here is a *mini integration test*, used to make sure task creation is picked up as part of the regular API process. Here's the added features in the class:\r\n\r\n    class CreatesProject\r\n      attr_accessor :name, :task_string, :project\r\n\r\n      def initialize(name: '', task_string: '')\r\n        @name = name\r\n        @task_string = task_string\r\n      end\r\n\r\n      def build\r\n        self.project = Project.new(name: name)\r\n        project.tasks = convert_string_to_tasks\r\n        project\r\n      end\r\n\r\n      def convert_string_to_tasks\r\n        task_string.split("\\n").map do |task_string|\r\n          title, size = task_string.split(":")\r\n          size = 1 if (size.blank? || size.to_i.zero?)\r\n          Task.new(title: title, size: size)\r\n        end\r\n      end\r\n\r\n      def create\r\n        build\r\n        project.save\r\n      end\r\n    end\r\n\r\nWe can refactor the test code into single line tests, allowing for easier breakdown in case of failures.\r\n\r\n    describe "task string parsing" do\r\n      let(:creator) { CreatesProject.new(name: 'Test', task_string: task_string) }\r\n      let(:tasks) { creator.convert_string_to_tasks }\r\n\r\n      describe 'with an empty string' do\r\n        let(:task_string) { '' }\r\n        specify { expect(tasks.size).to eq(0) }\r\n      end\r\n\r\n      describe 'with a single string' do\r\n        let(:task_string) { "Start things" }\r\n        specify { expect(tasks.size).to eq(1) }\r\n        specify { expect(tasks.map(&:title)).to eq(['Start things']) }\r\n        specify { expect(tasks.map(&:size)).to eq([1]) }\r\n      end\r\n\r\n      describe 'with a single string and a size' do\r\n        let(:task_string) { "Start things:3" }\r\n        specify { expect(tasks.size).to eq(1) }\r\n        specify { expect(tasks.map(&:title)).to eq(['Start things']) }\r\n        specify { expect(tasks.map(&:size)).to eq([3]) }\r\n      end\r\n\r\n      describe 'with multiple tasks' do\r\n        let(:task_string) { "Start things:3\\nEnd things:2" }\r\n        specify { expect(tasks.size).to eq(2) }\r\n        specify { expect(tasks.map(&:title)).to eq(['Start things', 'End things']) }\r\n        specify { expect(tasks.map(&:size)).to eq([3, 2]) }\r\n      end\r\n\r\n      describe 'attaching tasks to the project\r\n        let(:task_string) { "Start things:3\\nEnd things:2" }\r\n        it 'saves the project and tasks' do\r\n          creator.create\r\n          expect(creator.project.tasks.size).to eq(2)\r\n          expect(creator.project).not_to be_a_new_record\r\n        end\r\n      end\r\n    end\r\n\r\nYou could also use compound matchers to speed up the suite while still being very precise.\r\n\r\n    it 'handles multiple tasks' do\r\n      creator = CreatesProject.new(name: 'Test', task_string: 'Start things:3\\nEnd things:2')\r\n      tasks = creator.convert_strings_to_tasks\r\n      expect(tasks).to match([\r\n        an_object_having_attributes(title: 'Start things', size: 3),\r\n        an_object_having_attributes(title: 'End things', size: 2)\r\n      ])\r\n    end\r\n\r\n### Who Controls the Controller?\r\n\r\nThe controller wont need much logic, but we still need to test the request/response cycle\r\n\r\n    # spec/controllers/projects_controller_spec.rb\r\n\r\n    describe "POST create" do\r\n      it "creates a project" do\r\n        post :create, project: { name: "Runway", tasks: "Start something:2" }\r\n        expect(response).to redirect_to(projects_path)\r\n        expect(assigns(:action).project.name).to eq("Runway")\r\n      end\r\n    end\r\n\r\nThis does not go through the whole Rails stack, it skips routing and does not invoke the view. The `post` method is used to trigger the controller action, but doesn't actually make an HTTP POST request(?). The additional argument, after the symbol used to specify the action, is setting the params hash. The `expect(response)` line tests what happens after the controller method completes. `expect(assigns(:action).project.name)` Uses `assigns` to find out what an instance variable is assigned to. To get this passing:\r\n\r\n    # app/controllers/projects_controller\r\n    def create\r\n      @action = CreatesProject.new(\r\n        name: params[:project][:name],\r\n        task_string: params[:project][:tasks])\r\n      @action.create\r\n      redirect_to projects_path\r\n    end\r\n      \r\nThis simply invokes the action object, `CreatesProject`, and redirects to the `projects_path`.\r\n\r\n#### Testing for Failure\r\n\r\nYou can add a validation to the model which will allow you to test a failing path. Simply put `validates :name, presence: true` in `app/models/project.rb`. Then you can trigger an invalid response by creating a project without a name.\r\n\r\n    it "goes back to the form on failure" do\r\n      post :create, project: { name: '', tasks: '' }\r\n      expect(response).to render_tempalte(:new)\r\n      expect(assigns(:project)).to be_present\r\n    end\r\n\r\nHere, we indicate the variable is assigned, but make no assumptions on the value. To modify our project for this:\r\n\r\n    def create\r\n      @action = CreatesProject.new(\r\n        name: params[:project][:name],\r\n        task_string: params[:project][:tasks])\r\n      success = @action.create\r\n      if success\r\n        redirect_to projects_path\r\n      else\r\n        @project = @action.project\r\n        render :new\r\n      end\r\n    end\r\n\r\nThe controller test needs only test the behavior of the controller itself. In this case, that means calling the action object with the correct parameters and using values as expected. Ideally, for speed and limited scope, we would have the controller act on fake objects rather than real ones.\r\n\r\n### Test with a View\r\n\r\nOur feature test is almost working, but the redirection to `projects_path` doesn't work because the projects controller has no index action. Just make a basic one:\r\n\r\n    def index\r\n      @projects = Project.all\r\n    end\r\n\r\nAlso create a view to satisfy Rails conventions. That view should display the project name and size we're expecting in the feature test.\r\n\r\n    h1 All Projects\r\n    table\r\n      thead\r\n        tr\r\n          td Project Name\r\n          td Total Project Size\r\n      tbody\r\n        - @projects.each do |project|\r\n          tr\r\n            td= project.name\r\n            td= project.total_size\r\n\r\nNow that we have the view our tst should pass. We can tighten it up a bit using the `has_selector` method to identify specific elements in the DOM.\r\n\r\n    expect(page).to have_selector(\r\n      "#project_#{@project.id} .name", text: "Project Runway")\r\n    expect(page).to have_selector(\r\n      "#project_#{project.id} .total-size", text: "8")\r\n\r\nThis will make sure we're at a specific point in the test. To get this working the view, we need to add some attributes to our HTML elements.\r\n\r\n    - @projects.each do |project|\r\n      tr.project-row id=dom_id(project)\r\n        td.name= project.name\r\n        td.total-size= project.total_size\r\n\r\n## Chapter 4 - What Makes Great Tests\r\n\r\nTests should follow the **SWIFT** acronym:\r\n\r\n* Straightforward - Clear and understandable, being more explicit when necessary\r\n* Well defined - Tests should return the same result consistantly. *Random failures can be referred to as 'Heisenbugs', 'Heisenspecs', or 'Rando Calrissians'*\r\n* Independent - Should not depend on other tests. Global data can also cause problems.\r\n* Fast - Speed hinderance may come from startup time, dependencies, database/external services.\r\n* Truthful - Brittle tests need to be updated frequent, aim for more stable expectations.\r\n\r\nActiveSupport should have a similar feature to Timecop. The author also suggests that there are alternatives to Timecop that might be more efficient. For fast tests, you can often extract the spec from the Rails environment.\r\n\r\n## Chapter 5 - Testing Models\r\n\r\nThere's a gem called `rspec-activemodel-mocks` that is maintained by the RSpec core team, which includes mock-object tools specific to ActiveModel.\r\n\r\nWhen developing a new feature, here is a standard workflow for testing:\r\n\r\n1. Test initial state\r\n2. Simplest successful path\r\n3. Alternative success paths\r\n4. Error & edge cases that break\r\n\r\n### Refactoring Models\r\n\r\nYou're looking for three things when refactoring\r\n\r\n* Complexity to break up\r\n* Duplication to combine\r\n* Abstractions waiting to be born\r\n\r\nCompound boolean logic should get its own method, into something inuitive like a `valid_name?` or `has_purchased_before?` method. Often, variables can become methods. Anywhere you see comments in a method, consider extraction.\r\n\r\n*Duplicate facts* tend to be extracted to constants, but you can also make them methods if they have potential to change.*Duplicate logic* could be a compound boolean or other calculation performed multiple times. *Missing abstraction* often means a new class or module. Consider this common case:\r\n\r\n    class User < ActiveRecord::Base\r\n      def full_name\r\n        "#{first_name} #{last_name}"\r\n      end\r\n\r\n      def sort_name\r\n        "#{last_name}, "first_name}"\r\n      end\r\n    end\r\n\r\nCould be instead:\r\n\r\n    class Name\r\n      attr_reader :first_name, :last_name\r\n\r\n      def initialize(first_name, last_name)\r\n        @first_name, @last_name = first_name, last_name\r\n      end\r\n\r\n      def full_name\r\n        "#{first_name} #{last_name}"\r\n      end\r\n\r\n      def sort_name\r\n        "#{last_name}, "first_name}"\r\n      end\r\n    end\r\n\r\n    class User < ActiveRecord::Base\r\n      delegate :full_name, :sort_name, to: :name\r\n      def name\r\n        Name.new(first_name, last_name)\r\n      end\r\n    end\r\n\r\nThis would not require any changes to make the current specs pass, but you would probably want to set up the name and user specs to test these different methods.\r\n\r\nYou may want to create separate classes for object states\r\n\r\n    if status == :completed\r\n      calculate_completed_time\r\n    else\r\n      calculate_incompleted_time\r\n    end\r\n\r\nCould become:\r\n\r\n    def calculator\r\n      if complete?\r\n        CompleteTaksCalculator.new(self)\r\n      else\r\n        IncompleteTaskCalculator.new(self)\r\n      end\r\n    end\r\n\r\n    def calculate\r\n      calculator.calculate_time\r\n    end\r\n\r\nFor a single method, this may not be helpful. But if there are multiple methods that perform this same check, it can be much clearer.\r\n\r\nPutting multiple assertions in a single test may cause you to miss failures on the first time around, but making individual tests for each can cause the test to run more slowly. You can compromise here by creating individual tests on the first time around, then refactor them into a single test later. Any time you want are creating a different variable, you should use a different test.\r\n\r\n### Testing what rails gives you\r\n\r\nThis should generally be avoided. The `shoulda-matchers` gem provides a lot of quick functionality for this, but is unnecessary if you're testing behavior rather than implementation. Your tests should describe behavior that implies the relationship. Validations should be tested in a similar fashion, by expecting behavior rather than the code written for them.\r\n\r\n### Testing ActiveRecord Finders\r\n\r\nExtract compound finders into their own methods to make it easier for documentation. Try to limit yourself to creating 2 objects, one the finder should include and one it should not. For sorting, you may need a third.\r\n\r\n### Testing Shared Modules and ActiveSupport Concerns\r\n\r\nYou can use *shared examples* for logic shared between models through standard modules or `ActiveSupport::Concern` modules. For example, say you have a module for determining size in both projects and tasks.\r\n\r\n    # spec/support/size_group.rb\r\n\r\n    RSpec.shared_examples "sizeable" do\r\n      let(:instance) { described_class.new }\r\n\r\n      it "knows a one-point story is small" do\r\n        allow(isntance).to receive(:size).and_return(1)\r\n        expect(instance).to be_small\r\n      end\r\n\r\n      it "knows a five-point story is epic" do\r\n        allow(instance).to receive(:size).and_return(5)\r\n        expect(instance).to be_epic\r\n      end\r\n    end\r\n\r\nThe dynamic method, `described_class` refers to the class referenced by the initial `RSpec.describe` block. This also utilizes a mock. Projects don't have a setter for the size method, so it can by mocked out. To use these shared examples:\r\n\r\n    # spec/models/task_spec.rb\r\n\r\n    RSpec.describe Task do\r\n      it_should_behave_like "sizeable"\r\n\r\nTo make these tests pass:\r\n\r\n    # app/models/task\r\n\r\n    def epic?\r\n      size >= 5\r\n    end\r\n\r\n    def small?\r\n      size <= 1\r\n    end\r\n\r\nYou can also use this method with a block to pass in `let` statements defining required variables.\r\n\r\n### Writing your own rspec matchers\r\n\r\nTo import a custom matcher, you need to explicitly require it in your `rails_helper`. There's a line you can uncomment to include the whole directory. A custom matcher may look like this:\r\n\r\n    # spec/support/size_matcher.rb\r\n    RSpec::Matchers.define :be_of_size do |expected|\r\n      match do |actual|\r\n        actual.total_size == expected\r\n      end\r\n    end\r\n\r\nThe `match` method takes a block with the `actual` argument that is passed in via `expect` in your spec. The `expected` is what you pass into the matcher itself.\r\n\r\n    it "can calculate total size" do\r\n      expect(project).to be_of_size(10)\r\n      expect(project).not_to be_of_size(5)\r\n    end\r\n\r\nYou can set up additional options to print out a custom description, failure massage, and negative failure message.\r\n\r\n    \r\n    RSpec::Matchers.define :be_of_size do |expected|\r\n      match do |actual|\r\n        actual.total_size == expected\r\n      end\r\n\r\n      description do\r\n        "have tasks totaling #{expected} points"\r\n      end\r\n\r\n      failure_message do |actual|\r\n        "expected project #{actual.name} to have size #{expected}"\r\n      end\r\n\r\n      failure_message_when_negated do |actual|\r\n        "expected project #{actual.name} not to have size #{expected}"\r\n      end\r\n    end\r\n\r\nIf you want to be able to chain the method, specify the chain in your matcher\r\n\r\n    RSpec::Matchers.define :be_of_size do |expected|\r\n      match do |actual|\r\n        size_to_check = @incomplete ? actual.remaining_size : actual.total_size\r\n        size_to_check == expected\r\n      end\r\n      \r\n      #...\r\n\r\n      chain :for_incomplete_tasks_only do\r\n        @incomplete = true\r\n      end\r\n    end\r\n\r\nThen you can say:\r\n\r\n    expect(project).to be_of_size(5).for_incomplete_tasks_only\r\n\r\n## Chapter 6 - Adding Data to Tests\r\n\r\nFixtures are always loaded, making them fast. They are considered brittle, because changing the sample data requires changing any specs that depend on the database state. Factories instead create a blueprint for building your data. To use factories, includ the `factory_girl_rails` gem and add this to your `rails_helper` for shortened method names:\r\n\r\n    config.include FactoryGirl::Syntax::Methods\r\n\r\nA simple factory_girl definition:\r\n\r\n    FactoryGirl.define do\r\n      factory :project do\r\n        name 'Project Runway'\r\n        due_date Date.parse('2014-01-12')\r\n      end\r\n    end\r\n\r\nIf you want a differnt name from the class for your factory:\r\n\r\n    factory :big_project, class: Project do\r\n\r\nIf you want to generate dynamic data, use a block:\r\n\r\n    due_date { Date.today - rand(50) }\r\n\r\nYou can also refer to a previously assigned value later in the factory\r\n\r\n    slug { "#{name.downcase.gsub(' ', '_')}" }\r\n\r\nThis will always be generated dynamically, so you can do:\r\n\r\n    project = create(:project, name: 'Book to Write')\r\n    expect(project.slug).to eq('book_to_write')\r\n\r\nYou can use 4 methods of turning a factory into a Ruby object:\r\n\r\n* build(:project) - Model instance, not saved\r\n* create(:project) - Model instance, saves\r\n* attributes_for(:project) - Hash of attributes suitable for calling `#new` or `#create`.\r\n* build_stubbed(:project) - Returns unsaved model with fake id. Also stubs database interaction to return error\r\n\r\nYou can define associations through a block\r\n\r\n    project = build_stubbed(:project) do |p|\r\n      p.tasks << build_stubbed(:task)\r\n    end\r\n\r\n*NOTE:* The author uses `build_stubbed` rather than `build`, because it has a rails id and can be used with associations.\r\n\r\nThere are `*_pair` and `*_list` methods that can be used for creating multiple objects.\r\n\r\n#### Associations and Factories\r\n\r\nA simple association:\r\n\r\n    factory :task do\r\n      title 'Something'\r\n      size 3\r\n      project\r\n    end\r\n\r\nThis implicitly calls `create(:project)`. If the association name doesn't match the factory name you want to use:\r\n\r\n    association :doer, factory: :user, name: 'Task Doer'\r\n\r\nThese associations can end up creating a lot of records in the database. The author suggests leaving associations out unless specified by a particular test. You can specify a build strategy in the factory, but it may cause issues when the association is expected to have an id.\r\n\r\n    association :doer, factory: :user, strategy: :build\r\n\r\n#### DRY factories\r\n\r\nYou can use a sequence to create different values for an attribute\r\n\r\n    factory :task do\r\n      sequence(:title) { |n| "tasks #{n}" }\r\n    end\r\n\r\nThis could be configured outside the factory\r\n\r\n    FactoryGirl.define do\r\n      sequence :email do |n|\r\n        "user_#{n}@test.com"\r\n      end\r\n\r\n      factory :user do\r\n        name "Fred"\r\n        email\r\n      end\r\n    end\r\n\r\nIf the sequence and attribute have different names you the more explicit:\r\n\r\n    user_email { generate(:email) }\r\n\r\nYou can also use inherited factories\r\n\r\n    FactoryGirl.define do\r\n      factory :task do\r\n        sequence(:title) { |n| "Task #{n}" }\r\n      end\r\n\r\n      factory :big_task, parent: :task do\r\n        size 5\r\n      end\r\n    end\r\n\r\nOr:\r\n\r\n    FactoryGirl.define do\r\n      factory :task do\r\n        sequence(:title) { |n| "Task #{n}" }\r\n\r\n        factory :big_task do\r\n          size 5\r\n        end\r\n      end\r\n    end\r\n\r\nYou can also use `trait` to share attributes\r\n\r\n    factory :task do\r\n      sequence(:title) { |n| "Task #{n}" }\r\n\r\n      trait :small do\r\n        size 1\r\n      end\r\n\r\n      trait :soon do\r\n        due_date { 1.day.from_now }\r\n      end\r\n\r\n      factory :trivial do\r\n        small\r\n        soon\r\n      end\r\n    end\r\n\r\nOr:\r\n\r\n    factory :trivial, traits: [:small, :soon]\r\n\r\n\r\n	3	2015-03-31 21:14:43.344871	2015-03-31 21:14:43.344871
89	Blender Shortcuts	blender-shortcuts	## Shortcuts\r\n\r\nFrom [BlenderTips.com](http://blendertips.com/hotkeys.html)\r\n\r\n* OM - Object Mode\r\n* EM - Edit Mode\r\n* SM - Sculpt Mode\r\n* PM - Pose Mode\r\n\r\nKey                      | Mode | Actions\r\n---                      | ---  | ---\r\n**A**                    |      | Select all / Deselect all\r\nShift + A                |      | Add menu\r\nAlt + A                  |      | Play animation toggle\r\nAlt + Shift + A          |      | Play animation in reverse toggle\r\nCtrl + A                 | OM   | Apply menu (such as freeze transforms)\r\nCtrl + Shift + A         | OM   | Make Dupliverts Real\r\n**B**                    |      | Border select (marquee select)\r\nShift + B                |      | Marquee zoom\r\nShift + B                |      | Set render border (Active Camera)\r\nAlt + B                  |      | Isolate 3D view toggle\r\n**C**                    |      | Circle select (brush select)\r\nC                        | SM   | Clay brush\r\nShift + C                |      | 3D Cursor to origin\r\nAlt + C                  | OM   | Convert menu\r\nAlt + C                  | EM   | Close / Open a curve\r\nCtrl + Shift + C         | OM   | Add constraint menu\r\nCtrl + Alt + Shift + C   |      | Set origin menu\r\n**D**                    | SM   | Draw brush\r\nShift + D                |      | Duplicate\r\nAlt + D                  |      | Linked Duplicate (Instance)\r\n**E**                    | EM   | Extrude region\r\nAlt + E                  | EM   | Extrude menu\r\nShift + E                | EM   | Crease\r\nShift + E                | EM   | Set keyframe extrapolation menu (Graph Editor)\r\nE                        |      | End frame assign (Timeline window)\r\nCtrl + E                 | EM   | Edges menu\r\n**F**                    | EM   | Create Face (3+ vertices selected)\r\nF                        | EM   | Create Edge (2 vertices selected)\r\nF                        | SM   | Brush size adjust\r\nShift + F                | SM   | Brush strength adjust\r\nShift + F                |      | Camera Fly mode\r\nCtrl + F                 | EM   | Faces menu\r\nAlt + F                  | EM   | Fill create faces\r\nAlt + Shift + F          | EM   | Beauty Fill create faces\r\nCtrl + Shift +  F        | EM   | Edge Flip\r\nCtrl + Alt + Shift + F   | EM   | Select linked flat faces (Face Mode Only)\r\n**G**                    |      | Move (Grab)\r\nG                        | SM   | Grab brush\r\nAlt + G                  | OM   | Reset location\r\nCtrl + G                 |      | Create new group\r\nShift + G                | OM   | Select grouped menu\r\nCtrl + Shift + G         | OM   | Add selected to active group\r\nAlt + Shift + G          | OM   | Remove selected from active group\r\nAlt + G                  |      | Ungroup (Node Editor)\r\nCtrl + G                 | EM   | Vertex Groups menu\r\nShift + G                | EM   | Select Similar menu\r\nCtrl + G                 |      | Add selected objects to group\r\n**H**                    |      | Hide selected\r\nShift + H                |      | Hide unselected\r\nAlt + H                  |      | Unhide all\r\nCtrl + H                 | OM   | Restrict selected from render\r\nCtrl + Alt + H           | OM   | Allow selected to render\r\nH                        |      | Minimize node toggle (Node window)\r\nCtrl + H                 | EM   | Hooks menu\r\n**I**                    |      | Insert keyframe menu\r\nAlt + I                  |      | Delete keyframe\r\nI                        | SM   | Inflate brush\r\nCtrl + I                 |      | Select inverse\r\nShift + I                | PM   | Add IK menu\r\nCtrl + Alt + I           | PM   | Remove IK constraint\r\n**J**                    |      | Save last render (Render window)\r\nCtrl + J                 | OM   | Join selected objects\r\nAlt + J                  | EM   | Convert selected triangles to quads\r\n**LMB** + K              | EM   | Knife cut\r\nLMB + Shift + K          | EM   | Knife cut midpoint\r\n**L**                    | OM   | Make local menu\r\nL                        | EM   | Select linked components\r\nL                        | SM   | Layer brush\r\nCtrl + L                 | OM   | Make links menu\r\nShift + L                | OM   | Select linked menu\r\n**M**                    | OM   | Move object to a different layer\r\nM                        |      | Add Marker (Action Editor)\r\nM                        |      | Add Marker (Timeline)\r\nCtrl + M                 |      | Mirror object over an axis\r\nAlt + M                  | EM   | Merge menu\r\n**N**                    |      | Properties panel toggle\r\nCtrl + N                 | OM   | Reload Start-up File\r\nCtrl + N                 | PM   | Recalculate Roll menu\r\nCtrl + N                 | EM   | Recalculate normals to outside\r\nCtrl + Shift + N         | EM   | Recalculate normals to inside\r\n**O**                    | EM   | Proportional Editing on/off toggle\r\nAlt + O                  | EM   | Proportional Editing connected toggle\r\nShift + O                | EM   | Proportional Editing Falloff type toggle\r\nCtrl + O                 |      | Open file\r\nCtrl + Alt + O           |      | Link file\r\nO                        |      | Clean keyframes (F-Curve Editor)\r\nAlt + O                  |      | Smooth Keys (F-Curve Editor)\r\nAlt + O                  | OM   | Clear origin on children\r\n**P**                    | OM   | Start Game Engine\r\nP                        | EM   | Separate\r\nP                        | SM   | Pinch/Magnify brush\r\nP                        | EM   | Pin vertices (UV/Image Editor)\r\nAlt + P                  | EM   | Unpin vertices (UV/Image Editor)\r\nAlt + P                  |      | Clear Parent menu\r\nCtrl + P                 |      | Make parent\r\nCtrl + Shift + P         |      | Make parent without inverse\r\nCtrl + P                 | EM   | Make vertex parent\r\nCtrl + Alt + P           |      | Make Proxy\r\n**Ctrl + Q**             |      | Quit Blender\r\nCtrl + Alt + Q           |      | Quad View toggle\r\n**R**                    |      | Rotate\r\nAlt + R                  | OM   | Clear rotation\r\nCtrl + R                 | EM   | Loop cut\r\nShift + R                | EM   | Select row from selected vertex (NURBS surface)\r\n**S**                    |      | Scale\r\nAlt + S                  | OM   | Reset Scale\r\nS                        | SM   | Smooth brush\r\nS                        |      | Start frame assign (Timeline window)\r\nShift + S                |      | Snap menu\r\nAlt + S                  | EM   | Shrink / Fatten\r\nCtrl + S                 |      | Save file\r\n**T**                    |      | Object tools panel toggle\r\nT                        |      | Toggle frames / seconds (Timeline)\r\nCtrl + T                 | EM   | Tilt (Curves)\r\nAlt + T                  | EM   | Reset Tilt (Curves)\r\nShift + T                | SM   | Flatten/Contrast brush\r\nShift + T                |      | Move Texture Space\r\nShift + Alt + T          |      | Scale Texture Space\r\nCtrl + T                 | OM   | Make track menu\r\nAlt + T                  | OM   | Clear Track menu\r\nCtrl + T                 | EM   | Convert selected faces to triangles\r\n**U**                    | OM   | Make single user menu\r\nU                        | EM   | UV Mapping menu\r\nCtrl + U                 |      | Save User Settings\r\nCtrl + Alt + U           |      | User Preferences window\r\n**V**                    | EM   | Set Handle Type menu (Curves)\r\nV                        | EM   | Rip Selected Vertices\r\nV                        |      | Object Mode / Vertex Paint Mode toggle\r\nCtrl + V                 | EM   | Vertices menu\r\n**W**                    | OM   | Specials menu\r\nW                        | EM   | Specials menu (varies per object)\r\nW                        | EM   | Weld / Align menu (UV/Image Editor)\r\nShift + W                | EM   | Warp\r\nCtrl + W                 |      | Save file\r\n**X**                    |      | Delete menu\r\nX                        |      | Constrain global X axis transform\r\nXX                       |      | Constrain local X axis transform\r\n**Y**                    |      | Constrain global Y axis transform\r\nYY                       |      | Constrain local Y axis transform\r\nY                        | EM   | Split Vertex / Edge / Face\r\n**Z**                    |      | Constrain global Z axis transform\r\nZZ                       |      | Constrain local Z axis transform\r\nZ                        |      | Solid / Wireframe toggle\r\nAlt + Z                  |      | Solid / Textured toggle\r\nCtrl + Z                 |      | Undo\r\nCtrl + Shift + Z         |      | Redo\r\nNum 0                    |      | Active camera view\r\nCtrl + Num 0             |      | Turn selected object into active camera\r\nCtrl + Alt + Num 0       |      | Move camera to current view\r\nNum .                    |      | Frame selected in view\r\nNum /                    |      | Global/local view toggle\r\nNum 1                    |      | Front view\r\nNum 3                    |      | Side view\r\nNum 7                    |      | Top view\r\nNum 5                    |      | Perspective/Orthographic view toggle\r\nCtrl + Num 1             |      | Back view\r\nCtrl + Num 3             |      | Other side view\r\nCtrl + Num 7             |      | Bottom view\r\nNum 4/Num 6              |      | Rotate view left/right in iterations\r\nNum 2/Num 8              |      | Rotate view up/down in iterations\r\nKeyboard 1-10            |      | View layer 1 - 10\r\nAlt + Keyboard 1-10      |      | View layer 11 - 20\r\n~                        |      | View all layers\r\nCtrl + Keyboard 1-10     |      | Add Subsurf modifier with that # of levels\r\n,                        |      | Bounding Box Center pivot\r\nCtrl + ,                 |      | Median Point pivot\r\n.                        |      | 3D Cursor pivot\r\nCtrl + .                 |      | Individual Centers pivot\r\nAlt + .                  |      | Active Object pivot\r\nHOME                     |      | Frame all in view\r\nTab                      |      | Object Mode / Edit Mode Toggle\r\nCtrl + Tab               | EM   | Mesh select mode menu\r\nCtrl + Tab               | OM   | Object Mode / Weight Paint Mode toggle\r\nCtrl + Tab               |      | Object Mode / Pose Mode toggle (Armatures)\r\nSpacebar                 |      | Search (3D View)\r\nSpacebar                 |      | Toolbox (UV/Image Editor)\r\nCtrl + Spacebar          |      | Transform Manipulator toggle\r\nAlt + Spacebar           |      | Orientation menu\r\nCtrl + LMB drag          |      | Lasso select\r\nCtrl + LMB click         | EM   | Extrude / Create new component or bone\r\nLeft/Right Arrow         |      | Increase 1 frame\r\nUp/Down Arrow            |      | Increase 10 frames\r\nShift + Left/Right Arrow |      | Go to end start/end frame\r\nCtrl + Up/Down Arrow     |      | Maximum current view toggle\r\nShift + Spacebar         |      | Maximize current view toggle\r\nCtrl + Left/Right Arrows |      | Screen presets toggle\r\nF1                       |      | Open file\r\nF2                       |      | Save As\r\nF3                       |      | Repeat History menu\r\nF3                       |      | Save Rendered Image (UV/Image Editor)\r\nF11                      |      | Show last closed rendered image\r\nF12                      |      | Render current frame\r\nCtrl + F12               |      | Render animation\r\nShift + F1               |      | Link/Append from Library\r\nShift + F2               |      | Logic Editor\r\nShift + F3               |      | Node Editor\r\nShift + F4               |      | Python Console\r\nShift + F5               |      | 3D View\r\nShift + F6               |      | Graph Editor\r\nShift + F7               |      | Properties\r\nShift + F8               |      | Video Sequence Editor\r\nShift + F9               |      | Outliner\r\nShift + F10              |      | UV/Image Editor\r\nShift + F11              |      | Text Editor\r\nShift + F12              |      | Dope Sheet\r\n	6	2015-03-31 21:14:43.398871	2015-03-31 21:14:43.398871
90	Test	test	# This is a test\r\n## Does this really have markdown highlight?\r\n\r\n**Not really?** Oh, kind of! *what* \r\n\r\nthis should update the textarea\r\n\r\n* mooore	1	2015-04-02 13:19:29.118255	2015-04-02 13:50:27.954547
\.


--
-- Name: notes_entries_id_seq; Type: SEQUENCE SET; Schema: public; Owner: shaun
--

SELECT pg_catalog.setval('notes_entries_id_seq', 90, true);

